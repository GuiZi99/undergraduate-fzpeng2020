cscope 15 /mnt/f/undergraduate_thesis/undergraduate-fzpeng2020/riscv-pk -q 0000002927 0000326200
	@Bin2Mem.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

4 *
	g›ti⁄_övÆid
 = 
NULL
;

5 *
	g›ti⁄_fûe_ö
 = 
NULL
;

6 *
	g›ti⁄_fûe_out
 = 
NULL
;

8 
FILE
 *
	gfûe_ö_des¸ùt‹
 = 
NULL
;

9 
FILE
 *
	gfûe_out_des¸ùt‹
 = 
NULL
;

11 
	$ex˚±i⁄_h™dÀr
(
code
) {

12 
code
) {

16 
	`¥ötf
("Error (10001): No optionÑecognized.\n");

17 
	`¥ötf
("Please specifyátÜeast one valid option.\n");

20 
	`¥ötf
("Eº‹ (10002): InvÆid o±i⁄: %s\n", 
›ti⁄_övÆid
);

23 
	`¥ötf
("Error (10003): No input Binary file specified.\n");

26 
	`¥ötf
("Eº‹ (10004): C™nŸ o≥¿fûe: %s\n", 
›ti⁄_fûe_ö
);

29 
	`¥ötf
("Eº‹ (10005): C™nŸ cª©êfûe: %s\n", 
›ti⁄_fûe_out
);

35 i‡(
fûe_ö_des¸ùt‹
 !
NULL
) {

36 
	`f˛o£
(
fûe_ö_des¸ùt‹
);

38 i‡(
fûe_out_des¸ùt‹
 !
NULL
) {

39 
	`f˛o£
(
fûe_out_des¸ùt‹
);

41 
	`exô
(0);

42 
	}
}

44 
	$maö
(
¨gc
, **
¨gv
) {

46 
i
=0,
j
=0;

47 
ãmp1
,
ãmp2
,
ãmp3
,
ãmp4
;

48 
›ti⁄_Êag
 = 0;

50 
¨gc
 > 0) {

51 i‡(**
¨gv
 == '-') {

52 (*
¨gv
) ++;

53 **
¨gv
) {

55 
›ti⁄_Êag
 |= 0x4;

56 
¨gv
 ++;

57 
›ti⁄_fûe_ö
 = *
¨gv
;

58 
¨gc
 --;

61 
›ti⁄_Êag
 |= 0x8;

62 
¨gv
 ++;

63 
›ti⁄_fûe_out
 = *
¨gv
;

64 
¨gc
 --;

67 
›ti⁄_Êag
 |= 0x1;

68 (*
¨gv
) --;

69 
›ti⁄_övÆid
 = *
¨gv
;

73 
¨gv
 ++;

74 
¨gc
 --;

78 
fûe_ö_des¸ùt‹
 = 
	`f›í
(
›ti⁄_fûe_ö
, "rb");

79 i‡(
fûe_ö_des¸ùt‹
 =
NULL
) {

80 
	`ex˚±i⁄_h™dÀr
(10004);

83 
fûe_out_des¸ùt‹
 = 
	`f›í
(
›ti⁄_fûe_out
, "w");

84 i‡(
fûe_out_des¸ùt‹
 =
NULL
) {

85 
	`ex˚±i⁄_h™dÀr
(10005);

90 !
	`„of
(
fûe_ö_des¸ùt‹
)) {

92 
	`fsˇnf
(
fûe_ö_des¸ùt‹
, "%c", &
ãmp1
);

93 
	`fsˇnf
(
fûe_ö_des¸ùt‹
, "%c", &
ãmp2
);

94 
	`fsˇnf
(
fûe_ö_des¸ùt‹
, "%c", &
ãmp3
);

95 
	`fsˇnf
(
fûe_ö_des¸ùt‹
, "%c", &
ãmp4
);

97 if(!
	`„of
(
fûe_ö_des¸ùt‹
))

99 
	`Ârötf
(
fûe_out_des¸ùt‹
, "%02x", 
ãmp4
);

100 
	`Ârötf
(
fûe_out_des¸ùt‹
, "%02x", 
ãmp3
);

101 
	`Ârötf
(
fûe_out_des¸ùt‹
, "%02x", 
ãmp2
);

102 
	`Ârötf
(
fûe_out_des¸ùt‹
, "%02x", 
ãmp1
);

103 
	`Ârötf
(
fûe_out_des¸ùt‹
, "\n");

110 
	`ex˚±i⁄_h™dÀr
(0);

112 
	}
}

	@bbl/bbl.c

1 
	~"bbl.h
"

2 
	~"må≠.h
"

3 
	~"©omic.h
"

4 
	~"vm.h
"

5 
	~"bôs.h
"

6 
	~"c⁄fig.h
"

7 
	~<°rög.h
>

9 
kî√l_ñf_öfo
 
	göfo
;

10 vﬁ©ûê
	gñf_lﬂded
;

12 
	$su≥rvis‹_vm_öô
()

14 
uöçå_t
 
highe°_va
 = 
DRAM_BASE
 - 
fú°_‰ì_∑ddr
;

16 
mem_size
 = 
	`MIN
(mem_size, 
highe°_va
 - 
öfo
.
fú°_u£r_vaddr
Ë& -
MEGAPAGE_SIZE
;

18 
±e_t
* 
sbi_±
 = (±e_t*)(
öfo
.
fú°_vaddr_a·î_u£r
 + info.
lﬂd_off£t
);

19 
	`mem£t
(
sbi_±
, 0, 
RISCV_PGSIZE
);

20 
	`¥ötm
("öfo.fú°_u£r_vaddr: %x sbi_±_addr:%x mem_size: %x\n", 
öfo
.
fú°_u£r_vaddr
, (
uöt32_t
)
sbi_±
,
mem_size
);

21 
±e_t
* 
middÀ_±
 = (*)
sbi_±
 + 
RISCV_PGSIZE
;

22 #i‡
__riscv_xÀn
 == 32

24 
size_t
 
num_middÀ_±s
 = 1;

25 
±e_t
* 
roŸ_±
 = 
middÀ_±
;

26 
	`mem£t
(
roŸ_±
, 0, 
RISCV_PGSIZE
);

29 
	`¥ötm
("MEGAPAGE_SIZE: %dÅŸÆ_vaddr: %d \n", 
MEGAPAGE_SIZE
, (-
öfo
.
fú°_u£r_vaddr
 -1) );

31 
	`¥ötm
("Sã∞1.1 begö mem£àsize: %x \n", (
num_middÀ_±s
 + 1Ë* 
RISCV_PGSIZE
);

33 
size_t
 
i
 = 0; i < 
num_middÀ_±s
 - 1; i++)

34 
roŸ_±
[(1<<
RISCV_PGLEVEL_BITS
)-
num_middÀ_±s
+
i
] = 
	`±d_¸óã
(((
uöçå_t
)
middÀ_±
 >> 
RISCV_PGSHIFT
) + i);

36 
	`dõ
("not implemented!");

37 
size_t
 
num_middÀ_±s
 = (-
öfo
.
fú°_u£r_vaddr
 - 1Ë/ 
GIGAPAGE_SIZE
 + 1;

38 
±e_t
* 
roŸ_±
 = (*)
middÀ_±
 + 
num_middÀ_±s
 * 
RISCV_PGSIZE
;

39 
	`mem£t
(
middÀ_±
, 0, (
num_middÀ_±s
 + 1Ë* 
RISCV_PGSIZE
);

40 
size_t
 
i
 = 0; i < 
num_middÀ_±s
; i++)

41 
roŸ_±
[(1<<
RISCV_PGLEVEL_BITS
)-
num_middÀ_±s
+
i
] = 
	`±d_¸óã
(((
uöçå_t
)
middÀ_±
 >> 
RISCV_PGSHIFT
) + i);

44 
uöçå_t
 
vaddr
 = 
öfo
.
fú°_u£r_vaddr
, 
∑ddr
 = vadd∏+ info.
lﬂd_off£t
, 
íd
 = info.
fú°_vaddr_a·î_u£r
;

45 
∑ddr
 < 
DRAM_BASE
 + 
mem_size
; 
vaddr
 +
RISCV_PGSIZE
,Öaddr += RISCV_PGSIZE) {

46 
l2_shi·
 = 
RISCV_PGLEVEL_BITS
 + 
RISCV_PGSHIFT
;

47 
l1_shi·
 = 
RISCV_PGSHIFT
;

48 
size_t
 
l2_idx
 = (
öfo
.
fú°_u£r_vaddr
 >> 
l2_shi·
Ë& ((1 << 
RISCV_PGLEVEL_BITS
)-1);

49 
l2_idx
 +((
vaddr
 - 
öfo
.
fú°_u£r_vaddr
Ë>> 
l2_shi·
);

50 
size_t
 
l1_idx
 = (
öfo
.
fú°_u£r_vaddr
 >> 
l1_shi·
Ë& ((1 << 
RISCV_PGLEVEL_BITS
)-1);

51 
l1_idx
 +((
vaddr
 - 
öfo
.
fú°_u£r_vaddr
Ë>> 
l1_shi·
);

52 
middÀ_±
[
l1_idx
] = 
	`±e_¸óã
(
∑ddr
 >> 
RISCV_PGSHIFT
, 
PTE_G
 | 
PTE_R
 | 
PTE_W
 | 
PTE_X
);

54 if(
vaddr
 =
öfo
.
fú°_u£r_vaddr
 || 
∑ddr
 =
DRAM_BASE
 + 
mem_size
 - 
RISCV_PGSIZE
 ) 
	`¥ötm
("%x %x, %x, %x %x\n", vaddr,Öaddr, vadd∏>> 22, 
l2_idx
, 
l1_idx
);

57 
uöçå_t
 
vaddr
 = 
öfo
.
fú°_u£r_vaddr
, 
∑ddr
 = vadd∏+ info.
lﬂd_off£t
, 
íd
 = info.
fú°_vaddr_a·î_u£r
;

58 
∑ddr
 < 
DRAM_BASE
 + 
mem_size
; 
vaddr
 +
MEGAPAGE_SIZE
,Öaddr += MEGAPAGE_SIZE) {

59 
l2_shi·
 = 
RISCV_PGLEVEL_BITS
 + 
RISCV_PGSHIFT
;

60 
size_t
 
l2_idx
 = (
öfo
.
fú°_u£r_vaddr
 >> 
l2_shi·
Ë& ((1 << 
RISCV_PGLEVEL_BITS
)-1);

61 
l2_idx
 +((
vaddr
 - 
öfo
.
fú°_u£r_vaddr
Ë>> 
l2_shi·
);

62 
middÀ_±
[
l2_idx
] = 
	`±e_¸óã
(
∑ddr
 >> 
RISCV_PGSHIFT
, 
PTE_G
 | 
PTE_R
 | 
PTE_W
 | 
PTE_X
);

63 
	`¥ötm
("vaddr: %x,Öaddr: %x, vaddr>>22: %x,Ü2_idx: %x\n", 
vaddr
, 
∑ddr
, vadd∏>> 22, 
l2_idx
);

68 
_sbi_íd
;

69 
uöçå_t
 
num_sbi_∑ges
 = ((uöçå_t)&
_sbi_íd
 - 
DRAM_BASE
 - 1Ë/ 
RISCV_PGSIZE
 + 1;

70 
	`as£π
(
num_sbi_∑ges
 <(1 << 
RISCV_PGLEVEL_BITS
));

71 
uöçå_t
 
i
 = 0; i < 
num_sbi_∑ges
; i++) {

72 
uöçå_t
 
idx
 = (1 << 
RISCV_PGLEVEL_BITS
Ë- 
num_sbi_∑ges
 + 
i
;

73 
sbi_±
[
idx
] = 
	`±e_¸óã
((
DRAM_BASE
 / 
RISCV_PGSIZE
Ë+ 
i
, 
PTE_G
 | 
PTE_R
 | 
PTE_X
);

76 
±e_t
* 
sbi_±e
 = 
middÀ_±
 + ((
num_middÀ_±s
 << 
RISCV_PGLEVEL_BITS
) - 1);

77 
	`as£π
(!*
sbi_±e
);

78 *
sbi_±e
 = 
	`±d_¸óã
((
uöçå_t
)
sbi_±
 >> 
RISCV_PGSHIFT
);

82 
	`mb
();

83 
roŸ_∑ge_èbÀ
 = 
roŸ_±
;

84 
	`wrôe_c§
(
•tbr
, (
uöçå_t
)
roŸ_±
 >> 
RISCV_PGSHIFT
);

85 
	}
}

87 
	$boŸ_lﬂdî
()

89 
	`log
("machine mode:ÜoadingÖayload OS...");

91 
_∑ylﬂd_°¨t
, 
_∑ylﬂd_íd
;

92 
	`lﬂd_kî√l_ñf
(&
_∑ylﬂd_°¨t
, &
_∑ylﬂd_íd
 - &_∑ylﬂd_°¨t, &
öfo
);

93 
	`su≥rvis‹_vm_öô
();

94 #ifde‡
PK_ENABLE_LOGO


97 
	`mb
();

98 
ñf_lﬂded
 = 1;

99 
	`íãr_su≥rvis‹_mode
((*)
öfo
.
íåy
, 0);

100 
	}
}

102 
	$boŸ_Ÿhî_h¨t
()

104 !
ñf_lﬂded
)

106 
	`mb
();

107 
	`íãr_su≥rvis‹_mode
((*)
öfo
.
íåy
, 0);

108 
	}
}

	@bbl/bbl.h

3 #i‚de‡
_BBL_H


4 
	#_BBL_H


	)

6 #i‚de‡
__ASSEMBLER__


8 
	~<°döt.h
>

9 
	~<°ddef.h
>

12 
uöçå_t
 
	míåy
;

13 
uöçå_t
 
	mfú°_u£r_vaddr
;

14 
uöçå_t
 
	mfú°_vaddr_a·î_u£r
;

15 
uöçå_t
 
	mlﬂd_off£t
;

16 } 
	tkî√l_ñf_öfo
;

18 
lﬂd_kî√l_ñf
(* 
blob
, 
size_t
 
size
, 
kî√l_ñf_öfo
* 
öfo
);

19 
¥öt_logo
();

	@bbl/kernel_elf.c

3 
	~"må≠.h
"

4 
	~"bbl.h
"

5 
	~"bôs.h
"

6 
	~"vm.h
"

7 
	~<ñf.h
>

8 
	~<°rög.h
>

10 
	$lﬂd_kî√l_ñf
(* 
blob
, 
size_t
 
size
, 
kî√l_ñf_öfo
* 
öfo
)

12 
Elf_Ehdr
* 
eh
 = 
blob
;

13 i‡((*
eh
Ë> 
size
 ||

14 !(
eh
->
e_idít
[0] == '\177' &&Éh->e_ident[1] == 'E' &&

15 
eh
->
e_idít
[2] == 'L' &&Éh->e_ident[3] == 'F'))

16 
Áû
;

18 i‡(
	`IS_ELF64
(*
eh
Ë!((
uöçå_t
) == 8))

19 
Áû
;

21 
uöçå_t
 
mö_vaddr
 = -1, 
max_vaddr
 = 0;

22 
size_t
 
phdr_size
 = 
eh
->
e_phnum
 * (
Elf_Ehdr
);

23 
Elf_Phdr
* 
ph
 = 
blob
 + 
eh
->
e_phoff
;

24 i‡(
eh
->
e_phoff
 + 
phdr_size
 > 
size
)

25 
Áû
;

26 
fú°_‰ì_∑ddr
 = 
	`ROUNDUP
(fú°_‰ì_∑ddr, 
MEGAPAGE_SIZE
);

28 
i
 = 0; i < 
eh
->
e_phnum
; i++)

29 i‡(
ph
[
i
].
p_ty≥
 =
PT_LOAD
 &&Öh[i].
p_memsz
 &&Öh[i].
p_vaddr
 < 
mö_vaddr
)

30 
mö_vaddr
 = 
ph
[
i
].
p_vaddr
;

31 
mö_vaddr
 = 
	`ROUNDDOWN
(mö_vaddr, 
MEGAPAGE_SIZE
);

32 
uöçå_t
 
büs
 = 
fú°_‰ì_∑ddr
 - 
mö_vaddr
;

33 
i
 = 
eh
->
e_phnum
 - 1; i >= 0; i--) {

34 if(
ph
[
i
].
p_ty≥
 =
PT_LOAD
 &&Öh[i].
p_memsz
) {

35 
uöçå_t
 
¥ïad
 = 
ph
[
i
].
p_vaddr
 % 
RISCV_PGSIZE
;

36 
uöçå_t
 
vaddr
 = 
ph
[
i
].
p_vaddr
 + 
büs
;

37 i‡(
vaddr
 + 
ph
[
i
].
p_memsz
 > 
max_vaddr
)

38 
max_vaddr
 = 
vaddr
 + 
ph
[
i
].
p_memsz
;

39 i‡(
ph
[
i
].
p_off£t
 +Öh[i].
p_fûesz
 > 
size
)

40 
Áû
;

41 
	`¥ötm
("mem˝y: size: %x de°: %x src: %x\n", 
ph
[
i
].
p_fûesz
, 
vaddr
, 
blob
 +Öh[i].
p_off£t
);

42 
	`mem˝y
((*)
vaddr
, 
blob
 + 
ph
[
i
].
p_off£t
,Öh[i].
p_fûesz
);

43 
	`¥ötm
("mem£à'0': size: %x de°: %x\n", 
¥ïad
, 
vaddr
 -Örepad);

44 
	`mem£t
((*)
vaddr
 - 
¥ïad
, 0,Örepad);

45 
	`¥ötm
("mem£à'0': size: %x de°: %x\n", 
ph
[
i
].
p_memsz
 -Öh[i].
p_fûesz
, 
vaddr
 +Öh[i].p_filesz);

46 
	`mem£t
((*)
vaddr
 + 
ph
[
i
].
p_fûesz
, 0,Öh[i].
p_memsz
 -Öh[i].p_filesz);

49 
	`¥ötm
("loadingÉlf done!\n");

50 
öfo
->
íåy
 = 
eh
->
e_íåy
;

51 
öfo
->
lﬂd_off£t
 = 
büs
;

52 
öfo
->
fú°_u£r_vaddr
 = 
mö_vaddr
;

53 
öfo
->
fú°_vaddr_a·î_u£r
 = 
	`ROUNDUP
(
max_vaddr
 - 
büs
, 
RISCV_PGSIZE
);

56 
Áû
:

57 
	`dõ
("failedÅoÜoadÖayload");

58 
	}
}

	@bbl/logo.c

1 
	~<°rög.h
>

2 
	~"må≠.h
"

4 c⁄° 
	glogo
[] =

29 
	$¥öt_logo
()

31 
	`put°rög
(
logo
);

32 
	}
}

	@bbl/payload.S

1 .
	g£˘i⁄
 ".∑ylﬂd","a",@
	g¥ogbôs


2 .
	gÆign
 3

4 .
globl
 
	g_∑ylﬂd_°¨t
, 
_∑ylﬂd_íd


5 
	g_∑ylﬂd_°¨t
:

6 .
öcbö
 
BBL_PAYLOAD


7 
_∑ylﬂd_íd
:

	@build/_dummy_payload.c

1 
	$_dummy_∑ylﬂd
–
¨g
 ) { árg; 
	}
}

	@build/config.h

5 
	#BBL_ENABLED


	)

8 
	#DUMMY_PAYLOAD_ENABLED


	)

11 
	#MACHINE_ENABLED


	)

14 
	#PACKAGE_BUGREPORT
 "Andªw W©îm™"

	)

17 
	#PACKAGE_NAME
 "RISC-V Proxy Kî√l"

	)

20 
	#PACKAGE_STRING
 "RISC-V Proxy Kî√»?"

	)

23 
	#PACKAGE_TARNAME
 "riscv-pk"

	)

26 
	#PACKAGE_URL
 ""

	)

29 
	#PACKAGE_VERSION
 "?"

	)

32 
	#PK_ENABLED


	)

35 
	#PK_ENABLE_FP_EMULATION


	)

38 
	#PK_ENABLE_LOGO


	)

41 
	#PK_ENABLE_VM


	)

47 
	#STDC_HEADERS
 1

	)

50 
	#UTIL_ENABLED


	)

	@dummy_payload/dummy_payload.c

1 
	~<°döt.h
>

2 
	~"sbi.h
"

4 
asm
 (".globl _start\n\
_start:Üa sp, stack\n\
Éntry\n\
.pushsection .rodata\n\
.align 4\n\
.skip 4096\n\
:\n\
.popsection");

13 
	$íåy
()

15 c⁄° * 
mesßge
 =

18 *
mesßge
)

19 
	`sbi_c⁄sﬁe_putch¨
(*
mesßge
++);

20 
	`sbi_shutdown
();

21 
	}
}

	@machine/atomic.h

3 #i‚de‡
_RISCV_ATOMIC_H


4 
	#_RISCV_ATOMIC_H


	)

6 
	~"c⁄fig.h
"

7 
	~"ícodög.h
"

10 
	#dißbÀ_úqßve
(Ë(0)

	)

11 
	#íabÀ_úqª°‹e
(
Êags
Ë((Ë(Êags))

	)

13 °ru˘ { 
	mlock
; } 
	t•ölock_t
;

14 
	#SPINLOCK_INIT
 {0}

	)

16 
	#mb
(Ë
asm
 vﬁ©ûê("„n˚" ::: "mem‹y")

	)

17 
	#©omic_£t
(
±r
, 
vÆ
Ë(*(vﬁ©ûê
	`ty≥of
(*’å)Ë*)’åËvÆ)

	)

18 
	#©omic_ªad
(
±r
Ë(*(vﬁ©ûê
	`ty≥of
(*’å)Ë*)’å))

	)

20 #ifde‡
__riscv_©omic


21 
	#©omic_add
(
±r
, 
öc
Ë
	`__sync_„tch_™d_add
’å, inc)

	)

22 
	#©omic_‹
(
±r
, 
öc
Ë
	`__sync_„tch_™d_‹
’å, inc)

	)

23 
	#©omic_sw≠
(
±r
, 
swp
Ë
	`__sync_lock_ã°_™d_£t
’å, swp)

	)

24 
	#©omic_ˇs
(
±r
, 
cmp
, 
swp
Ë
	`__sync_vÆ_com∑ª_™d_sw≠
’å, cmp, swp)

	)

26 
	#©omic_bö›
(
±r
, 
öc
, 
›
) ({ \

27 
Êags
 = 
	`dißbÀ_úqßve
(); \

28 
	`ty≥of
(*(
±r
)Ë
ªs
 = 
	`©omic_ªad
(ptr); \

29 
	`©omic_£t
(
±r
, 
›
); \

30 
	`íabÀ_úqª°‹e
(
Êags
); \

31 
ªs
; })

	)

32 
	#©omic_add
(
±r
, 
öc
Ë
	`©omic_bö›
’å, inc, 
ªs
 + (öc))

	)

33 
	#©omic_‹
(
±r
, 
öc
Ë
	`©omic_bö›
’å, inc, 
ªs
 | (öc))

	)

34 
	#©omic_sw≠
(
±r
, 
öc
Ë
	`©omic_bö›
’å, inc, (öc))

	)

35 
	#©omic_ˇs
(
±r
, 
cmp
, 
swp
) ({ \

36 
Êags
 = 
	`dißbÀ_úqßve
(); \

37 
	`ty≥of
(*(
±r
)Ë
ªs
 = *(volatileÅypeof(*(ptr)) *)(ptr); \

38 i‡(
ªs
 =(
cmp
)Ë*(vﬁ©ûê
	`ty≥of
(
±r
))’åË(
swp
); \

39 
	`íabÀ_úqª°‹e
(
Êags
); \

40 
ªs
; })

	)

43 
ölöe
 
	$•ölock_åylock
(
•ölock_t
* 
lock
)

45 
ªs
 = 
	`©omic_sw≠
(&
lock
->lock, -1);

46 
	`mb
();

47  
ªs
;

48 
	}
}

50 
ölöe
 
	$•ölock_lock
(
•ölock_t
* 
lock
)

54 
	`©omic_ªad
(&
lock
->lock))

56 } 
	`•ölock_åylock
(
lock
));

57 
	}
}

59 
ölöe
 
	$•ölock_u∆ock
(
•ölock_t
* 
lock
)

61 
	`mb
();

62 
	`©omic_£t
(&
lock
->lock,0);

63 
	}
}

65 
ölöe
 
	$•ölock_lock_úqßve
(
•ölock_t
* 
lock
)

67 
Êags
 = 
	`dißbÀ_úqßve
();

68 
	`•ölock_lock
(
lock
);

69  
Êags
;

70 
	}
}

72 
ölöe
 
	$•ölock_u∆ock_úqª°‹e
(
•ölock_t
* 
lock
, 
Êags
)

74 
	`•ölock_u∆ock
(
lock
);

75 
	`íabÀ_úqª°‹e
(
Êags
);

76 
	}
}

	@machine/bits.h

1 #i‚de‡
_RISCV_BITS_H


2 
	#_RISCV_BITS_H


	)

4 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
((x), 1)

	)

5 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
((x), 0)

	)

7 
	#ROUNDUP
(
a
, 
b
Ë(((◊)-1)/(b)+1)*(b))

	)

8 
	#ROUNDDOWN
(
a
, 
b
Ë(◊)/(b)*(b))

	)

10 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

11 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

12 
	#CLAMP
(
a
, 
lo
, 
hi
Ë
	`MIN
(
	`MAX
◊,Üo), hi)

	)

14 
	#EXTRACT_FIELD
(
vÆ
, 
which
Ë(((vÆË& (which)Ë/ ((whichË& ~((which)-1)))

	)

15 
	#INSERT_FIELD
(
vÆ
, 
which
, 
fõldvÆ
Ë(((vÆË& ~(which)Ë| ((fõldvÆË* ((whichË& ~((which)-1))))

	)

17 
	#STR
(
x
Ë
	`XSTR
(x)

	)

18 
	#XSTR
(
x
Ë#x

	)

20 #i‡
__riscv_xÀn
 == 64

21 
	#SLL32
 
¶lw


	)

22 
	#STORE
 
sd


	)

23 
	#LOAD
 
ld


	)

24 
	#LWU
 
lwu


	)

25 
	#LOG_REGBYTES
 3

	)

27 
	#SLL32
 
¶l


	)

28 
	#STORE
 
sw


	)

29 
	#LOAD
 
lw


	)

30 
	#LWU
 
lw


	)

31 
	#LOG_REGBYTES
 2

	)

33 
	#REGBYTES
 (1 << 
LOG_REGBYTES
)

	)

	@machine/configstring.c

1 
	~"c⁄fig°rög.h
"

2 
	~"ícodög.h
"

3 
	~"må≠.h
"

4 
	~"©omic.h
"

5 
	~"°rög.h
"

6 
	~<°dio.h
>

8 
	$quîy_mem
(c⁄° * 
c⁄fig_°rög
)

13 
uöçå_t
 
ba£
 = (uintptr_t)0x80000000;

14 
	`as£π
(
ba£
 =
DRAM_BASE
);

17 
mem_size
 = (
uöt64_t
)0x00800000;

18 
	}
}

20 
	$quîy_πc
(c⁄° * 
c⁄fig_°rög
)

25 
mtime
 = (*)(
uöçå_t
)0x40000000;

26 
	}
}

28 
	$quîy_∂ic
(c⁄° * 
c⁄fig_°rög
)

31 
quîy_ªsu…
 
ªs
 = 
	`quîy_c⁄fig_°rög
(
c⁄fig_°rög
, "plic{priority");

32 i‡(!
ªs
.
°¨t
)

34 
∂ic_¥i‹ôõs
 = (
uöt32_t
*)(
uöçå_t
)
	`gë_uöt
(
ªs
);

36 
ªs
 = 
	`quîy_c⁄fig_°rög
(
c⁄fig_°rög
, "plic{ndevs");

37 i‡(!
ªs
.
°¨t
)

39 
∂ic_ndevs
 = 
	`gë_uöt
(
ªs
);

43 
	}
}

45 
	$quîy_h¨t_∂ic
(c⁄° * 
c⁄fig_°rög
, 
hls_t
* 
hls
, 
c‹e
, 
h¨t
)

48 
buf
[48];

49 
	`¢¥ötf
(
buf
,  buf, "c‹e{%d{%d{∂ic{m{õ", 
c‹e
, 
h¨t
);

50 
quîy_ªsu…
 
ªs
 = 
	`quîy_c⁄fig_°rög
(
c⁄fig_°rög
, 
buf
);

51 i‡(
ªs
.
°¨t
)

52 
hls
->
∂ic_m_õ
 = (*)(
uöçå_t
)
	`gë_uöt
(
ªs
);

54 
	`¢¥ötf
(
buf
,  buf, "c‹e{%d{%d{∂ic{m{thªsh", 
c‹e
, 
h¨t
);

55 
ªs
 = 
	`quîy_c⁄fig_°rög
(
c⁄fig_°rög
, 
buf
);

56 i‡(
ªs
.
°¨t
)

57 
hls
->
∂ic_m_thªsh
 = (*)(
uöçå_t
)
	`gë_uöt
(
ªs
);

59 
	`¢¥ötf
(
buf
,  buf, "c‹e{%d{%d{∂ic{s{õ", 
c‹e
, 
h¨t
);

60 
ªs
 = 
	`quîy_c⁄fig_°rög
(
c⁄fig_°rög
, 
buf
);

61 i‡(
ªs
.
°¨t
)

62 
hls
->
∂ic_s_õ
 = (*)(
uöçå_t
)
	`gë_uöt
(
ªs
);

64 
	`¢¥ötf
(
buf
,  buf, "c‹e{%d{%d{∂ic{s{thªsh", 
c‹e
, 
h¨t
);

65 
ªs
 = 
	`quîy_c⁄fig_°rög
(
c⁄fig_°rög
, 
buf
);

66 i‡(
ªs
.
°¨t
)

67 
hls
->
∂ic_s_thªsh
 = (*)(
uöçå_t
)
	`gë_uöt
(
ªs
);

71 
	}
}

73 
	$quîy_h¨ts
(c⁄° * 
c⁄fig_°rög
)

82 
hls_t
* 
hls
 = 
	`hls_öô
(
num_h¨ts
);

83 
hls
->
ùi
 = (*)(
uöçå_t
)0x40001000;

90 
hls
->
timecmp
 = (*)(
uöçå_t
)0x40000008;

92 
	`mb
();

95 *
hls
->
ùi
 = 1;

97 
num_h¨ts
++;

102 
	`as£π
(
num_h¨ts
);

103 
	`as£π
(
num_h¨ts
 <
MAX_HARTS
);

104 
	}
}

106 
uöçå_t
 
u¨t
;

107 
Âga_u¨t_öô
(
uöt16_t
);

109 
	$quîy_u¨t
(c⁄° * 
c⁄fig_°rög
)

120 
u¨t
 = (
uöt32_t
)0x02000000;

126 
	}
}

128 
	$∑r£_c⁄fig_°rög
()

130 
uöt32_t
 
addr
 = *(uöt32_t*)
CONFIG_STRING_ADDR
;

131 c⁄° * 
s
 = (c⁄° *)(
uöçå_t
)
addr
;

132 
	`quîy_mem
(
s
);

133 
	`quîy_∂ic
(
s
);

134 
	`quîy_πc
(
s
);

135 
	`quîy_h¨ts
(
s
);

136 
	`quîy_u¨t
(
s
);

137 
	}
}

	@machine/configstring.h

1 #i‚de‡
RISCV_CONFIG_STRING_H


2 
	#RISCV_CONFIG_STRING_H


	)

4 
	~<°ddef.h
>

5 
	~<°döt.h
>

7 c⁄° * 
	$skù_whôe•a˚
(c⁄° * 
°r
)

9 *
°r
 && *str <= ' ')

10 
°r
++;

11  
°r
;

12 
	}
}

14 c⁄° * 
	$skù_°rög
(c⁄° * 
°r
)

16 *
°r
 && *str++ != '"')

18  
°r
;

19 
	}
}

21 
	$is_hex
(
ch
)

23  (
ch
 >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F');

24 
	}
}

26 
	$∑r£_hex
(
ch
)

28  (
ch
 >= '0' && ch <= '9') ? ch - '0' :

29 (
ch
 >= 'a' && ch <= 'f') ? ch - 'a' + 10 :

30 
ch
 - 'A' + 10;

31 
	}
}

33 c⁄° * 
	$skù_key
(c⁄° * 
°r
)

35 *
°r
 >= 35 && *str <= 122 && *str != ';')

36 
°r
++;

37  
°r
;

38 
	}
}

41 c⁄° * 
	m°¨t
;

42 c⁄° * 
	míd
;

43 } 
	tquîy_ªsu…
;

45 
quîy_ªsu…
 
	$quîy_c⁄fig_°rög
(c⁄° * 
°r
, c⁄° * 
k
)

47 
size_t
 
ksize
 = 0;

48 
k
[
ksize
] && k[ksize] != '{')

49 
ksize
++;

50 
œ°
 = !
k
[
ksize
];

52 
quîy_ªsu…
 
ªs
 = {0, 0};

54 c⁄° * 
key_°¨t
 = 
°r
 = 
	`skù_whôe•a˚
(str);

55 c⁄° * 
key_íd
 = 
°r
 = 
	`skù_key
(str);

56 
m©ch
 = (
size_t
)(
key_íd
 - 
key_°¨t
Ë=
ksize
;

57 i‡(
m©ch
)

58 
size_t
 
i
 = 0; i < 
ksize
; i++)

59 i‡(
key_°¨t
[
i
] !
k
[i])

60 
m©ch
 = 0;

61 c⁄° * 
vÆue_°¨t
 = 
°r
 = 
	`skù_whôe•a˚
(str);

62 *
°r
 != ';') {

63 i‡(!*
°r
) {

64  
ªs
;

65 } i‡(*
°r
 == '"') {

66 
°r
 = 
	`skù_°rög
(str+1);

67 } i‡(*
°r
 == '{') {

68 c⁄° * 
£¨ch_key
 = 
m©ch
 && !
œ°
 ? 
k
 + 
ksize
 + 1 : "";

69 
quîy_ªsu…
 
ö√r_ªs
 = 
	`quîy_c⁄fig_°rög
(
°r
 + 1, 
£¨ch_key
);

70 i‡(
ö√r_ªs
.
°¨t
)

71  
ö√r_ªs
;

72 
°r
 = 
ö√r_ªs
.
íd
 + 1;

74 
°r
 = 
	`skù_key
(str);

76 
°r
 = 
	`skù_whôe•a˚
(str);

78 
ªs
.
íd
 = 
°r
;

79 i‡(
m©ch
 && 
œ°
) {

80 
ªs
.
°¨t
 = 
vÆue_°¨t
;

81  
ªs
;

83 
°r
 = 
	`skù_whôe•a˚
(str+1);

84 i‡(*
°r
 == '}') {

85 
ªs
.
íd
 = 
°r
;

86  
ªs
;

89 
	}
}

91 
	$∑r£_°rög
(
quîy_ªsu…
 
r
, * 
buf
)

93 i‡(
r
.
°¨t
 <Ñ.
íd
) {

94 i‡(*
r
.
°¨t
 == '"') {

95 c⁄° * 
p
 = 
r
.
°¨t
 + 1;Ö <Ñ.
íd
 && *p != '"';Ö++) {

96 
ch
 = 
p
[0];

97 i‡(
ch
 ='\\' && 
p
[1] ='x' && 
	`is_hex
(p[2])) {

98 
ch
 = 
	`∑r£_hex
(
p
[2]);

99 i‡(
	`is_hex
(
p
[3])) {

100 
ch
 = (ch << 4Ë+ 
	`∑r£_hex
(
p
[3]);

101 
p
++;

103 
p
 += 2;

105 *
buf
++ = 
ch
;

108 c⁄° * 
p
 = 
r
.
°¨t
;Ö <Ñ.
íd
 && *p > ' ';Ö++)

109 *
buf
++ = *
p
;

112 *
buf
 = 0;

113 
	}
}

115 
	#gë_°rög
(
«me
, 
£¨ch_ªs
) \

116 
«me
[(
£¨ch_ªs
).
íd
 - (£¨ch_ªs).
°¨t
 + 1]; \

117 
	`∑r£_°rög
(
£¨ch_ªs
, 
«me
)

	)

119 
uöt64_t
 
	$__gë_uöt_hex
(c⁄° * 
s
)

121 
uöt64_t
 
ªs
 = 0;

122 *
s
) {

123 i‡(
	`is_hex
(*
s
))

124 
ªs
 = (ª†<< 4Ë+ 
	`∑r£_hex
(*
s
);

125 i‡(*
s
 != '_')

127 
s
++;

129  
ªs
;

130 
	}
}

132 
uöt64_t
 
	$__gë_uöt_dec
(c⁄° * 
s
)

134 
uöt64_t
 
ªs
 = 0;

135 *
s
) {

136 i‡(*
s
 >= '0' && *s <= '9')

137 
ªs
 =Ñe†* 10 + (*
s
 - '0');

140 
s
++;

142  
ªs
;

143 
	}
}

145 
uöt64_t
 
	$__gë_uöt
(c⁄° * 
s
)

147 i‡(
s
[0] == '0' && s[1] == 'x')

148  
	`__gë_uöt_hex
(
s
+2);

149  
	`__gë_uöt_dec
(
s
);

150 
	}
}

152 
ölöe
 
uöt64_t
 
	$gë_uöt
(
quîy_ªsu…
 
ªs
)

154 
	`gë_°rög
(
s
, 
ªs
);

155  
	`__gë_uöt
(
s
);

156 
	}
}

158 
ölöe
 
öt64_t
 
	$gë_söt
(
quîy_ªsu…
 
ªs
)

160 
	`gë_°rög
(
s
, 
ªs
);

161 i‡(
s
[0] == '-')

162  -
	`__gë_uöt
(
s
+1);

163  
	`__gë_uöt
(
s
);

164 
	}
}

	@machine/emulation.c

1 
	~"emuœti⁄.h
"

2 
	~"Â_emuœti⁄.h
"

3 
	~"c⁄fig.h
"

4 
	~"u≈rivûeged_mem‹y.h
"

5 
	~"må≠.h
"

6 
	~<limôs.h
>

8 
	$ûÀgÆ_ö¢_å≠
(
uöçå_t
* 
ªgs
, uöçå_à
mˇu£
, uöçå_à
mïc
)

10 
	`asm
 (".pushsection .rodata\n"

13 #i‡!
	`deföed
(
__riscv_Êí
Ë&& deföed(
PK_ENABLE_FP_EMULATION
)

25 #i‡!
	`deföed
(
__riscv_Êí
Ë&& deföed(
PK_ENABLE_FP_EMULATION
)

32 #i‡!
	`deföed
(
__riscv_muldiv
)

38 #i‡!
	`deföed
(
__riscv_muldiv
Ë&& 
__riscv_xÀn
 >= 64

44 #ifde‡
PK_ENABLE_FP_EMULATION


70 
uöçå_t
 
m°©us
;

71 
ö¢_t
 
ö¢
 = 
	`gë_ö¢
(
mïc
, &
m°©us
);

75 i‡(
	`u∆ikñy
((
ö¢
 & 3) != 3))

76  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

78 
	`wrôe_c§
(
mïc
, mepc + 4);

80 
uöt32_t
 
ûÀgÆ_ö¢_å≠_èbÀ
[];

81 
uöt32_t
* 
pf
 = (*)
ûÀgÆ_ö¢_å≠_èbÀ
 + (
ö¢
 & 0x7c);

82 
emuœti⁄_func
 
f
 = (emuœti⁄_func)(
uöçå_t
)*
pf
;

83 
	`f
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

84 
	}
}

86 
	$éb_miss_å≠
(
uöçå_t
* 
ªgs
, uöçå_à
mˇu£
, uöçå_à
mïc
, 
ex
, 
rd
, 
wt
)

88 
uöt32_t
 
ödex
 = 0;

90 
uöt32_t
 
Àvñs
, 
±esize
, 
v≤Àn
;

92 
uöçå_t
 
m°©us
 = 
	`ªad_c§
(mstatus);

93 
uöt32_t
 
vm
 = (
	`EXTRACT_FIELD
(
m°©us
, 
MSTATUS_VM
));

95 #i‡
__riscv_xÀn
 == 32

96 
uöt32_t
 
p
 = 32;

97 
uöçå_t
 
a
 = ((
	`ªad_c§
(
•tbr
)Ë& ((1 << 22Ë- 1)Ë* 
RISCV_PGSIZE
;

99 
uöt32_t
 
p
 = 64;

100 
uöçå_t
 
a
 = ((
	`ªad_c§
(
•tbr
)Ë& ((1Œ << 38Ë- 1)Ë* 
RISCV_PGSIZE
;

103 
vm
)

105 
VM_SV32
: 
Àvñs
 = 2; 
±esize
 = 4; 
v≤Àn
 = 10; ;

106 
VM_SV39
: 
Àvñs
 = 3; 
±esize
 = 8; 
v≤Àn
 = 9; ;

107 
VM_SV48
: 
Àvñs
 = 4; 
±esize
 = 8; 
v≤Àn
 = 9; ;

108 : 
	`dõ
("unsuµ‹àm°©us.vm = %x", 
vm
);

111 
uöçå_t
 
mask
 = 0;

112 
uöçå_t
 
va
 = 
	`ªad_c§
(
mbadaddr
);

114 
	`log
("tlb_miss_trap, mepc = %p, mbadaddr = %p,Éx %d,Ñd %d, wt %d",

115 
mïc
, 
va
, 
ex
, 
rd
, 
wt
);

117 
mxr
 = (
	`EXTRACT_FIELD
(
m°©us
, 
MSTATUS_MXR
));

118 
i
;

119 
i
 = 
Àvñs
 - 1; ; i--)

121 if(!(
i
 >0)Ë
Áû
;

126 
p
 -
v≤Àn
;

127 
mask
 = ~((~maskË>> 
v≤Àn
);

129 
uöçå_t
 
v≤
 = ((
va
 >> 
p
Ë& ((1 << 
v≤Àn
) - 1));

130 
uöçå_t
 *
±e_p
 = (uöçå_à*)(
a
 + 
v≤
 * 
±esize
);

131 
uöçå_t
 
±e
 = *
±e_p
;

133 if(!((
±e
 & 
PTE_V
Ë!0)Ë
Áû
;

134 if(!(((
±e
 & 
PTE_R
Ë=0 && (±ê& 
PTE_W
Ë!0Ë=0)Ë
Áû
;

136 i‡((
±e
 & (
PTE_X
 | 
PTE_W
 | 
PTE_R
)) == 0)

138 
a
 = (
±e
 >> 10Ë<< 
RISCV_PGSHIFT
;

142 if(
ex
 =1Ë{ if(!(
±e
 & 
PTE_X
)Ë
Áû
; }

144 if(
rd
 =1Ë{ if(!(
±e
 & (
PTE_R
 | 
PTE_X
))Ë
Áû
; }

145 if(
wt
 =1Ë{ if(!(
±e
 & 
PTE_W
)Ë
Áû
; }

147 
±e
 |
PTE_A
;

148 if(
wt
Ë
±e
 |
PTE_D
;

149 *
±e_p
 = 
±e
;

152 if(((
uöçå_t
)
	`ªad_c§
(0x7c0)Ë>> (
__riscv_xÀn
 - 1))

157 
uöçå_t
 
ödex_ﬁd
 = 
	`ªad_c§
(0x7c0);

158 
uöçå_t
 
va_ﬁd
 = 
	`ªad_c§
(0x7c1);

159 
uöçå_t
 
mask_ﬁd
 = 
	`ªad_c§
(0x7c2);

160 
uöçå_t
 
±e_ﬁd
 = 
	`ªad_c§
(0x7c3);

161 
uöçå_t
 *
±e_p_ﬁd
 = (uöçå_à*)
	`ªad_c§
(0x7c4);

163 
	`as£π
(
ödex_ﬁd
 >> (
__riscv_xÀn
 - 1));

164 
	`as£π
((
va
 & 
mask
Ë=(
va_ﬁd
 & 
mask_ﬁd
));

165 
	`as£π
(
mask
 =
mask_ﬁd
);

166 
	`as£π
((
±e
 | 
PTE_D
Ë=(
±e_ﬁd
 | 
PTE_A
 | PTE_D));

167 
	`as£π
(
±e_p
 =
±e_p_ﬁd
);

169 *
±e_p
 = 
±e
;

170 
	`wrôe_c§
(0x7c3, 
±e
);

172 
	`wrôe_c§
(0x7c0, 
ödex_ﬁd
);

173 
	`as£π
(
	`ªad_c§
(0x7c0Ë=(
ödex_ﬁd
 << 1) >> 1);

177 
	`wrôe_c§
(0x7c0, 
ödex
);

178 
	`wrôe_c§
(0x7c1, 
va
 & 
mask
);

179 
	`wrôe_c§
(0x7c2, 
mask
);

180 
	`wrôe_c§
(0x7c3, 
±e
);

181 
	`wrôe_c§
(0x7c4, 
±e_p
);

183 
ödex
 += 1;

188 
Áû
:

189 
	`log
("shouldÇot be failed!\n");

190 
	`wrôe_c§
(
sbadaddr
, 
	`ªad_c§
(
mbadaddr
));

191 
	`ªdúe˘_å≠
(
mïc
, 
m°©us
);

192 
	`__buûtö_uƒóchabÀ
();

193 
	}
}

195 
	$éb_i_miss_å≠
(
uöçå_t
* 
ªgs
, uöçå_à
mˇu£
, uöçå_à
mïc
)

197 
	`éb_miss_å≠
(
ªgs
, 
mˇu£
, 
mïc
, 1, 0, 0);

198 
	}
}

199 
	$éb_r_miss_å≠
(
uöçå_t
* 
ªgs
, uöçå_à
mˇu£
, uöçå_à
mïc
)

201 
	`éb_miss_å≠
(
ªgs
, 
mˇu£
, 
mïc
, 0, 1, 0);

202 
	}
}

203 
	$éb_w_miss_å≠
(
uöçå_t
* 
ªgs
, uöçå_à
mˇu£
, uöçå_à
mïc
)

205 
	`éb_miss_å≠
(
ªgs
, 
mˇu£
, 
mïc
, 0, 0, 1);

206 
	}
}

208 
	$éb_Êush
()

212 
i
;

213 
i
 = 0; ; i++)

215 
	`wrôe_c§
(0x7c0, 
i
);

216 if(
	`ªad_c§
(0x7c0Ë!
i
) ;

218 
	`wrôe_c§
(0x7c3, 0x0);

220 
	}
}

222 
__©åibuã__
((
noölöe
)Ë
	$åuly_ûÀgÆ_ö¢
(
uöçå_t
* 
ªgs
, uöçå_à
mˇu£
, uöçå_à
mïc
, uöçå_à
m°©us
, 
ö¢_t
 
ö¢
)

224 
	`ªdúe˘_å≠
(
mïc
, 
m°©us
);

225 
	}
}

227 
ölöe
 
	$emuœã_ªad_c§
(
num
, 
uöçå_t
 
m°©us
, uöçå_t* 
ªsu…
)

229 
uöçå_t
 
cou¡îí
 =

230 
	`EXTRACT_FIELD
(
m°©us
, 
MSTATUS_MPP
Ë=
PRV_U
 ? 
	`ªad_c§
(
mucou¡îí
) :

231 
	`ªad_c§
(
mscou¡îí
);

235 
num
)

237 
CSR_TIME
:

238 i‡(!((
cou¡îí
 >> (
CSR_TIME
 - 
CSR_CYCLE
)) & 1))

240 *
ªsu…
 = *
mtime
;

242 #i‡
__riscv_xÀn
 == 32

243 
CSR_TIMEH
:

244 i‡(!((
cou¡îí
 >> (
CSR_TIME
 - 
CSR_CYCLE
)) & 1))

246 *
ªsu…
 = *
mtime
 >> 32;

249 #i‡!
	`deföed
(
__riscv_Êí
Ë&& deföed(
PK_ENABLE_FP_EMULATION
)

250 
CSR_FRM
:

251 i‡((
m°©us
 & 
MSTATUS_FS
) == 0) ;

252 *
ªsu…
 = 
	`GET_FRM
();

254 
CSR_FFLAGS
:

255 i‡((
m°©us
 & 
MSTATUS_FS
) == 0) ;

256 *
ªsu…
 = 
	`GET_FFLAGS
();

258 
CSR_FCSR
:

259 i‡((
m°©us
 & 
MSTATUS_FS
) == 0) ;

260 *
ªsu…
 = 
	`GET_FCSR
();

265 
	}
}

267 
ölöe
 
	$emuœã_wrôe_c§
(
num
, 
uöçå_t
 
vÆue
, uöçå_à
m°©us
)

269 
num
)

271 #i‡!
	`deföed
(
__riscv_Êí
Ë&& deföed(
PK_ENABLE_FP_EMULATION
)

272 
CSR_FRM
: 
	`SET_FRM
(
vÆue
);  0;

273 
CSR_FFLAGS
: 
	`SET_FFLAGS
(
vÆue
);  0;

274 
CSR_FCSR
: 
	`SET_FCSR
(
vÆue
);  0;

278 
	}
}

280 
	$DECLARE_EMULATION_FUNC
(
emuœã_sy°em_›code
)

282 
rs1_num
 = (
ö¢
 >> 15) & 0x1f;

283 
uöçå_t
 
rs1_vÆ
 = 
	`GET_RS1
(
ö¢
, 
ªgs
);

284 
c§_num
 = (
uöt32_t
)
ö¢
 >> 20;

285 
uöçå_t
 
c§_vÆ
, 
√w_c§_vÆ
;

287 if((
ö¢
 & 0xFFF07FFF) == 0x10400073)

289 
	`éb_Êush
();

293 i‡(
	`emuœã_ªad_c§
(
c§_num
, 
m°©us
, &
c§_vÆ
))

294  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

296 
do_wrôe
 = 
rs1_num
;

297 
	`GET_RM
(
ö¢
))

299 0:  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

300 1: 
√w_c§_vÆ
 = 
rs1_vÆ
; 
do_wrôe
 = 1; ;

301 2: 
√w_c§_vÆ
 = 
c§_vÆ
 | 
rs1_vÆ
; ;

302 3: 
√w_c§_vÆ
 = 
c§_vÆ
 & ~
rs1_vÆ
; ;

303 4:  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

304 5: 
√w_c§_vÆ
 = 
rs1_num
; 
do_wrôe
 = 1; ;

305 6: 
√w_c§_vÆ
 = 
c§_vÆ
 | 
rs1_num
; ;

306 7: 
√w_c§_vÆ
 = 
c§_vÆ
 & ~
rs1_num
; ;

309 i‡(
do_wrôe
 && 
	`emuœã_wrôe_c§
(
c§_num
, 
√w_c§_vÆ
, 
m°©us
))

310  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

312 
	`SET_RD
(
ö¢
, 
ªgs
, 
c§_vÆ
);

313 
	}
}

	@machine/emulation.h

1 #i‚de‡
_RISCV_EMULATION_H


2 
	#_RISCV_EMULATION_H


	)

4 
	~"ícodög.h
"

5 
	~"bôs.h
"

6 
	~<°döt.h
>

8 
uöt32_t
 
	tö¢_t
;

9 (*
	temuœti⁄_func
)(
	tuöçå_t
*, uöçå_t, uöçå_t, uöçå_t, 
	tö¢_t
);

10 
	#DECLARE_EMULATION_FUNC
(
«me
Ë
	`«me
(
uöçå_t
* 
ªgs
, uöçå_à
mˇu£
, uöçå_à
mïc
, uöçå_à
m°©us
, 
ö¢_t
 
ö¢
)

	)

12 
	`mißlig√d_lﬂd_å≠
(
uöçå_t
* 
ªgs
, uöçå_à
mˇu£
, uöçå_à
mïc
);

13 
	`mißlig√d_°‹e_å≠
(
uöçå_t
* 
ªgs
, uöçå_à
mˇu£
, uöçå_à
mïc
);

14 
	$ªdúe˘_å≠
(
uöçå_t
 
ïc
, uöçå_à
m°©us
Ë
	`__©åibuã__
((
n‹ëu∫
));

15 
	$DECLARE_EMULATION_FUNC
(
åuly_ûÀgÆ_ö¢
Ë
	`__©åibuã__
((
n‹ëu∫
));

17 
	#GET_REG
(
ö¢
, 
pos
, 
ªgs
) ({ \

18 
mask
 = (1 << (5+
LOG_REGBYTES
)) - (1 << LOG_REGBYTES); \

19 (
uöçå_t
*)((uöçå_t)
ªgs
 + (((
ö¢
Ë>> ((
pos
Ë- 
LOG_REGBYTES
)Ë& 
mask
)); \

20 
	}
})

	)

21 
	#GET_RS1
(
ö¢
, 
ªgs
Ë(*
	`GET_REG
(ö¢, 15,Ñegs))

	)

22 
	#GET_RS2
(
ö¢
, 
ªgs
Ë(*
	`GET_REG
(ö¢, 20,Ñegs))

	)

23 
	#SET_RD
(
ö¢
, 
ªgs
, 
vÆ
Ë(*
	`GET_REG
(ö¢, 7,ÑegsË(vÆ))

	)

24 
	#IMM_I
(
ö¢
Ë((
öt32_t
)(ö¢Ë>> 20)

	)

25 
	#IMM_S
(
ö¢
Ë(((
öt32_t
)(ö¢Ë>> 25 << 5Ë| (öt32_t)(((ö¢Ë>> 7Ë& 0x1f))

	)

26 
	#MASK_FUNCT3
 0x7000

	)

	@machine/encoding.h

3 #i‚de‡
RISCV_CSR_ENCODING_H


4 
	#RISCV_CSR_ENCODING_H


	)

6 
	#MSTATUS_UIE
 0x00000001

	)

7 
	#MSTATUS_SIE
 0x00000002

	)

8 
	#MSTATUS_HIE
 0x00000004

	)

9 
	#MSTATUS_MIE
 0x00000008

	)

10 
	#MSTATUS_UPIE
 0x00000010

	)

11 
	#MSTATUS_SPIE
 0x00000020

	)

12 
	#MSTATUS_HPIE
 0x00000040

	)

13 
	#MSTATUS_MPIE
 0x00000080

	)

14 
	#MSTATUS_SPP
 0x00000100

	)

15 
	#MSTATUS_HPP
 0x00000600

	)

16 
	#MSTATUS_MPP
 0x00001800

	)

17 
	#MSTATUS_FS
 0x00006000

	)

18 
	#MSTATUS_XS
 0x00018000

	)

19 
	#MSTATUS_MPRV
 0x00020000

	)

20 
	#MSTATUS_PUM
 0x00040000

	)

21 
	#MSTATUS_MXR
 0x00080000

	)

22 
	#MSTATUS_VM
 0x1F000000

	)

23 
	#MSTATUS32_SD
 0x80000000

	)

24 
	#MSTATUS64_SD
 0x8000000000000000

	)

26 
	#SSTATUS_UIE
 0x00000001

	)

27 
	#SSTATUS_SIE
 0x00000002

	)

28 
	#SSTATUS_UPIE
 0x00000010

	)

29 
	#SSTATUS_SPIE
 0x00000020

	)

30 
	#SSTATUS_SPP
 0x00000100

	)

31 
	#SSTATUS_FS
 0x00006000

	)

32 
	#SSTATUS_XS
 0x00018000

	)

33 
	#SSTATUS_PUM
 0x00040000

	)

34 
	#SSTATUS32_SD
 0x80000000

	)

35 
	#SSTATUS64_SD
 0x8000000000000000

	)

37 
	#DCSR_XDEBUGVER
 (3U<<30)

	)

38 
	#DCSR_NDRESET
 (1<<29)

	)

39 
	#DCSR_FULLRESET
 (1<<28)

	)

40 
	#DCSR_EBREAKM
 (1<<15)

	)

41 
	#DCSR_EBREAKH
 (1<<14)

	)

42 
	#DCSR_EBREAKS
 (1<<13)

	)

43 
	#DCSR_EBREAKU
 (1<<12)

	)

44 
	#DCSR_STOPCYCLE
 (1<<10)

	)

45 
	#DCSR_STOPTIME
 (1<<9)

	)

46 
	#DCSR_CAUSE
 (7<<6)

	)

47 
	#DCSR_DEBUGINT
 (1<<5)

	)

48 
	#DCSR_HALT
 (1<<3)

	)

49 
	#DCSR_STEP
 (1<<2)

	)

50 
	#DCSR_PRV
 (3<<0)

	)

52 
	#DCSR_CAUSE_NONE
 0

	)

53 
	#DCSR_CAUSE_SWBP
 1

	)

54 
	#DCSR_CAUSE_HWBP
 2

	)

55 
	#DCSR_CAUSE_DEBUGINT
 3

	)

56 
	#DCSR_CAUSE_STEP
 4

	)

57 
	#DCSR_CAUSE_HALT
 5

	)

59 
	#MCONTROL_TYPE
(
xÀn
Ë(0xfULL<<((xÀn)-4))

	)

60 
	#MCONTROL_DMODE
(
xÀn
Ë(1ULL<<((xÀn)-5))

	)

61 
	#MCONTROL_MASKMAX
(
xÀn
Ë(0x3fULL<<((xÀn)-11))

	)

63 
	#MCONTROL_SELECT
 (1<<19)

	)

64 
	#MCONTROL_TIMING
 (1<<18)

	)

65 
	#MCONTROL_ACTION
 (0x3f<<12)

	)

66 
	#MCONTROL_CHAIN
 (1<<11)

	)

67 
	#MCONTROL_MATCH
 (0xf<<7)

	)

68 
	#MCONTROL_M
 (1<<6)

	)

69 
	#MCONTROL_H
 (1<<5)

	)

70 
	#MCONTROL_S
 (1<<4)

	)

71 
	#MCONTROL_U
 (1<<3)

	)

72 
	#MCONTROL_EXECUTE
 (1<<2)

	)

73 
	#MCONTROL_STORE
 (1<<1)

	)

74 
	#MCONTROL_LOAD
 (1<<0)

	)

76 
	#MCONTROL_TYPE_NONE
 0

	)

77 
	#MCONTROL_TYPE_MATCH
 2

	)

79 
	#MCONTROL_ACTION_DEBUG_EXCEPTION
 0

	)

80 
	#MCONTROL_ACTION_DEBUG_MODE
 1

	)

81 
	#MCONTROL_ACTION_TRACE_START
 2

	)

82 
	#MCONTROL_ACTION_TRACE_STOP
 3

	)

83 
	#MCONTROL_ACTION_TRACE_EMIT
 4

	)

85 
	#MCONTROL_MATCH_EQUAL
 0

	)

86 
	#MCONTROL_MATCH_NAPOT
 1

	)

87 
	#MCONTROL_MATCH_GE
 2

	)

88 
	#MCONTROL_MATCH_LT
 3

	)

89 
	#MCONTROL_MATCH_MASK_LOW
 4

	)

90 
	#MCONTROL_MATCH_MASK_HIGH
 5

	)

92 
	#MIP_SSIP
 (1 << 
IRQ_S_SOFT
)

	)

93 
	#MIP_HSIP
 (1 << 
IRQ_H_SOFT
)

	)

94 
	#MIP_MSIP
 (1 << 
IRQ_M_SOFT
)

	)

95 
	#MIP_STIP
 (1 << 
IRQ_S_TIMER
)

	)

96 
	#MIP_HTIP
 (1 << 
IRQ_H_TIMER
)

	)

97 
	#MIP_MTIP
 (1 << 
IRQ_M_TIMER
)

	)

98 
	#MIP_SEIP
 (1 << 
IRQ_S_EXT
)

	)

99 
	#MIP_HEIP
 (1 << 
IRQ_H_EXT
)

	)

100 
	#MIP_MEIP
 (1 << 
IRQ_M_EXT
)

	)

102 
	#SIP_SSIP
 
MIP_SSIP


	)

103 
	#SIP_STIP
 
MIP_STIP


	)

105 
	#PRV_U
 0

	)

106 
	#PRV_S
 1

	)

107 
	#PRV_H
 2

	)

108 
	#PRV_M
 3

	)

110 
	#VM_MBARE
 0

	)

111 
	#VM_MBB
 1

	)

112 
	#VM_MBBID
 2

	)

113 
	#VM_SV32
 8

	)

114 
	#VM_SV39
 9

	)

115 
	#VM_SV48
 10

	)

117 
	#IRQ_S_SOFT
 1

	)

118 
	#IRQ_H_SOFT
 2

	)

119 
	#IRQ_M_SOFT
 3

	)

120 
	#IRQ_S_TIMER
 5

	)

121 
	#IRQ_H_TIMER
 6

	)

122 
	#IRQ_M_TIMER
 7

	)

123 
	#IRQ_S_EXT
 9

	)

124 
	#IRQ_H_EXT
 10

	)

125 
	#IRQ_M_EXT
 11

	)

126 
	#IRQ_COP
 12

	)

127 
	#IRQ_HOST
 13

	)

129 
	#DEFAULT_RSTVEC
 0x00001000

	)

130 
	#DEFAULT_NMIVEC
 0x00001004

	)

131 
	#DEFAULT_MTVEC
 0x00001010

	)

132 
	#CONFIG_STRING_ADDR
 0x0000100C

	)

133 
	#EXT_IO_BASE
 0x40000000

	)

134 
	#DRAM_BASE
 0x80000000

	)

137 
	#PTE_V
 0x001

138 
	#PTE_R
 0x002

139 
	#PTE_W
 0x004

140 
	#PTE_X
 0x008

141 
	#PTE_U
 0x010

142 
	#PTE_G
 0x020

143 
	#PTE_A
 0x040

144 
	#PTE_D
 0x080

145 
	#PTE_SOFT
 0x300

146 

	)

147 
	#PTE_PPN_SHIFT
 10

	)

149 
	#PTE_TABLE
(
PTE
Ë(((PTEË& (
PTE_V
 | 
PTE_R
 | 
PTE_W
 | 
PTE_X
)Ë=PTE_V)

	)

151 #ifde‡
__riscv


153 #i‡
__riscv_xÀn
 == 64

154 
	#MSTATUS_SD
 
MSTATUS64_SD


	)

155 
	#SSTATUS_SD
 
SSTATUS64_SD


	)

156 
	#RISCV_PGLEVEL_BITS
 9

	)

158 
	#MSTATUS_SD
 
MSTATUS32_SD


	)

159 
	#SSTATUS_SD
 
SSTATUS32_SD


	)

160 
	#RISCV_PGLEVEL_BITS
 10

	)

162 
	#RISCV_PGSHIFT
 12

	)

163 
	#RISCV_PGSIZE
 (1 << 
RISCV_PGSHIFT
)

	)

165 #i‚de‡
__ASSEMBLER__


167 #ifde‡
__GNUC__


169 
	#ªad_c§
(
ªg
Ë({ 
__tmp
; \

170 
asm
 vﬁ©ûê("c§∏%0, " #ªg : "Ù"(
__tmp
)); \

171 
__tmp
; })

	)

173 
	#wrôe_c§
(
ªg
, 
vÆ
) ({ \

174 i‡(
	`__buûtö_c⁄°™t_p
(
vÆ
) && ()(val) < 32) \

175 
asm
 vﬁ©ûê("c§w " #ªg ", %0" :: "i"(
vÆ
)); \

177 
asm
 vﬁ©ûê("c§w " #ªg ", %0" :: "r"(
vÆ
)); })

	)

179 
	#sw≠_c§
(
ªg
, 
vÆ
Ë({ 
__tmp
; \

180 i‡(
	`__buûtö_c⁄°™t_p
(
vÆ
) && ()(val) < 32) \

181 
asm
 vﬁ©ûê("c§rw %0, " #ªg ", %1" : "Ù"(
__tmp
Ë: "i"(
vÆ
)); \

183 
asm
 vﬁ©ûê("c§rw %0, " #ªg ", %1" : "Ù"(
__tmp
Ë: "r"(
vÆ
)); \

184 
__tmp
; })

	)

186 
	#£t_c§
(
ªg
, 
bô
Ë({ 
__tmp
; \

187 i‡(
	`__buûtö_c⁄°™t_p
(
bô
) && ()(bit) < 32) \

188 
asm
 vﬁ©ûê("c§r†%0, " #ªg ", %1" : "Ù"(
__tmp
Ë: "i"(
bô
)); \

190 
asm
 vﬁ©ûê("c§r†%0, " #ªg ", %1" : "Ù"(
__tmp
Ë: "r"(
bô
)); \

191 
__tmp
; })

	)

193 
	#˛ór_c§
(
ªg
, 
bô
Ë({ 
__tmp
; \

194 i‡(
	`__buûtö_c⁄°™t_p
(
bô
) && ()(bit) < 32) \

195 
asm
 vﬁ©ûê("c§r¯%0, " #ªg ", %1" : "Ù"(
__tmp
Ë: "i"(
bô
)); \

197 
asm
 vﬁ©ûê("c§r¯%0, " #ªg ", %1" : "Ù"(
__tmp
Ë: "r"(
bô
)); \

198 
__tmp
; })

	)

200 
	#rdtime
(Ë
	`ªad_c§
(
time
)

	)

201 
	#rdcy˛e
(Ë
	`ªad_c§
(
cy˛e
)

	)

202 
	#rdö°ªt
(Ë
	`ªad_c§
(
ö°ªt
)

	)

212 #i‚de‡
RISCV_ENCODING_H


213 
	#RISCV_ENCODING_H


	)

214 
	#MATCH_BEQ
 0x63

	)

215 
	#MASK_BEQ
 0x707f

	)

216 
	#MATCH_BNE
 0x1063

	)

217 
	#MASK_BNE
 0x707f

	)

218 
	#MATCH_BLT
 0x4063

	)

219 
	#MASK_BLT
 0x707f

	)

220 
	#MATCH_BGE
 0x5063

	)

221 
	#MASK_BGE
 0x707f

	)

222 
	#MATCH_BLTU
 0x6063

	)

223 
	#MASK_BLTU
 0x707f

	)

224 
	#MATCH_BGEU
 0x7063

	)

225 
	#MASK_BGEU
 0x707f

	)

226 
	#MATCH_JALR
 0x67

	)

227 
	#MASK_JALR
 0x707f

	)

228 
	#MATCH_JAL
 0x6f

	)

229 
	#MASK_JAL
 0x7f

	)

230 
	#MATCH_LUI
 0x37

	)

231 
	#MASK_LUI
 0x7f

	)

232 
	#MATCH_AUIPC
 0x17

	)

233 
	#MASK_AUIPC
 0x7f

	)

234 
	#MATCH_ADDI
 0x13

	)

235 
	#MASK_ADDI
 0x707f

	)

236 
	#MATCH_SLLI
 0x1013

	)

237 
	#MASK_SLLI
 0xfc00707f

	)

238 
	#MATCH_SLTI
 0x2013

	)

239 
	#MASK_SLTI
 0x707f

	)

240 
	#MATCH_SLTIU
 0x3013

	)

241 
	#MASK_SLTIU
 0x707f

	)

242 
	#MATCH_XORI
 0x4013

	)

243 
	#MASK_XORI
 0x707f

	)

244 
	#MATCH_SRLI
 0x5013

	)

245 
	#MASK_SRLI
 0xfc00707f

	)

246 
	#MATCH_SRAI
 0x40005013

	)

247 
	#MASK_SRAI
 0xfc00707f

	)

248 
	#MATCH_ORI
 0x6013

	)

249 
	#MASK_ORI
 0x707f

	)

250 
	#MATCH_ANDI
 0x7013

	)

251 
	#MASK_ANDI
 0x707f

	)

252 
	#MATCH_ADD
 0x33

	)

253 
	#MASK_ADD
 0x„00707f

	)

254 
	#MATCH_SUB
 0x40000033

	)

255 
	#MASK_SUB
 0x„00707f

	)

256 
	#MATCH_SLL
 0x1033

	)

257 
	#MASK_SLL
 0x„00707f

	)

258 
	#MATCH_SLT
 0x2033

	)

259 
	#MASK_SLT
 0x„00707f

	)

260 
	#MATCH_SLTU
 0x3033

	)

261 
	#MASK_SLTU
 0x„00707f

	)

262 
	#MATCH_XOR
 0x4033

	)

263 
	#MASK_XOR
 0x„00707f

	)

264 
	#MATCH_SRL
 0x5033

	)

265 
	#MASK_SRL
 0x„00707f

	)

266 
	#MATCH_SRA
 0x40005033

	)

267 
	#MASK_SRA
 0x„00707f

	)

268 
	#MATCH_OR
 0x6033

	)

269 
	#MASK_OR
 0x„00707f

	)

270 
	#MATCH_AND
 0x7033

	)

271 
	#MASK_AND
 0x„00707f

	)

272 
	#MATCH_ADDIW
 0x1b

	)

273 
	#MASK_ADDIW
 0x707f

	)

274 
	#MATCH_SLLIW
 0x101b

	)

275 
	#MASK_SLLIW
 0x„00707f

	)

276 
	#MATCH_SRLIW
 0x501b

	)

277 
	#MASK_SRLIW
 0x„00707f

	)

278 
	#MATCH_SRAIW
 0x4000501b

	)

279 
	#MASK_SRAIW
 0x„00707f

	)

280 
	#MATCH_ADDW
 0x3b

	)

281 
	#MASK_ADDW
 0x„00707f

	)

282 
	#MATCH_SUBW
 0x4000003b

	)

283 
	#MASK_SUBW
 0x„00707f

	)

284 
	#MATCH_SLLW
 0x103b

	)

285 
	#MASK_SLLW
 0x„00707f

	)

286 
	#MATCH_SRLW
 0x503b

	)

287 
	#MASK_SRLW
 0x„00707f

	)

288 
	#MATCH_SRAW
 0x4000503b

	)

289 
	#MASK_SRAW
 0x„00707f

	)

290 
	#MATCH_LB
 0x3

	)

291 
	#MASK_LB
 0x707f

	)

292 
	#MATCH_LH
 0x1003

	)

293 
	#MASK_LH
 0x707f

	)

294 
	#MATCH_LW
 0x2003

	)

295 
	#MASK_LW
 0x707f

	)

296 
	#MATCH_LD
 0x3003

	)

297 
	#MASK_LD
 0x707f

	)

298 
	#MATCH_LBU
 0x4003

	)

299 
	#MASK_LBU
 0x707f

	)

300 
	#MATCH_LHU
 0x5003

	)

301 
	#MASK_LHU
 0x707f

	)

302 
	#MATCH_LWU
 0x6003

	)

303 
	#MASK_LWU
 0x707f

	)

304 
	#MATCH_SB
 0x23

	)

305 
	#MASK_SB
 0x707f

	)

306 
	#MATCH_SH
 0x1023

	)

307 
	#MASK_SH
 0x707f

	)

308 
	#MATCH_SW
 0x2023

	)

309 
	#MASK_SW
 0x707f

	)

310 
	#MATCH_SD
 0x3023

	)

311 
	#MASK_SD
 0x707f

	)

312 
	#MATCH_FENCE
 0xf

	)

313 
	#MASK_FENCE
 0x707f

	)

314 
	#MATCH_FENCE_I
 0x100f

	)

315 
	#MASK_FENCE_I
 0x707f

	)

316 
	#MATCH_MUL
 0x2000033

	)

317 
	#MASK_MUL
 0x„00707f

	)

318 
	#MATCH_MULH
 0x2001033

	)

319 
	#MASK_MULH
 0x„00707f

	)

320 
	#MATCH_MULHSU
 0x2002033

	)

321 
	#MASK_MULHSU
 0x„00707f

	)

322 
	#MATCH_MULHU
 0x2003033

	)

323 
	#MASK_MULHU
 0x„00707f

	)

324 
	#MATCH_DIV
 0x2004033

	)

325 
	#MASK_DIV
 0x„00707f

	)

326 
	#MATCH_DIVU
 0x2005033

	)

327 
	#MASK_DIVU
 0x„00707f

	)

328 
	#MATCH_REM
 0x2006033

	)

329 
	#MASK_REM
 0x„00707f

	)

330 
	#MATCH_REMU
 0x2007033

	)

331 
	#MASK_REMU
 0x„00707f

	)

332 
	#MATCH_MULW
 0x200003b

	)

333 
	#MASK_MULW
 0x„00707f

	)

334 
	#MATCH_DIVW
 0x200403b

	)

335 
	#MASK_DIVW
 0x„00707f

	)

336 
	#MATCH_DIVUW
 0x200503b

	)

337 
	#MASK_DIVUW
 0x„00707f

	)

338 
	#MATCH_REMW
 0x200603b

	)

339 
	#MASK_REMW
 0x„00707f

	)

340 
	#MATCH_REMUW
 0x200703b

	)

341 
	#MASK_REMUW
 0x„00707f

	)

342 
	#MATCH_AMOADD_W
 0x202f

	)

343 
	#MASK_AMOADD_W
 0xf800707f

	)

344 
	#MATCH_AMOXOR_W
 0x2000202f

	)

345 
	#MASK_AMOXOR_W
 0xf800707f

	)

346 
	#MATCH_AMOOR_W
 0x4000202f

	)

347 
	#MASK_AMOOR_W
 0xf800707f

	)

348 
	#MATCH_AMOAND_W
 0x6000202f

	)

349 
	#MASK_AMOAND_W
 0xf800707f

	)

350 
	#MATCH_AMOMIN_W
 0x8000202f

	)

351 
	#MASK_AMOMIN_W
 0xf800707f

	)

352 
	#MATCH_AMOMAX_W
 0xa000202f

	)

353 
	#MASK_AMOMAX_W
 0xf800707f

	)

354 
	#MATCH_AMOMINU_W
 0xc000202f

	)

355 
	#MASK_AMOMINU_W
 0xf800707f

	)

356 
	#MATCH_AMOMAXU_W
 0xe000202f

	)

357 
	#MASK_AMOMAXU_W
 0xf800707f

	)

358 
	#MATCH_AMOSWAP_W
 0x800202f

	)

359 
	#MASK_AMOSWAP_W
 0xf800707f

	)

360 
	#MATCH_LR_W
 0x1000202f

	)

361 
	#MASK_LR_W
 0xf9f0707f

	)

362 
	#MATCH_SC_W
 0x1800202f

	)

363 
	#MASK_SC_W
 0xf800707f

	)

364 
	#MATCH_AMOADD_D
 0x302f

	)

365 
	#MASK_AMOADD_D
 0xf800707f

	)

366 
	#MATCH_AMOXOR_D
 0x2000302f

	)

367 
	#MASK_AMOXOR_D
 0xf800707f

	)

368 
	#MATCH_AMOOR_D
 0x4000302f

	)

369 
	#MASK_AMOOR_D
 0xf800707f

	)

370 
	#MATCH_AMOAND_D
 0x6000302f

	)

371 
	#MASK_AMOAND_D
 0xf800707f

	)

372 
	#MATCH_AMOMIN_D
 0x8000302f

	)

373 
	#MASK_AMOMIN_D
 0xf800707f

	)

374 
	#MATCH_AMOMAX_D
 0xa000302f

	)

375 
	#MASK_AMOMAX_D
 0xf800707f

	)

376 
	#MATCH_AMOMINU_D
 0xc000302f

	)

377 
	#MASK_AMOMINU_D
 0xf800707f

	)

378 
	#MATCH_AMOMAXU_D
 0xe000302f

	)

379 
	#MASK_AMOMAXU_D
 0xf800707f

	)

380 
	#MATCH_AMOSWAP_D
 0x800302f

	)

381 
	#MASK_AMOSWAP_D
 0xf800707f

	)

382 
	#MATCH_LR_D
 0x1000302f

	)

383 
	#MASK_LR_D
 0xf9f0707f

	)

384 
	#MATCH_SC_D
 0x1800302f

	)

385 
	#MASK_SC_D
 0xf800707f

	)

386 
	#MATCH_ECALL
 0x73

	)

387 
	#MASK_ECALL
 0xffffffff

	)

388 
	#MATCH_EBREAK
 0x100073

	)

389 
	#MASK_EBREAK
 0xffffffff

	)

390 
	#MATCH_URET
 0x200073

	)

391 
	#MASK_URET
 0xffffffff

	)

392 
	#MATCH_SRET
 0x10200073

	)

393 
	#MASK_SRET
 0xffffffff

	)

394 
	#MATCH_HRET
 0x20200073

	)

395 
	#MASK_HRET
 0xffffffff

	)

396 
	#MATCH_MRET
 0x30200073

	)

397 
	#MASK_MRET
 0xffffffff

	)

398 
	#MATCH_DRET
 0x7b200073

	)

399 
	#MASK_DRET
 0xffffffff

	)

400 
	#MATCH_SFENCE_VM
 0x10400073

	)

401 
	#MASK_SFENCE_VM
 0xfff07fff

	)

402 
	#MATCH_WFI
 0x10500073

	)

403 
	#MASK_WFI
 0xffffffff

	)

404 
	#MATCH_CSRRW
 0x1073

	)

405 
	#MASK_CSRRW
 0x707f

	)

406 
	#MATCH_CSRRS
 0x2073

	)

407 
	#MASK_CSRRS
 0x707f

	)

408 
	#MATCH_CSRRC
 0x3073

	)

409 
	#MASK_CSRRC
 0x707f

	)

410 
	#MATCH_CSRRWI
 0x5073

	)

411 
	#MASK_CSRRWI
 0x707f

	)

412 
	#MATCH_CSRRSI
 0x6073

	)

413 
	#MASK_CSRRSI
 0x707f

	)

414 
	#MATCH_CSRRCI
 0x7073

	)

415 
	#MASK_CSRRCI
 0x707f

	)

416 
	#MATCH_FADD_S
 0x53

	)

417 
	#MASK_FADD_S
 0x„00007f

	)

418 
	#MATCH_FSUB_S
 0x8000053

	)

419 
	#MASK_FSUB_S
 0x„00007f

	)

420 
	#MATCH_FMUL_S
 0x10000053

	)

421 
	#MASK_FMUL_S
 0x„00007f

	)

422 
	#MATCH_FDIV_S
 0x18000053

	)

423 
	#MASK_FDIV_S
 0x„00007f

	)

424 
	#MATCH_FSGNJ_S
 0x20000053

	)

425 
	#MASK_FSGNJ_S
 0x„00707f

	)

426 
	#MATCH_FSGNJN_S
 0x20001053

	)

427 
	#MASK_FSGNJN_S
 0x„00707f

	)

428 
	#MATCH_FSGNJX_S
 0x20002053

	)

429 
	#MASK_FSGNJX_S
 0x„00707f

	)

430 
	#MATCH_FMIN_S
 0x28000053

	)

431 
	#MASK_FMIN_S
 0x„00707f

	)

432 
	#MATCH_FMAX_S
 0x28001053

	)

433 
	#MASK_FMAX_S
 0x„00707f

	)

434 
	#MATCH_FSQRT_S
 0x58000053

	)

435 
	#MASK_FSQRT_S
 0xfff0007f

	)

436 
	#MATCH_FADD_D
 0x2000053

	)

437 
	#MASK_FADD_D
 0x„00007f

	)

438 
	#MATCH_FSUB_D
 0xa000053

	)

439 
	#MASK_FSUB_D
 0x„00007f

	)

440 
	#MATCH_FMUL_D
 0x12000053

	)

441 
	#MASK_FMUL_D
 0x„00007f

	)

442 
	#MATCH_FDIV_D
 0x1a000053

	)

443 
	#MASK_FDIV_D
 0x„00007f

	)

444 
	#MATCH_FSGNJ_D
 0x22000053

	)

445 
	#MASK_FSGNJ_D
 0x„00707f

	)

446 
	#MATCH_FSGNJN_D
 0x22001053

	)

447 
	#MASK_FSGNJN_D
 0x„00707f

	)

448 
	#MATCH_FSGNJX_D
 0x22002053

	)

449 
	#MASK_FSGNJX_D
 0x„00707f

	)

450 
	#MATCH_FMIN_D
 0x2a000053

	)

451 
	#MASK_FMIN_D
 0x„00707f

	)

452 
	#MATCH_FMAX_D
 0x2a001053

	)

453 
	#MASK_FMAX_D
 0x„00707f

	)

454 
	#MATCH_FCVT_S_D
 0x40100053

	)

455 
	#MASK_FCVT_S_D
 0xfff0007f

	)

456 
	#MATCH_FCVT_D_S
 0x42000053

	)

457 
	#MASK_FCVT_D_S
 0xfff0007f

	)

458 
	#MATCH_FSQRT_D
 0x5a000053

	)

459 
	#MASK_FSQRT_D
 0xfff0007f

	)

460 
	#MATCH_FLE_S
 0xa0000053

	)

461 
	#MASK_FLE_S
 0x„00707f

	)

462 
	#MATCH_FLT_S
 0xa0001053

	)

463 
	#MASK_FLT_S
 0x„00707f

	)

464 
	#MATCH_FEQ_S
 0xa0002053

	)

465 
	#MASK_FEQ_S
 0x„00707f

	)

466 
	#MATCH_FLE_D
 0xa2000053

	)

467 
	#MASK_FLE_D
 0x„00707f

	)

468 
	#MATCH_FLT_D
 0xa2001053

	)

469 
	#MASK_FLT_D
 0x„00707f

	)

470 
	#MATCH_FEQ_D
 0xa2002053

	)

471 
	#MASK_FEQ_D
 0x„00707f

	)

472 
	#MATCH_FCVT_W_S
 0xc0000053

	)

473 
	#MASK_FCVT_W_S
 0xfff0007f

	)

474 
	#MATCH_FCVT_WU_S
 0xc0100053

	)

475 
	#MASK_FCVT_WU_S
 0xfff0007f

	)

476 
	#MATCH_FCVT_L_S
 0xc0200053

	)

477 
	#MASK_FCVT_L_S
 0xfff0007f

	)

478 
	#MATCH_FCVT_LU_S
 0xc0300053

	)

479 
	#MASK_FCVT_LU_S
 0xfff0007f

	)

480 
	#MATCH_FMV_X_S
 0xe0000053

	)

481 
	#MASK_FMV_X_S
 0xfff0707f

	)

482 
	#MATCH_FCLASS_S
 0xe0001053

	)

483 
	#MASK_FCLASS_S
 0xfff0707f

	)

484 
	#MATCH_FCVT_W_D
 0xc2000053

	)

485 
	#MASK_FCVT_W_D
 0xfff0007f

	)

486 
	#MATCH_FCVT_WU_D
 0xc2100053

	)

487 
	#MASK_FCVT_WU_D
 0xfff0007f

	)

488 
	#MATCH_FCVT_L_D
 0xc2200053

	)

489 
	#MASK_FCVT_L_D
 0xfff0007f

	)

490 
	#MATCH_FCVT_LU_D
 0xc2300053

	)

491 
	#MASK_FCVT_LU_D
 0xfff0007f

	)

492 
	#MATCH_FMV_X_D
 0xe2000053

	)

493 
	#MASK_FMV_X_D
 0xfff0707f

	)

494 
	#MATCH_FCLASS_D
 0xe2001053

	)

495 
	#MASK_FCLASS_D
 0xfff0707f

	)

496 
	#MATCH_FCVT_S_W
 0xd0000053

	)

497 
	#MASK_FCVT_S_W
 0xfff0007f

	)

498 
	#MATCH_FCVT_S_WU
 0xd0100053

	)

499 
	#MASK_FCVT_S_WU
 0xfff0007f

	)

500 
	#MATCH_FCVT_S_L
 0xd0200053

	)

501 
	#MASK_FCVT_S_L
 0xfff0007f

	)

502 
	#MATCH_FCVT_S_LU
 0xd0300053

	)

503 
	#MASK_FCVT_S_LU
 0xfff0007f

	)

504 
	#MATCH_FMV_S_X
 0xf0000053

	)

505 
	#MASK_FMV_S_X
 0xfff0707f

	)

506 
	#MATCH_FCVT_D_W
 0xd2000053

	)

507 
	#MASK_FCVT_D_W
 0xfff0007f

	)

508 
	#MATCH_FCVT_D_WU
 0xd2100053

	)

509 
	#MASK_FCVT_D_WU
 0xfff0007f

	)

510 
	#MATCH_FCVT_D_L
 0xd2200053

	)

511 
	#MASK_FCVT_D_L
 0xfff0007f

	)

512 
	#MATCH_FCVT_D_LU
 0xd2300053

	)

513 
	#MASK_FCVT_D_LU
 0xfff0007f

	)

514 
	#MATCH_FMV_D_X
 0xf2000053

	)

515 
	#MASK_FMV_D_X
 0xfff0707f

	)

516 
	#MATCH_FLW
 0x2007

	)

517 
	#MASK_FLW
 0x707f

	)

518 
	#MATCH_FLD
 0x3007

	)

519 
	#MASK_FLD
 0x707f

	)

520 
	#MATCH_FSW
 0x2027

	)

521 
	#MASK_FSW
 0x707f

	)

522 
	#MATCH_FSD
 0x3027

	)

523 
	#MASK_FSD
 0x707f

	)

524 
	#MATCH_FMADD_S
 0x43

	)

525 
	#MASK_FMADD_S
 0x600007f

	)

526 
	#MATCH_FMSUB_S
 0x47

	)

527 
	#MASK_FMSUB_S
 0x600007f

	)

528 
	#MATCH_FNMSUB_S
 0x4b

	)

529 
	#MASK_FNMSUB_S
 0x600007f

	)

530 
	#MATCH_FNMADD_S
 0x4f

	)

531 
	#MASK_FNMADD_S
 0x600007f

	)

532 
	#MATCH_FMADD_D
 0x2000043

	)

533 
	#MASK_FMADD_D
 0x600007f

	)

534 
	#MATCH_FMSUB_D
 0x2000047

	)

535 
	#MASK_FMSUB_D
 0x600007f

	)

536 
	#MATCH_FNMSUB_D
 0x200004b

	)

537 
	#MASK_FNMSUB_D
 0x600007f

	)

538 
	#MATCH_FNMADD_D
 0x200004f

	)

539 
	#MASK_FNMADD_D
 0x600007f

	)

540 
	#MATCH_C_NOP
 0x1

	)

541 
	#MASK_C_NOP
 0xffff

	)

542 
	#MATCH_C_ADDI16SP
 0x6101

	)

543 
	#MASK_C_ADDI16SP
 0xef83

	)

544 
	#MATCH_C_JR
 0x8002

	)

545 
	#MASK_C_JR
 0xf07f

	)

546 
	#MATCH_C_JALR
 0x9002

	)

547 
	#MASK_C_JALR
 0xf07f

	)

548 
	#MATCH_C_EBREAK
 0x9002

	)

549 
	#MASK_C_EBREAK
 0xffff

	)

550 
	#MATCH_C_LD
 0x6000

	)

551 
	#MASK_C_LD
 0xe003

	)

552 
	#MATCH_C_SD
 0xe000

	)

553 
	#MASK_C_SD
 0xe003

	)

554 
	#MATCH_C_ADDIW
 0x2001

	)

555 
	#MASK_C_ADDIW
 0xe003

	)

556 
	#MATCH_C_LDSP
 0x6002

	)

557 
	#MASK_C_LDSP
 0xe003

	)

558 
	#MATCH_C_SDSP
 0xe002

	)

559 
	#MASK_C_SDSP
 0xe003

	)

560 
	#MATCH_C_ADDI4SPN
 0x0

	)

561 
	#MASK_C_ADDI4SPN
 0xe003

	)

562 
	#MATCH_C_FLD
 0x2000

	)

563 
	#MASK_C_FLD
 0xe003

	)

564 
	#MATCH_C_LW
 0x4000

	)

565 
	#MASK_C_LW
 0xe003

	)

566 
	#MATCH_C_FLW
 0x6000

	)

567 
	#MASK_C_FLW
 0xe003

	)

568 
	#MATCH_C_FSD
 0xa000

	)

569 
	#MASK_C_FSD
 0xe003

	)

570 
	#MATCH_C_SW
 0xc000

	)

571 
	#MASK_C_SW
 0xe003

	)

572 
	#MATCH_C_FSW
 0xe000

	)

573 
	#MASK_C_FSW
 0xe003

	)

574 
	#MATCH_C_ADDI
 0x1

	)

575 
	#MASK_C_ADDI
 0xe003

	)

576 
	#MATCH_C_JAL
 0x2001

	)

577 
	#MASK_C_JAL
 0xe003

	)

578 
	#MATCH_C_LI
 0x4001

	)

579 
	#MASK_C_LI
 0xe003

	)

580 
	#MATCH_C_LUI
 0x6001

	)

581 
	#MASK_C_LUI
 0xe003

	)

582 
	#MATCH_C_SRLI
 0x8001

	)

583 
	#MASK_C_SRLI
 0xec03

	)

584 
	#MATCH_C_SRAI
 0x8401

	)

585 
	#MASK_C_SRAI
 0xec03

	)

586 
	#MATCH_C_ANDI
 0x8801

	)

587 
	#MASK_C_ANDI
 0xec03

	)

588 
	#MATCH_C_SUB
 0x8c01

	)

589 
	#MASK_C_SUB
 0xfc63

	)

590 
	#MATCH_C_XOR
 0x8c21

	)

591 
	#MASK_C_XOR
 0xfc63

	)

592 
	#MATCH_C_OR
 0x8c41

	)

593 
	#MASK_C_OR
 0xfc63

	)

594 
	#MATCH_C_AND
 0x8c61

	)

595 
	#MASK_C_AND
 0xfc63

	)

596 
	#MATCH_C_SUBW
 0x9c01

	)

597 
	#MASK_C_SUBW
 0xfc63

	)

598 
	#MATCH_C_ADDW
 0x9c21

	)

599 
	#MASK_C_ADDW
 0xfc63

	)

600 
	#MATCH_C_J
 0xa001

	)

601 
	#MASK_C_J
 0xe003

	)

602 
	#MATCH_C_BEQZ
 0xc001

	)

603 
	#MASK_C_BEQZ
 0xe003

	)

604 
	#MATCH_C_BNEZ
 0xe001

	)

605 
	#MASK_C_BNEZ
 0xe003

	)

606 
	#MATCH_C_SLLI
 0x2

	)

607 
	#MASK_C_SLLI
 0xe003

	)

608 
	#MATCH_C_FLDSP
 0x2002

	)

609 
	#MASK_C_FLDSP
 0xe003

	)

610 
	#MATCH_C_LWSP
 0x4002

	)

611 
	#MASK_C_LWSP
 0xe003

	)

612 
	#MATCH_C_FLWSP
 0x6002

	)

613 
	#MASK_C_FLWSP
 0xe003

	)

614 
	#MATCH_C_MV
 0x8002

	)

615 
	#MASK_C_MV
 0xf003

	)

616 
	#MATCH_C_ADD
 0x9002

	)

617 
	#MASK_C_ADD
 0xf003

	)

618 
	#MATCH_C_FSDSP
 0xa002

	)

619 
	#MASK_C_FSDSP
 0xe003

	)

620 
	#MATCH_C_SWSP
 0xc002

	)

621 
	#MASK_C_SWSP
 0xe003

	)

622 
	#MATCH_C_FSWSP
 0xe002

	)

623 
	#MASK_C_FSWSP
 0xe003

	)

624 
	#MATCH_CUSTOM0
 0xb

	)

625 
	#MASK_CUSTOM0
 0x707f

	)

626 
	#MATCH_CUSTOM0_RS1
 0x200b

	)

627 
	#MASK_CUSTOM0_RS1
 0x707f

	)

628 
	#MATCH_CUSTOM0_RS1_RS2
 0x300b

	)

629 
	#MASK_CUSTOM0_RS1_RS2
 0x707f

	)

630 
	#MATCH_CUSTOM0_RD
 0x400b

	)

631 
	#MASK_CUSTOM0_RD
 0x707f

	)

632 
	#MATCH_CUSTOM0_RD_RS1
 0x600b

	)

633 
	#MASK_CUSTOM0_RD_RS1
 0x707f

	)

634 
	#MATCH_CUSTOM0_RD_RS1_RS2
 0x700b

	)

635 
	#MASK_CUSTOM0_RD_RS1_RS2
 0x707f

	)

636 
	#MATCH_CUSTOM1
 0x2b

	)

637 
	#MASK_CUSTOM1
 0x707f

	)

638 
	#MATCH_CUSTOM1_RS1
 0x202b

	)

639 
	#MASK_CUSTOM1_RS1
 0x707f

	)

640 
	#MATCH_CUSTOM1_RS1_RS2
 0x302b

	)

641 
	#MASK_CUSTOM1_RS1_RS2
 0x707f

	)

642 
	#MATCH_CUSTOM1_RD
 0x402b

	)

643 
	#MASK_CUSTOM1_RD
 0x707f

	)

644 
	#MATCH_CUSTOM1_RD_RS1
 0x602b

	)

645 
	#MASK_CUSTOM1_RD_RS1
 0x707f

	)

646 
	#MATCH_CUSTOM1_RD_RS1_RS2
 0x702b

	)

647 
	#MASK_CUSTOM1_RD_RS1_RS2
 0x707f

	)

648 
	#MATCH_CUSTOM2
 0x5b

	)

649 
	#MASK_CUSTOM2
 0x707f

	)

650 
	#MATCH_CUSTOM2_RS1
 0x205b

	)

651 
	#MASK_CUSTOM2_RS1
 0x707f

	)

652 
	#MATCH_CUSTOM2_RS1_RS2
 0x305b

	)

653 
	#MASK_CUSTOM2_RS1_RS2
 0x707f

	)

654 
	#MATCH_CUSTOM2_RD
 0x405b

	)

655 
	#MASK_CUSTOM2_RD
 0x707f

	)

656 
	#MATCH_CUSTOM2_RD_RS1
 0x605b

	)

657 
	#MASK_CUSTOM2_RD_RS1
 0x707f

	)

658 
	#MATCH_CUSTOM2_RD_RS1_RS2
 0x705b

	)

659 
	#MASK_CUSTOM2_RD_RS1_RS2
 0x707f

	)

660 
	#MATCH_CUSTOM3
 0x7b

	)

661 
	#MASK_CUSTOM3
 0x707f

	)

662 
	#MATCH_CUSTOM3_RS1
 0x207b

	)

663 
	#MASK_CUSTOM3_RS1
 0x707f

	)

664 
	#MATCH_CUSTOM3_RS1_RS2
 0x307b

	)

665 
	#MASK_CUSTOM3_RS1_RS2
 0x707f

	)

666 
	#MATCH_CUSTOM3_RD
 0x407b

	)

667 
	#MASK_CUSTOM3_RD
 0x707f

	)

668 
	#MATCH_CUSTOM3_RD_RS1
 0x607b

	)

669 
	#MASK_CUSTOM3_RD_RS1
 0x707f

	)

670 
	#MATCH_CUSTOM3_RD_RS1_RS2
 0x707b

	)

671 
	#MASK_CUSTOM3_RD_RS1_RS2
 0x707f

	)

672 
	#CSR_FFLAGS
 0x1

	)

673 
	#CSR_FRM
 0x2

	)

674 
	#CSR_FCSR
 0x3

	)

675 
	#CSR_CYCLE
 0xc00

	)

676 
	#CSR_TIME
 0xc01

	)

677 
	#CSR_INSTRET
 0xc02

	)

678 
	#CSR_HPMCOUNTER3
 0xc03

	)

679 
	#CSR_HPMCOUNTER4
 0xc04

	)

680 
	#CSR_HPMCOUNTER5
 0xc05

	)

681 
	#CSR_HPMCOUNTER6
 0xc06

	)

682 
	#CSR_HPMCOUNTER7
 0xc07

	)

683 
	#CSR_HPMCOUNTER8
 0xc08

	)

684 
	#CSR_HPMCOUNTER9
 0xc09

	)

685 
	#CSR_HPMCOUNTER10
 0xc0a

	)

686 
	#CSR_HPMCOUNTER11
 0xc0b

	)

687 
	#CSR_HPMCOUNTER12
 0xc0c

	)

688 
	#CSR_HPMCOUNTER13
 0xc0d

	)

689 
	#CSR_HPMCOUNTER14
 0xc0e

	)

690 
	#CSR_HPMCOUNTER15
 0xc0f

	)

691 
	#CSR_HPMCOUNTER16
 0xc10

	)

692 
	#CSR_HPMCOUNTER17
 0xc11

	)

693 
	#CSR_HPMCOUNTER18
 0xc12

	)

694 
	#CSR_HPMCOUNTER19
 0xc13

	)

695 
	#CSR_HPMCOUNTER20
 0xc14

	)

696 
	#CSR_HPMCOUNTER21
 0xc15

	)

697 
	#CSR_HPMCOUNTER22
 0xc16

	)

698 
	#CSR_HPMCOUNTER23
 0xc17

	)

699 
	#CSR_HPMCOUNTER24
 0xc18

	)

700 
	#CSR_HPMCOUNTER25
 0xc19

	)

701 
	#CSR_HPMCOUNTER26
 0xc1a

	)

702 
	#CSR_HPMCOUNTER27
 0xc1b

	)

703 
	#CSR_HPMCOUNTER28
 0xc1c

	)

704 
	#CSR_HPMCOUNTER29
 0xc1d

	)

705 
	#CSR_HPMCOUNTER30
 0xc1e

	)

706 
	#CSR_HPMCOUNTER31
 0xc1f

	)

707 
	#CSR_SSTATUS
 0x100

	)

708 
	#CSR_SIE
 0x104

	)

709 
	#CSR_STVEC
 0x105

	)

710 
	#CSR_SSCRATCH
 0x140

	)

711 
	#CSR_SEPC
 0x141

	)

712 
	#CSR_SCAUSE
 0x142

	)

713 
	#CSR_SBADADDR
 0x143

	)

714 
	#CSR_SIP
 0x144

	)

715 
	#CSR_SPTBR
 0x180

	)

716 
	#CSR_MSTATUS
 0x300

	)

717 
	#CSR_MISA
 0x301

	)

718 
	#CSR_MEDELEG
 0x302

	)

719 
	#CSR_MIDELEG
 0x303

	)

720 
	#CSR_MIE
 0x304

	)

721 
	#CSR_MTVEC
 0x305

	)

722 
	#CSR_MSCRATCH
 0x340

	)

723 
	#CSR_MEPC
 0x341

	)

724 
	#CSR_MCAUSE
 0x342

	)

725 
	#CSR_MBADADDR
 0x343

	)

726 
	#CSR_MIP
 0x344

	)

727 
	#CSR_TSELECT
 0x7a0

	)

728 
	#CSR_TDATA1
 0x7a1

	)

729 
	#CSR_TDATA2
 0x7a2

	)

730 
	#CSR_TDATA3
 0x7a3

	)

731 
	#CSR_DCSR
 0x7b0

	)

732 
	#CSR_DPC
 0x7b1

	)

733 
	#CSR_DSCRATCH
 0x7b2

	)

734 
	#CSR_MCYCLE
 0xb00

	)

735 
	#CSR_MINSTRET
 0xb02

	)

736 
	#CSR_MHPMCOUNTER3
 0xb03

	)

737 
	#CSR_MHPMCOUNTER4
 0xb04

	)

738 
	#CSR_MHPMCOUNTER5
 0xb05

	)

739 
	#CSR_MHPMCOUNTER6
 0xb06

	)

740 
	#CSR_MHPMCOUNTER7
 0xb07

	)

741 
	#CSR_MHPMCOUNTER8
 0xb08

	)

742 
	#CSR_MHPMCOUNTER9
 0xb09

	)

743 
	#CSR_MHPMCOUNTER10
 0xb0a

	)

744 
	#CSR_MHPMCOUNTER11
 0xb0b

	)

745 
	#CSR_MHPMCOUNTER12
 0xb0c

	)

746 
	#CSR_MHPMCOUNTER13
 0xb0d

	)

747 
	#CSR_MHPMCOUNTER14
 0xb0e

	)

748 
	#CSR_MHPMCOUNTER15
 0xb0f

	)

749 
	#CSR_MHPMCOUNTER16
 0xb10

	)

750 
	#CSR_MHPMCOUNTER17
 0xb11

	)

751 
	#CSR_MHPMCOUNTER18
 0xb12

	)

752 
	#CSR_MHPMCOUNTER19
 0xb13

	)

753 
	#CSR_MHPMCOUNTER20
 0xb14

	)

754 
	#CSR_MHPMCOUNTER21
 0xb15

	)

755 
	#CSR_MHPMCOUNTER22
 0xb16

	)

756 
	#CSR_MHPMCOUNTER23
 0xb17

	)

757 
	#CSR_MHPMCOUNTER24
 0xb18

	)

758 
	#CSR_MHPMCOUNTER25
 0xb19

	)

759 
	#CSR_MHPMCOUNTER26
 0xb1a

	)

760 
	#CSR_MHPMCOUNTER27
 0xb1b

	)

761 
	#CSR_MHPMCOUNTER28
 0xb1c

	)

762 
	#CSR_MHPMCOUNTER29
 0xb1d

	)

763 
	#CSR_MHPMCOUNTER30
 0xb1e

	)

764 
	#CSR_MHPMCOUNTER31
 0xb1f

	)

765 
	#CSR_MUCOUNTEREN
 0x320

	)

766 
	#CSR_MSCOUNTEREN
 0x321

	)

767 
	#CSR_MHPMEVENT3
 0x323

	)

768 
	#CSR_MHPMEVENT4
 0x324

	)

769 
	#CSR_MHPMEVENT5
 0x325

	)

770 
	#CSR_MHPMEVENT6
 0x326

	)

771 
	#CSR_MHPMEVENT7
 0x327

	)

772 
	#CSR_MHPMEVENT8
 0x328

	)

773 
	#CSR_MHPMEVENT9
 0x329

	)

774 
	#CSR_MHPMEVENT10
 0x32a

	)

775 
	#CSR_MHPMEVENT11
 0x32b

	)

776 
	#CSR_MHPMEVENT12
 0x32c

	)

777 
	#CSR_MHPMEVENT13
 0x32d

	)

778 
	#CSR_MHPMEVENT14
 0x32e

	)

779 
	#CSR_MHPMEVENT15
 0x32f

	)

780 
	#CSR_MHPMEVENT16
 0x330

	)

781 
	#CSR_MHPMEVENT17
 0x331

	)

782 
	#CSR_MHPMEVENT18
 0x332

	)

783 
	#CSR_MHPMEVENT19
 0x333

	)

784 
	#CSR_MHPMEVENT20
 0x334

	)

785 
	#CSR_MHPMEVENT21
 0x335

	)

786 
	#CSR_MHPMEVENT22
 0x336

	)

787 
	#CSR_MHPMEVENT23
 0x337

	)

788 
	#CSR_MHPMEVENT24
 0x338

	)

789 
	#CSR_MHPMEVENT25
 0x339

	)

790 
	#CSR_MHPMEVENT26
 0x33a

	)

791 
	#CSR_MHPMEVENT27
 0x33b

	)

792 
	#CSR_MHPMEVENT28
 0x33c

	)

793 
	#CSR_MHPMEVENT29
 0x33d

	)

794 
	#CSR_MHPMEVENT30
 0x33e

	)

795 
	#CSR_MHPMEVENT31
 0x33f

	)

796 
	#CSR_MVENDORID
 0xf11

	)

797 
	#CSR_MARCHID
 0xf12

	)

798 
	#CSR_MIMPID
 0xf13

	)

799 
	#CSR_MHARTID
 0xf14

	)

800 
	#CSR_CYCLEH
 0xc80

	)

801 
	#CSR_TIMEH
 0xc81

	)

802 
	#CSR_INSTRETH
 0xc82

	)

803 
	#CSR_HPMCOUNTER3H
 0xc83

	)

804 
	#CSR_HPMCOUNTER4H
 0xc84

	)

805 
	#CSR_HPMCOUNTER5H
 0xc85

	)

806 
	#CSR_HPMCOUNTER6H
 0xc86

	)

807 
	#CSR_HPMCOUNTER7H
 0xc87

	)

808 
	#CSR_HPMCOUNTER8H
 0xc88

	)

809 
	#CSR_HPMCOUNTER9H
 0xc89

	)

810 
	#CSR_HPMCOUNTER10H
 0xc8a

	)

811 
	#CSR_HPMCOUNTER11H
 0xc8b

	)

812 
	#CSR_HPMCOUNTER12H
 0xc8c

	)

813 
	#CSR_HPMCOUNTER13H
 0xc8d

	)

814 
	#CSR_HPMCOUNTER14H
 0xc8e

	)

815 
	#CSR_HPMCOUNTER15H
 0xc8f

	)

816 
	#CSR_HPMCOUNTER16H
 0xc90

	)

817 
	#CSR_HPMCOUNTER17H
 0xc91

	)

818 
	#CSR_HPMCOUNTER18H
 0xc92

	)

819 
	#CSR_HPMCOUNTER19H
 0xc93

	)

820 
	#CSR_HPMCOUNTER20H
 0xc94

	)

821 
	#CSR_HPMCOUNTER21H
 0xc95

	)

822 
	#CSR_HPMCOUNTER22H
 0xc96

	)

823 
	#CSR_HPMCOUNTER23H
 0xc97

	)

824 
	#CSR_HPMCOUNTER24H
 0xc98

	)

825 
	#CSR_HPMCOUNTER25H
 0xc99

	)

826 
	#CSR_HPMCOUNTER26H
 0xc9a

	)

827 
	#CSR_HPMCOUNTER27H
 0xc9b

	)

828 
	#CSR_HPMCOUNTER28H
 0xc9c

	)

829 
	#CSR_HPMCOUNTER29H
 0xc9d

	)

830 
	#CSR_HPMCOUNTER30H
 0xc9e

	)

831 
	#CSR_HPMCOUNTER31H
 0xc9f

	)

832 
	#CSR_MCYCLEH
 0xb80

	)

833 
	#CSR_MINSTRETH
 0xb82

	)

834 
	#CSR_MHPMCOUNTER3H
 0xb83

	)

835 
	#CSR_MHPMCOUNTER4H
 0xb84

	)

836 
	#CSR_MHPMCOUNTER5H
 0xb85

	)

837 
	#CSR_MHPMCOUNTER6H
 0xb86

	)

838 
	#CSR_MHPMCOUNTER7H
 0xb87

	)

839 
	#CSR_MHPMCOUNTER8H
 0xb88

	)

840 
	#CSR_MHPMCOUNTER9H
 0xb89

	)

841 
	#CSR_MHPMCOUNTER10H
 0xb8a

	)

842 
	#CSR_MHPMCOUNTER11H
 0xb8b

	)

843 
	#CSR_MHPMCOUNTER12H
 0xb8c

	)

844 
	#CSR_MHPMCOUNTER13H
 0xb8d

	)

845 
	#CSR_MHPMCOUNTER14H
 0xb8e

	)

846 
	#CSR_MHPMCOUNTER15H
 0xb8f

	)

847 
	#CSR_MHPMCOUNTER16H
 0xb90

	)

848 
	#CSR_MHPMCOUNTER17H
 0xb91

	)

849 
	#CSR_MHPMCOUNTER18H
 0xb92

	)

850 
	#CSR_MHPMCOUNTER19H
 0xb93

	)

851 
	#CSR_MHPMCOUNTER20H
 0xb94

	)

852 
	#CSR_MHPMCOUNTER21H
 0xb95

	)

853 
	#CSR_MHPMCOUNTER22H
 0xb96

	)

854 
	#CSR_MHPMCOUNTER23H
 0xb97

	)

855 
	#CSR_MHPMCOUNTER24H
 0xb98

	)

856 
	#CSR_MHPMCOUNTER25H
 0xb99

	)

857 
	#CSR_MHPMCOUNTER26H
 0xb9a

	)

858 
	#CSR_MHPMCOUNTER27H
 0xb9b

	)

859 
	#CSR_MHPMCOUNTER28H
 0xb9c

	)

860 
	#CSR_MHPMCOUNTER29H
 0xb9d

	)

861 
	#CSR_MHPMCOUNTER30H
 0xb9e

	)

862 
	#CSR_MHPMCOUNTER31H
 0xb9f

	)

863 
	#CAUSE_MISALIGNED_FETCH
 0x0

	)

864 
	#CAUSE_FAULT_FETCH
 0x1

	)

865 
	#CAUSE_ILLEGAL_INSTRUCTION
 0x2

	)

866 
	#CAUSE_BREAKPOINT
 0x3

	)

867 
	#CAUSE_MISALIGNED_LOAD
 0x4

	)

868 
	#CAUSE_FAULT_LOAD
 0x5

	)

869 
	#CAUSE_MISALIGNED_STORE
 0x6

	)

870 
	#CAUSE_FAULT_STORE
 0x7

	)

871 
	#CAUSE_USER_ECALL
 0x8

	)

872 
	#CAUSE_SUPERVISOR_ECALL
 0x9

	)

873 
	#CAUSE_HYPERVISOR_ECALL
 0xa

	)

874 
	#CAUSE_MACHINE_ECALL
 0xb

	)

876 #ifde‡
DECLARE_INSN


877 
	$DECLARE_INSN
(
beq
, 
MATCH_BEQ
, 
MASK_BEQ
)

878 
	$DECLARE_INSN
(
b√
, 
MATCH_BNE
, 
MASK_BNE
)

879 
	$DECLARE_INSN
(
b…
, 
MATCH_BLT
, 
MASK_BLT
)

880 
	$DECLARE_INSN
(
bge
, 
MATCH_BGE
, 
MASK_BGE
)

881 
	$DECLARE_INSN
(
b…u
, 
MATCH_BLTU
, 
MASK_BLTU
)

882 
	$DECLARE_INSN
(
bgeu
, 
MATCH_BGEU
, 
MASK_BGEU
)

883 
	$DECLARE_INSN
(
jÆr
, 
MATCH_JALR
, 
MASK_JALR
)

884 
	$DECLARE_INSN
(
jÆ
, 
MATCH_JAL
, 
MASK_JAL
)

885 
	$DECLARE_INSN
(
lui
, 
MATCH_LUI
, 
MASK_LUI
)

886 
	$DECLARE_INSN
(
auùc
, 
MATCH_AUIPC
, 
MASK_AUIPC
)

887 
	$DECLARE_INSN
(
addi
, 
MATCH_ADDI
, 
MASK_ADDI
)

888 
	$DECLARE_INSN
(
¶li
, 
MATCH_SLLI
, 
MASK_SLLI
)

889 
	$DECLARE_INSN
(
¶ti
, 
MATCH_SLTI
, 
MASK_SLTI
)

890 
	$DECLARE_INSN
(
¶tiu
, 
MATCH_SLTIU
, 
MASK_SLTIU
)

891 
	$DECLARE_INSN
(
x‹i
, 
MATCH_XORI
, 
MASK_XORI
)

892 
	$DECLARE_INSN
(
§li
, 
MATCH_SRLI
, 
MASK_SRLI
)

893 
	$DECLARE_INSN
(
§ai
, 
MATCH_SRAI
, 
MASK_SRAI
)

894 
	$DECLARE_INSN
(
‹i
, 
MATCH_ORI
, 
MASK_ORI
)

895 
	$DECLARE_INSN
(
™di
, 
MATCH_ANDI
, 
MASK_ANDI
)

896 
	$DECLARE_INSN
(
add
, 
MATCH_ADD
, 
MASK_ADD
)

897 
	$DECLARE_INSN
(
sub
, 
MATCH_SUB
, 
MASK_SUB
)

898 
	$DECLARE_INSN
(
¶l
, 
MATCH_SLL
, 
MASK_SLL
)

899 
	$DECLARE_INSN
(
¶t
, 
MATCH_SLT
, 
MASK_SLT
)

900 
	$DECLARE_INSN
(
¶tu
, 
MATCH_SLTU
, 
MASK_SLTU
)

901 
	$DECLARE_INSN
(
x‹
, 
MATCH_XOR
, 
MASK_XOR
)

902 
	$DECLARE_INSN
(
§l
, 
MATCH_SRL
, 
MASK_SRL
)

903 
	$DECLARE_INSN
(
§a
, 
MATCH_SRA
, 
MASK_SRA
)

904 
	$DECLARE_INSN
(
‹
, 
MATCH_OR
, 
MASK_OR
)

905 
	$DECLARE_INSN
(
™d
, 
MATCH_AND
, 
MASK_AND
)

906 
	$DECLARE_INSN
(
addiw
, 
MATCH_ADDIW
, 
MASK_ADDIW
)

907 
	$DECLARE_INSN
(
¶liw
, 
MATCH_SLLIW
, 
MASK_SLLIW
)

908 
	$DECLARE_INSN
(
§liw
, 
MATCH_SRLIW
, 
MASK_SRLIW
)

909 
	$DECLARE_INSN
(
§aiw
, 
MATCH_SRAIW
, 
MASK_SRAIW
)

910 
	$DECLARE_INSN
(
addw
, 
MATCH_ADDW
, 
MASK_ADDW
)

911 
	$DECLARE_INSN
(
subw
, 
MATCH_SUBW
, 
MASK_SUBW
)

912 
	$DECLARE_INSN
(
¶lw
, 
MATCH_SLLW
, 
MASK_SLLW
)

913 
	$DECLARE_INSN
(
§lw
, 
MATCH_SRLW
, 
MASK_SRLW
)

914 
	$DECLARE_INSN
(
§aw
, 
MATCH_SRAW
, 
MASK_SRAW
)

915 
	$DECLARE_INSN
(
lb
, 
MATCH_LB
, 
MASK_LB
)

916 
	$DECLARE_INSN
(
lh
, 
MATCH_LH
, 
MASK_LH
)

917 
	$DECLARE_INSN
(
lw
, 
MATCH_LW
, 
MASK_LW
)

918 
	$DECLARE_INSN
(
ld
, 
MATCH_LD
, 
MASK_LD
)

919 
	$DECLARE_INSN
(
lbu
, 
MATCH_LBU
, 
MASK_LBU
)

920 
	$DECLARE_INSN
(
lhu
, 
MATCH_LHU
, 
MASK_LHU
)

921 
	$DECLARE_INSN
(
lwu
, 
MATCH_LWU
, 
MASK_LWU
)

922 
	$DECLARE_INSN
(
sb
, 
MATCH_SB
, 
MASK_SB
)

923 
	$DECLARE_INSN
(
sh
, 
MATCH_SH
, 
MASK_SH
)

924 
	$DECLARE_INSN
(
sw
, 
MATCH_SW
, 
MASK_SW
)

925 
	$DECLARE_INSN
(
sd
, 
MATCH_SD
, 
MASK_SD
)

926 
	$DECLARE_INSN
(
„n˚
, 
MATCH_FENCE
, 
MASK_FENCE
)

927 
	$DECLARE_INSN
(
„n˚_i
, 
MATCH_FENCE_I
, 
MASK_FENCE_I
)

928 
	$DECLARE_INSN
(
mul
, 
MATCH_MUL
, 
MASK_MUL
)

929 
	$DECLARE_INSN
(
mulh
, 
MATCH_MULH
, 
MASK_MULH
)

930 
	$DECLARE_INSN
(
mulhsu
, 
MATCH_MULHSU
, 
MASK_MULHSU
)

931 
	$DECLARE_INSN
(
mulhu
, 
MATCH_MULHU
, 
MASK_MULHU
)

932 
	$DECLARE_INSN
(
div
, 
MATCH_DIV
, 
MASK_DIV
)

933 
	$DECLARE_INSN
(
divu
, 
MATCH_DIVU
, 
MASK_DIVU
)

934 
	$DECLARE_INSN
(
ªm
, 
MATCH_REM
, 
MASK_REM
)

935 
	$DECLARE_INSN
(
ªmu
, 
MATCH_REMU
, 
MASK_REMU
)

936 
	$DECLARE_INSN
(
mulw
, 
MATCH_MULW
, 
MASK_MULW
)

937 
	$DECLARE_INSN
(
divw
, 
MATCH_DIVW
, 
MASK_DIVW
)

938 
	$DECLARE_INSN
(
divuw
, 
MATCH_DIVUW
, 
MASK_DIVUW
)

939 
	$DECLARE_INSN
(
ªmw
, 
MATCH_REMW
, 
MASK_REMW
)

940 
	$DECLARE_INSN
(
ªmuw
, 
MATCH_REMUW
, 
MASK_REMUW
)

941 
	$DECLARE_INSN
(
amﬂdd_w
, 
MATCH_AMOADD_W
, 
MASK_AMOADD_W
)

942 
	$DECLARE_INSN
(
amox‹_w
, 
MATCH_AMOXOR_W
, 
MASK_AMOXOR_W
)

943 
	$DECLARE_INSN
(
amo‹_w
, 
MATCH_AMOOR_W
, 
MASK_AMOOR_W
)

944 
	$DECLARE_INSN
(
amﬂnd_w
, 
MATCH_AMOAND_W
, 
MASK_AMOAND_W
)

945 
	$DECLARE_INSN
(
amomö_w
, 
MATCH_AMOMIN_W
, 
MASK_AMOMIN_W
)

946 
	$DECLARE_INSN
(
amomax_w
, 
MATCH_AMOMAX_W
, 
MASK_AMOMAX_W
)

947 
	$DECLARE_INSN
(
amomöu_w
, 
MATCH_AMOMINU_W
, 
MASK_AMOMINU_W
)

948 
	$DECLARE_INSN
(
amomaxu_w
, 
MATCH_AMOMAXU_W
, 
MASK_AMOMAXU_W
)

949 
	$DECLARE_INSN
(
amosw≠_w
, 
MATCH_AMOSWAP_W
, 
MASK_AMOSWAP_W
)

950 
	$DECLARE_INSN
(
Ã_w
, 
MATCH_LR_W
, 
MASK_LR_W
)

951 
	$DECLARE_INSN
(
sc_w
, 
MATCH_SC_W
, 
MASK_SC_W
)

952 
	$DECLARE_INSN
(
amﬂdd_d
, 
MATCH_AMOADD_D
, 
MASK_AMOADD_D
)

953 
	$DECLARE_INSN
(
amox‹_d
, 
MATCH_AMOXOR_D
, 
MASK_AMOXOR_D
)

954 
	$DECLARE_INSN
(
amo‹_d
, 
MATCH_AMOOR_D
, 
MASK_AMOOR_D
)

955 
	$DECLARE_INSN
(
amﬂnd_d
, 
MATCH_AMOAND_D
, 
MASK_AMOAND_D
)

956 
	$DECLARE_INSN
(
amomö_d
, 
MATCH_AMOMIN_D
, 
MASK_AMOMIN_D
)

957 
	$DECLARE_INSN
(
amomax_d
, 
MATCH_AMOMAX_D
, 
MASK_AMOMAX_D
)

958 
	$DECLARE_INSN
(
amomöu_d
, 
MATCH_AMOMINU_D
, 
MASK_AMOMINU_D
)

959 
	$DECLARE_INSN
(
amomaxu_d
, 
MATCH_AMOMAXU_D
, 
MASK_AMOMAXU_D
)

960 
	$DECLARE_INSN
(
amosw≠_d
, 
MATCH_AMOSWAP_D
, 
MASK_AMOSWAP_D
)

961 
	$DECLARE_INSN
(
Ã_d
, 
MATCH_LR_D
, 
MASK_LR_D
)

962 
	$DECLARE_INSN
(
sc_d
, 
MATCH_SC_D
, 
MASK_SC_D
)

963 
	$DECLARE_INSN
(
eˇŒ
, 
MATCH_ECALL
, 
MASK_ECALL
)

964 
	$DECLARE_INSN
(
ebªak
, 
MATCH_EBREAK
, 
MASK_EBREAK
)

965 
	$DECLARE_INSN
(
uªt
, 
MATCH_URET
, 
MASK_URET
)

966 
	$DECLARE_INSN
(
§ë
, 
MATCH_SRET
, 
MASK_SRET
)

967 
	$DECLARE_INSN
(
hªt
, 
MATCH_HRET
, 
MASK_HRET
)

968 
	$DECLARE_INSN
(
mªt
, 
MATCH_MRET
, 
MASK_MRET
)

969 
	$DECLARE_INSN
(
dªt
, 
MATCH_DRET
, 
MASK_DRET
)

970 
	$DECLARE_INSN
(
s„n˚_vm
, 
MATCH_SFENCE_VM
, 
MASK_SFENCE_VM
)

971 
	$DECLARE_INSN
(
wfi
, 
MATCH_WFI
, 
MASK_WFI
)

972 
	$DECLARE_INSN
(
c§rw
, 
MATCH_CSRRW
, 
MASK_CSRRW
)

973 
	$DECLARE_INSN
(
c§rs
, 
MATCH_CSRRS
, 
MASK_CSRRS
)

974 
	$DECLARE_INSN
(
c§rc
, 
MATCH_CSRRC
, 
MASK_CSRRC
)

975 
	$DECLARE_INSN
(
c§rwi
, 
MATCH_CSRRWI
, 
MASK_CSRRWI
)

976 
	$DECLARE_INSN
(
c§rsi
, 
MATCH_CSRRSI
, 
MASK_CSRRSI
)

977 
	$DECLARE_INSN
(
c§rci
, 
MATCH_CSRRCI
, 
MASK_CSRRCI
)

978 
	$DECLARE_INSN
(
Ádd_s
, 
MATCH_FADD_S
, 
MASK_FADD_S
)

979 
	$DECLARE_INSN
(
fsub_s
, 
MATCH_FSUB_S
, 
MASK_FSUB_S
)

980 
	$DECLARE_INSN
(
fmul_s
, 
MATCH_FMUL_S
, 
MASK_FMUL_S
)

981 
	$DECLARE_INSN
(
fdiv_s
, 
MATCH_FDIV_S
, 
MASK_FDIV_S
)

982 
	$DECLARE_INSN
(
fsgnj_s
, 
MATCH_FSGNJ_S
, 
MASK_FSGNJ_S
)

983 
	$DECLARE_INSN
(
fsgnjn_s
, 
MATCH_FSGNJN_S
, 
MASK_FSGNJN_S
)

984 
	$DECLARE_INSN
(
fsgnjx_s
, 
MATCH_FSGNJX_S
, 
MASK_FSGNJX_S
)

985 
	$DECLARE_INSN
(
fmö_s
, 
MATCH_FMIN_S
, 
MASK_FMIN_S
)

986 
	$DECLARE_INSN
(
fmax_s
, 
MATCH_FMAX_S
, 
MASK_FMAX_S
)

987 
	$DECLARE_INSN
(
fsqπ_s
, 
MATCH_FSQRT_S
, 
MASK_FSQRT_S
)

988 
	$DECLARE_INSN
(
Ádd_d
, 
MATCH_FADD_D
, 
MASK_FADD_D
)

989 
	$DECLARE_INSN
(
fsub_d
, 
MATCH_FSUB_D
, 
MASK_FSUB_D
)

990 
	$DECLARE_INSN
(
fmul_d
, 
MATCH_FMUL_D
, 
MASK_FMUL_D
)

991 
	$DECLARE_INSN
(
fdiv_d
, 
MATCH_FDIV_D
, 
MASK_FDIV_D
)

992 
	$DECLARE_INSN
(
fsgnj_d
, 
MATCH_FSGNJ_D
, 
MASK_FSGNJ_D
)

993 
	$DECLARE_INSN
(
fsgnjn_d
, 
MATCH_FSGNJN_D
, 
MASK_FSGNJN_D
)

994 
	$DECLARE_INSN
(
fsgnjx_d
, 
MATCH_FSGNJX_D
, 
MASK_FSGNJX_D
)

995 
	$DECLARE_INSN
(
fmö_d
, 
MATCH_FMIN_D
, 
MASK_FMIN_D
)

996 
	$DECLARE_INSN
(
fmax_d
, 
MATCH_FMAX_D
, 
MASK_FMAX_D
)

997 
	$DECLARE_INSN
(
fcvt_s_d
, 
MATCH_FCVT_S_D
, 
MASK_FCVT_S_D
)

998 
	$DECLARE_INSN
(
fcvt_d_s
, 
MATCH_FCVT_D_S
, 
MASK_FCVT_D_S
)

999 
	$DECLARE_INSN
(
fsqπ_d
, 
MATCH_FSQRT_D
, 
MASK_FSQRT_D
)

1000 
	$DECLARE_INSN
(
Êe_s
, 
MATCH_FLE_S
, 
MASK_FLE_S
)

1001 
	$DECLARE_INSN
(
Êt_s
, 
MATCH_FLT_S
, 
MASK_FLT_S
)

1002 
	$DECLARE_INSN
(
„q_s
, 
MATCH_FEQ_S
, 
MASK_FEQ_S
)

1003 
	$DECLARE_INSN
(
Êe_d
, 
MATCH_FLE_D
, 
MASK_FLE_D
)

1004 
	$DECLARE_INSN
(
Êt_d
, 
MATCH_FLT_D
, 
MASK_FLT_D
)

1005 
	$DECLARE_INSN
(
„q_d
, 
MATCH_FEQ_D
, 
MASK_FEQ_D
)

1006 
	$DECLARE_INSN
(
fcvt_w_s
, 
MATCH_FCVT_W_S
, 
MASK_FCVT_W_S
)

1007 
	$DECLARE_INSN
(
fcvt_wu_s
, 
MATCH_FCVT_WU_S
, 
MASK_FCVT_WU_S
)

1008 
	$DECLARE_INSN
(
fcvt_l_s
, 
MATCH_FCVT_L_S
, 
MASK_FCVT_L_S
)

1009 
	$DECLARE_INSN
(
fcvt_lu_s
, 
MATCH_FCVT_LU_S
, 
MASK_FCVT_LU_S
)

1010 
	$DECLARE_INSN
(
fmv_x_s
, 
MATCH_FMV_X_S
, 
MASK_FMV_X_S
)

1011 
	$DECLARE_INSN
(
f˛ass_s
, 
MATCH_FCLASS_S
, 
MASK_FCLASS_S
)

1012 
	$DECLARE_INSN
(
fcvt_w_d
, 
MATCH_FCVT_W_D
, 
MASK_FCVT_W_D
)

1013 
	$DECLARE_INSN
(
fcvt_wu_d
, 
MATCH_FCVT_WU_D
, 
MASK_FCVT_WU_D
)

1014 
	$DECLARE_INSN
(
fcvt_l_d
, 
MATCH_FCVT_L_D
, 
MASK_FCVT_L_D
)

1015 
	$DECLARE_INSN
(
fcvt_lu_d
, 
MATCH_FCVT_LU_D
, 
MASK_FCVT_LU_D
)

1016 
	$DECLARE_INSN
(
fmv_x_d
, 
MATCH_FMV_X_D
, 
MASK_FMV_X_D
)

1017 
	$DECLARE_INSN
(
f˛ass_d
, 
MATCH_FCLASS_D
, 
MASK_FCLASS_D
)

1018 
	$DECLARE_INSN
(
fcvt_s_w
, 
MATCH_FCVT_S_W
, 
MASK_FCVT_S_W
)

1019 
	$DECLARE_INSN
(
fcvt_s_wu
, 
MATCH_FCVT_S_WU
, 
MASK_FCVT_S_WU
)

1020 
	$DECLARE_INSN
(
fcvt_s_l
, 
MATCH_FCVT_S_L
, 
MASK_FCVT_S_L
)

1021 
	$DECLARE_INSN
(
fcvt_s_lu
, 
MATCH_FCVT_S_LU
, 
MASK_FCVT_S_LU
)

1022 
	$DECLARE_INSN
(
fmv_s_x
, 
MATCH_FMV_S_X
, 
MASK_FMV_S_X
)

1023 
	$DECLARE_INSN
(
fcvt_d_w
, 
MATCH_FCVT_D_W
, 
MASK_FCVT_D_W
)

1024 
	$DECLARE_INSN
(
fcvt_d_wu
, 
MATCH_FCVT_D_WU
, 
MASK_FCVT_D_WU
)

1025 
	$DECLARE_INSN
(
fcvt_d_l
, 
MATCH_FCVT_D_L
, 
MASK_FCVT_D_L
)

1026 
	$DECLARE_INSN
(
fcvt_d_lu
, 
MATCH_FCVT_D_LU
, 
MASK_FCVT_D_LU
)

1027 
	$DECLARE_INSN
(
fmv_d_x
, 
MATCH_FMV_D_X
, 
MASK_FMV_D_X
)

1028 
	$DECLARE_INSN
(
Êw
, 
MATCH_FLW
, 
MASK_FLW
)

1029 
	$DECLARE_INSN
(
Êd
, 
MATCH_FLD
, 
MASK_FLD
)

1030 
	$DECLARE_INSN
(
fsw
, 
MATCH_FSW
, 
MASK_FSW
)

1031 
	$DECLARE_INSN
(
fsd
, 
MATCH_FSD
, 
MASK_FSD
)

1032 
	$DECLARE_INSN
(
fmadd_s
, 
MATCH_FMADD_S
, 
MASK_FMADD_S
)

1033 
	$DECLARE_INSN
(
fmsub_s
, 
MATCH_FMSUB_S
, 
MASK_FMSUB_S
)

1034 
	$DECLARE_INSN
(
‚msub_s
, 
MATCH_FNMSUB_S
, 
MASK_FNMSUB_S
)

1035 
	$DECLARE_INSN
(
‚madd_s
, 
MATCH_FNMADD_S
, 
MASK_FNMADD_S
)

1036 
	$DECLARE_INSN
(
fmadd_d
, 
MATCH_FMADD_D
, 
MASK_FMADD_D
)

1037 
	$DECLARE_INSN
(
fmsub_d
, 
MATCH_FMSUB_D
, 
MASK_FMSUB_D
)

1038 
	$DECLARE_INSN
(
‚msub_d
, 
MATCH_FNMSUB_D
, 
MASK_FNMSUB_D
)

1039 
	$DECLARE_INSN
(
‚madd_d
, 
MATCH_FNMADD_D
, 
MASK_FNMADD_D
)

1040 
	$DECLARE_INSN
(
c_n›
, 
MATCH_C_NOP
, 
MASK_C_NOP
)

1041 
	$DECLARE_INSN
(
c_addi16•
, 
MATCH_C_ADDI16SP
, 
MASK_C_ADDI16SP
)

1042 
	$DECLARE_INSN
(
c_jr
, 
MATCH_C_JR
, 
MASK_C_JR
)

1043 
	$DECLARE_INSN
(
c_jÆr
, 
MATCH_C_JALR
, 
MASK_C_JALR
)

1044 
	$DECLARE_INSN
(
c_ebªak
, 
MATCH_C_EBREAK
, 
MASK_C_EBREAK
)

1045 
	$DECLARE_INSN
(
c_ld
, 
MATCH_C_LD
, 
MASK_C_LD
)

1046 
	$DECLARE_INSN
(
c_sd
, 
MATCH_C_SD
, 
MASK_C_SD
)

1047 
	$DECLARE_INSN
(
c_addiw
, 
MATCH_C_ADDIW
, 
MASK_C_ADDIW
)

1048 
	$DECLARE_INSN
(
c_ld•
, 
MATCH_C_LDSP
, 
MASK_C_LDSP
)

1049 
	$DECLARE_INSN
(
c_sd•
, 
MATCH_C_SDSP
, 
MASK_C_SDSP
)

1050 
	$DECLARE_INSN
(
c_addi4•n
, 
MATCH_C_ADDI4SPN
, 
MASK_C_ADDI4SPN
)

1051 
	$DECLARE_INSN
(
c_Êd
, 
MATCH_C_FLD
, 
MASK_C_FLD
)

1052 
	$DECLARE_INSN
(
c_lw
, 
MATCH_C_LW
, 
MASK_C_LW
)

1053 
	$DECLARE_INSN
(
c_Êw
, 
MATCH_C_FLW
, 
MASK_C_FLW
)

1054 
	$DECLARE_INSN
(
c_fsd
, 
MATCH_C_FSD
, 
MASK_C_FSD
)

1055 
	$DECLARE_INSN
(
c_sw
, 
MATCH_C_SW
, 
MASK_C_SW
)

1056 
	$DECLARE_INSN
(
c_fsw
, 
MATCH_C_FSW
, 
MASK_C_FSW
)

1057 
	$DECLARE_INSN
(
c_addi
, 
MATCH_C_ADDI
, 
MASK_C_ADDI
)

1058 
	$DECLARE_INSN
(
c_jÆ
, 
MATCH_C_JAL
, 
MASK_C_JAL
)

1059 
	$DECLARE_INSN
(
c_li
, 
MATCH_C_LI
, 
MASK_C_LI
)

1060 
	$DECLARE_INSN
(
c_lui
, 
MATCH_C_LUI
, 
MASK_C_LUI
)

1061 
	$DECLARE_INSN
(
c_§li
, 
MATCH_C_SRLI
, 
MASK_C_SRLI
)

1062 
	$DECLARE_INSN
(
c_§ai
, 
MATCH_C_SRAI
, 
MASK_C_SRAI
)

1063 
	$DECLARE_INSN
(
c_™di
, 
MATCH_C_ANDI
, 
MASK_C_ANDI
)

1064 
	$DECLARE_INSN
(
c_sub
, 
MATCH_C_SUB
, 
MASK_C_SUB
)

1065 
	$DECLARE_INSN
(
c_x‹
, 
MATCH_C_XOR
, 
MASK_C_XOR
)

1066 
	$DECLARE_INSN
(
c_‹
, 
MATCH_C_OR
, 
MASK_C_OR
)

1067 
	$DECLARE_INSN
(
c_™d
, 
MATCH_C_AND
, 
MASK_C_AND
)

1068 
	$DECLARE_INSN
(
c_subw
, 
MATCH_C_SUBW
, 
MASK_C_SUBW
)

1069 
	$DECLARE_INSN
(
c_addw
, 
MATCH_C_ADDW
, 
MASK_C_ADDW
)

1070 
	$DECLARE_INSN
(
c_j
, 
MATCH_C_J
, 
MASK_C_J
)

1071 
	$DECLARE_INSN
(
c_beqz
, 
MATCH_C_BEQZ
, 
MASK_C_BEQZ
)

1072 
	$DECLARE_INSN
(
c_b√z
, 
MATCH_C_BNEZ
, 
MASK_C_BNEZ
)

1073 
	$DECLARE_INSN
(
c_¶li
, 
MATCH_C_SLLI
, 
MASK_C_SLLI
)

1074 
	$DECLARE_INSN
(
c_Êd•
, 
MATCH_C_FLDSP
, 
MASK_C_FLDSP
)

1075 
	$DECLARE_INSN
(
c_lw•
, 
MATCH_C_LWSP
, 
MASK_C_LWSP
)

1076 
	$DECLARE_INSN
(
c_Êw•
, 
MATCH_C_FLWSP
, 
MASK_C_FLWSP
)

1077 
	$DECLARE_INSN
(
c_mv
, 
MATCH_C_MV
, 
MASK_C_MV
)

1078 
	$DECLARE_INSN
(
c_add
, 
MATCH_C_ADD
, 
MASK_C_ADD
)

1079 
	$DECLARE_INSN
(
c_fsd•
, 
MATCH_C_FSDSP
, 
MASK_C_FSDSP
)

1080 
	$DECLARE_INSN
(
c_sw•
, 
MATCH_C_SWSP
, 
MASK_C_SWSP
)

1081 
	$DECLARE_INSN
(
c_fsw•
, 
MATCH_C_FSWSP
, 
MASK_C_FSWSP
)

1082 
	$DECLARE_INSN
(
cu°om0
, 
MATCH_CUSTOM0
, 
MASK_CUSTOM0
)

1083 
	$DECLARE_INSN
(
cu°om0_rs1
, 
MATCH_CUSTOM0_RS1
, 
MASK_CUSTOM0_RS1
)

1084 
	$DECLARE_INSN
(
cu°om0_rs1_rs2
, 
MATCH_CUSTOM0_RS1_RS2
, 
MASK_CUSTOM0_RS1_RS2
)

1085 
	$DECLARE_INSN
(
cu°om0_rd
, 
MATCH_CUSTOM0_RD
, 
MASK_CUSTOM0_RD
)

1086 
	$DECLARE_INSN
(
cu°om0_rd_rs1
, 
MATCH_CUSTOM0_RD_RS1
, 
MASK_CUSTOM0_RD_RS1
)

1087 
	$DECLARE_INSN
(
cu°om0_rd_rs1_rs2
, 
MATCH_CUSTOM0_RD_RS1_RS2
, 
MASK_CUSTOM0_RD_RS1_RS2
)

1088 
	$DECLARE_INSN
(
cu°om1
, 
MATCH_CUSTOM1
, 
MASK_CUSTOM1
)

1089 
	$DECLARE_INSN
(
cu°om1_rs1
, 
MATCH_CUSTOM1_RS1
, 
MASK_CUSTOM1_RS1
)

1090 
	$DECLARE_INSN
(
cu°om1_rs1_rs2
, 
MATCH_CUSTOM1_RS1_RS2
, 
MASK_CUSTOM1_RS1_RS2
)

1091 
	$DECLARE_INSN
(
cu°om1_rd
, 
MATCH_CUSTOM1_RD
, 
MASK_CUSTOM1_RD
)

1092 
	$DECLARE_INSN
(
cu°om1_rd_rs1
, 
MATCH_CUSTOM1_RD_RS1
, 
MASK_CUSTOM1_RD_RS1
)

1093 
	$DECLARE_INSN
(
cu°om1_rd_rs1_rs2
, 
MATCH_CUSTOM1_RD_RS1_RS2
, 
MASK_CUSTOM1_RD_RS1_RS2
)

1094 
	$DECLARE_INSN
(
cu°om2
, 
MATCH_CUSTOM2
, 
MASK_CUSTOM2
)

1095 
	$DECLARE_INSN
(
cu°om2_rs1
, 
MATCH_CUSTOM2_RS1
, 
MASK_CUSTOM2_RS1
)

1096 
	$DECLARE_INSN
(
cu°om2_rs1_rs2
, 
MATCH_CUSTOM2_RS1_RS2
, 
MASK_CUSTOM2_RS1_RS2
)

1097 
	$DECLARE_INSN
(
cu°om2_rd
, 
MATCH_CUSTOM2_RD
, 
MASK_CUSTOM2_RD
)

1098 
	$DECLARE_INSN
(
cu°om2_rd_rs1
, 
MATCH_CUSTOM2_RD_RS1
, 
MASK_CUSTOM2_RD_RS1
)

1099 
	$DECLARE_INSN
(
cu°om2_rd_rs1_rs2
, 
MATCH_CUSTOM2_RD_RS1_RS2
, 
MASK_CUSTOM2_RD_RS1_RS2
)

1100 
	$DECLARE_INSN
(
cu°om3
, 
MATCH_CUSTOM3
, 
MASK_CUSTOM3
)

1101 
	$DECLARE_INSN
(
cu°om3_rs1
, 
MATCH_CUSTOM3_RS1
, 
MASK_CUSTOM3_RS1
)

1102 
	$DECLARE_INSN
(
cu°om3_rs1_rs2
, 
MATCH_CUSTOM3_RS1_RS2
, 
MASK_CUSTOM3_RS1_RS2
)

1103 
	$DECLARE_INSN
(
cu°om3_rd
, 
MATCH_CUSTOM3_RD
, 
MASK_CUSTOM3_RD
)

1104 
	$DECLARE_INSN
(
cu°om3_rd_rs1
, 
MATCH_CUSTOM3_RD_RS1
, 
MASK_CUSTOM3_RD_RS1
)

1105 
	$DECLARE_INSN
(
cu°om3_rd_rs1_rs2
, 
MATCH_CUSTOM3_RD_RS1_RS2
, 
MASK_CUSTOM3_RD_RS1_RS2
)

1107 #ifde‡
DECLARE_CSR


1108 
	$DECLARE_CSR
(
fÊags
, 
CSR_FFLAGS
)

1109 
	$DECLARE_CSR
(
‰m
, 
CSR_FRM
)

1110 
	$DECLARE_CSR
(
fc§
, 
CSR_FCSR
)

1111 
	$DECLARE_CSR
(
cy˛e
, 
CSR_CYCLE
)

1112 
	$DECLARE_CSR
(
time
, 
CSR_TIME
)

1113 
	$DECLARE_CSR
(
ö°ªt
, 
CSR_INSTRET
)

1114 
	$DECLARE_CSR
(
hpmcou¡î3
, 
CSR_HPMCOUNTER3
)

1115 
	$DECLARE_CSR
(
hpmcou¡î4
, 
CSR_HPMCOUNTER4
)

1116 
	$DECLARE_CSR
(
hpmcou¡î5
, 
CSR_HPMCOUNTER5
)

1117 
	$DECLARE_CSR
(
hpmcou¡î6
, 
CSR_HPMCOUNTER6
)

1118 
	$DECLARE_CSR
(
hpmcou¡î7
, 
CSR_HPMCOUNTER7
)

1119 
	$DECLARE_CSR
(
hpmcou¡î8
, 
CSR_HPMCOUNTER8
)

1120 
	$DECLARE_CSR
(
hpmcou¡î9
, 
CSR_HPMCOUNTER9
)

1121 
	$DECLARE_CSR
(
hpmcou¡î10
, 
CSR_HPMCOUNTER10
)

1122 
	$DECLARE_CSR
(
hpmcou¡î11
, 
CSR_HPMCOUNTER11
)

1123 
	$DECLARE_CSR
(
hpmcou¡î12
, 
CSR_HPMCOUNTER12
)

1124 
	$DECLARE_CSR
(
hpmcou¡î13
, 
CSR_HPMCOUNTER13
)

1125 
	$DECLARE_CSR
(
hpmcou¡î14
, 
CSR_HPMCOUNTER14
)

1126 
	$DECLARE_CSR
(
hpmcou¡î15
, 
CSR_HPMCOUNTER15
)

1127 
	$DECLARE_CSR
(
hpmcou¡î16
, 
CSR_HPMCOUNTER16
)

1128 
	$DECLARE_CSR
(
hpmcou¡î17
, 
CSR_HPMCOUNTER17
)

1129 
	$DECLARE_CSR
(
hpmcou¡î18
, 
CSR_HPMCOUNTER18
)

1130 
	$DECLARE_CSR
(
hpmcou¡î19
, 
CSR_HPMCOUNTER19
)

1131 
	$DECLARE_CSR
(
hpmcou¡î20
, 
CSR_HPMCOUNTER20
)

1132 
	$DECLARE_CSR
(
hpmcou¡î21
, 
CSR_HPMCOUNTER21
)

1133 
	$DECLARE_CSR
(
hpmcou¡î22
, 
CSR_HPMCOUNTER22
)

1134 
	$DECLARE_CSR
(
hpmcou¡î23
, 
CSR_HPMCOUNTER23
)

1135 
	$DECLARE_CSR
(
hpmcou¡î24
, 
CSR_HPMCOUNTER24
)

1136 
	$DECLARE_CSR
(
hpmcou¡î25
, 
CSR_HPMCOUNTER25
)

1137 
	$DECLARE_CSR
(
hpmcou¡î26
, 
CSR_HPMCOUNTER26
)

1138 
	$DECLARE_CSR
(
hpmcou¡î27
, 
CSR_HPMCOUNTER27
)

1139 
	$DECLARE_CSR
(
hpmcou¡î28
, 
CSR_HPMCOUNTER28
)

1140 
	$DECLARE_CSR
(
hpmcou¡î29
, 
CSR_HPMCOUNTER29
)

1141 
	$DECLARE_CSR
(
hpmcou¡î30
, 
CSR_HPMCOUNTER30
)

1142 
	$DECLARE_CSR
(
hpmcou¡î31
, 
CSR_HPMCOUNTER31
)

1143 
	$DECLARE_CSR
(
s°©us
, 
CSR_SSTATUS
)

1144 
	$DECLARE_CSR
(
sõ
, 
CSR_SIE
)

1145 
	$DECLARE_CSR
(
°vec
, 
CSR_STVEC
)

1146 
	$DECLARE_CSR
(
ss¸©ch
, 
CSR_SSCRATCH
)

1147 
	$DECLARE_CSR
(
£pc
, 
CSR_SEPC
)

1148 
	$DECLARE_CSR
(
sˇu£
, 
CSR_SCAUSE
)

1149 
	$DECLARE_CSR
(
sbadaddr
, 
CSR_SBADADDR
)

1150 
	$DECLARE_CSR
(
sù
, 
CSR_SIP
)

1151 
	$DECLARE_CSR
(
•tbr
, 
CSR_SPTBR
)

1152 
	$DECLARE_CSR
(
m°©us
, 
CSR_MSTATUS
)

1153 
	$DECLARE_CSR
(
miß
, 
CSR_MISA
)

1154 
	$DECLARE_CSR
(
medñeg
, 
CSR_MEDELEG
)

1155 
	$DECLARE_CSR
(
midñeg
, 
CSR_MIDELEG
)

1156 
	$DECLARE_CSR
(
mõ
, 
CSR_MIE
)

1157 
	$DECLARE_CSR
(
mtvec
, 
CSR_MTVEC
)

1158 
	$DECLARE_CSR
(
ms¸©ch
, 
CSR_MSCRATCH
)

1159 
	$DECLARE_CSR
(
mïc
, 
CSR_MEPC
)

1160 
	$DECLARE_CSR
(
mˇu£
, 
CSR_MCAUSE
)

1161 
	$DECLARE_CSR
(
mbadaddr
, 
CSR_MBADADDR
)

1162 
	$DECLARE_CSR
(
mù
, 
CSR_MIP
)

1163 
	$DECLARE_CSR
(
t£À˘
, 
CSR_TSELECT
)

1164 
	$DECLARE_CSR
(
td©a1
, 
CSR_TDATA1
)

1165 
	$DECLARE_CSR
(
td©a2
, 
CSR_TDATA2
)

1166 
	$DECLARE_CSR
(
td©a3
, 
CSR_TDATA3
)

1167 
	$DECLARE_CSR
(
dc§
, 
CSR_DCSR
)

1168 
	$DECLARE_CSR
(
dpc
, 
CSR_DPC
)

1169 
	$DECLARE_CSR
(
ds¸©ch
, 
CSR_DSCRATCH
)

1170 
	$DECLARE_CSR
(
mcy˛e
, 
CSR_MCYCLE
)

1171 
	$DECLARE_CSR
(
mö°ªt
, 
CSR_MINSTRET
)

1172 
	$DECLARE_CSR
(
mhpmcou¡î3
, 
CSR_MHPMCOUNTER3
)

1173 
	$DECLARE_CSR
(
mhpmcou¡î4
, 
CSR_MHPMCOUNTER4
)

1174 
	$DECLARE_CSR
(
mhpmcou¡î5
, 
CSR_MHPMCOUNTER5
)

1175 
	$DECLARE_CSR
(
mhpmcou¡î6
, 
CSR_MHPMCOUNTER6
)

1176 
	$DECLARE_CSR
(
mhpmcou¡î7
, 
CSR_MHPMCOUNTER7
)

1177 
	$DECLARE_CSR
(
mhpmcou¡î8
, 
CSR_MHPMCOUNTER8
)

1178 
	$DECLARE_CSR
(
mhpmcou¡î9
, 
CSR_MHPMCOUNTER9
)

1179 
	$DECLARE_CSR
(
mhpmcou¡î10
, 
CSR_MHPMCOUNTER10
)

1180 
	$DECLARE_CSR
(
mhpmcou¡î11
, 
CSR_MHPMCOUNTER11
)

1181 
	$DECLARE_CSR
(
mhpmcou¡î12
, 
CSR_MHPMCOUNTER12
)

1182 
	$DECLARE_CSR
(
mhpmcou¡î13
, 
CSR_MHPMCOUNTER13
)

1183 
	$DECLARE_CSR
(
mhpmcou¡î14
, 
CSR_MHPMCOUNTER14
)

1184 
	$DECLARE_CSR
(
mhpmcou¡î15
, 
CSR_MHPMCOUNTER15
)

1185 
	$DECLARE_CSR
(
mhpmcou¡î16
, 
CSR_MHPMCOUNTER16
)

1186 
	$DECLARE_CSR
(
mhpmcou¡î17
, 
CSR_MHPMCOUNTER17
)

1187 
	$DECLARE_CSR
(
mhpmcou¡î18
, 
CSR_MHPMCOUNTER18
)

1188 
	$DECLARE_CSR
(
mhpmcou¡î19
, 
CSR_MHPMCOUNTER19
)

1189 
	$DECLARE_CSR
(
mhpmcou¡î20
, 
CSR_MHPMCOUNTER20
)

1190 
	$DECLARE_CSR
(
mhpmcou¡î21
, 
CSR_MHPMCOUNTER21
)

1191 
	$DECLARE_CSR
(
mhpmcou¡î22
, 
CSR_MHPMCOUNTER22
)

1192 
	$DECLARE_CSR
(
mhpmcou¡î23
, 
CSR_MHPMCOUNTER23
)

1193 
	$DECLARE_CSR
(
mhpmcou¡î24
, 
CSR_MHPMCOUNTER24
)

1194 
	$DECLARE_CSR
(
mhpmcou¡î25
, 
CSR_MHPMCOUNTER25
)

1195 
	$DECLARE_CSR
(
mhpmcou¡î26
, 
CSR_MHPMCOUNTER26
)

1196 
	$DECLARE_CSR
(
mhpmcou¡î27
, 
CSR_MHPMCOUNTER27
)

1197 
	$DECLARE_CSR
(
mhpmcou¡î28
, 
CSR_MHPMCOUNTER28
)

1198 
	$DECLARE_CSR
(
mhpmcou¡î29
, 
CSR_MHPMCOUNTER29
)

1199 
	$DECLARE_CSR
(
mhpmcou¡î30
, 
CSR_MHPMCOUNTER30
)

1200 
	$DECLARE_CSR
(
mhpmcou¡î31
, 
CSR_MHPMCOUNTER31
)

1201 
	$DECLARE_CSR
(
mucou¡îí
, 
CSR_MUCOUNTEREN
)

1202 
	$DECLARE_CSR
(
mscou¡îí
, 
CSR_MSCOUNTEREN
)

1203 
	$DECLARE_CSR
(
mhpmevít3
, 
CSR_MHPMEVENT3
)

1204 
	$DECLARE_CSR
(
mhpmevít4
, 
CSR_MHPMEVENT4
)

1205 
	$DECLARE_CSR
(
mhpmevít5
, 
CSR_MHPMEVENT5
)

1206 
	$DECLARE_CSR
(
mhpmevít6
, 
CSR_MHPMEVENT6
)

1207 
	$DECLARE_CSR
(
mhpmevít7
, 
CSR_MHPMEVENT7
)

1208 
	$DECLARE_CSR
(
mhpmevít8
, 
CSR_MHPMEVENT8
)

1209 
	$DECLARE_CSR
(
mhpmevít9
, 
CSR_MHPMEVENT9
)

1210 
	$DECLARE_CSR
(
mhpmevít10
, 
CSR_MHPMEVENT10
)

1211 
	$DECLARE_CSR
(
mhpmevít11
, 
CSR_MHPMEVENT11
)

1212 
	$DECLARE_CSR
(
mhpmevít12
, 
CSR_MHPMEVENT12
)

1213 
	$DECLARE_CSR
(
mhpmevít13
, 
CSR_MHPMEVENT13
)

1214 
	$DECLARE_CSR
(
mhpmevít14
, 
CSR_MHPMEVENT14
)

1215 
	$DECLARE_CSR
(
mhpmevít15
, 
CSR_MHPMEVENT15
)

1216 
	$DECLARE_CSR
(
mhpmevít16
, 
CSR_MHPMEVENT16
)

1217 
	$DECLARE_CSR
(
mhpmevít17
, 
CSR_MHPMEVENT17
)

1218 
	$DECLARE_CSR
(
mhpmevít18
, 
CSR_MHPMEVENT18
)

1219 
	$DECLARE_CSR
(
mhpmevít19
, 
CSR_MHPMEVENT19
)

1220 
	$DECLARE_CSR
(
mhpmevít20
, 
CSR_MHPMEVENT20
)

1221 
	$DECLARE_CSR
(
mhpmevít21
, 
CSR_MHPMEVENT21
)

1222 
	$DECLARE_CSR
(
mhpmevít22
, 
CSR_MHPMEVENT22
)

1223 
	$DECLARE_CSR
(
mhpmevít23
, 
CSR_MHPMEVENT23
)

1224 
	$DECLARE_CSR
(
mhpmevít24
, 
CSR_MHPMEVENT24
)

1225 
	$DECLARE_CSR
(
mhpmevít25
, 
CSR_MHPMEVENT25
)

1226 
	$DECLARE_CSR
(
mhpmevít26
, 
CSR_MHPMEVENT26
)

1227 
	$DECLARE_CSR
(
mhpmevít27
, 
CSR_MHPMEVENT27
)

1228 
	$DECLARE_CSR
(
mhpmevít28
, 
CSR_MHPMEVENT28
)

1229 
	$DECLARE_CSR
(
mhpmevít29
, 
CSR_MHPMEVENT29
)

1230 
	$DECLARE_CSR
(
mhpmevít30
, 
CSR_MHPMEVENT30
)

1231 
	$DECLARE_CSR
(
mhpmevít31
, 
CSR_MHPMEVENT31
)

1232 
	$DECLARE_CSR
(
mvíd‹id
, 
CSR_MVENDORID
)

1233 
	$DECLARE_CSR
(
m¨chid
, 
CSR_MARCHID
)

1234 
	$DECLARE_CSR
(
mimpid
, 
CSR_MIMPID
)

1235 
	$DECLARE_CSR
(
mh¨tid
, 
CSR_MHARTID
)

1236 
	$DECLARE_CSR
(
cy˛eh
, 
CSR_CYCLEH
)

1237 
	$DECLARE_CSR
(
timeh
, 
CSR_TIMEH
)

1238 
	$DECLARE_CSR
(
ö°ªth
, 
CSR_INSTRETH
)

1239 
	$DECLARE_CSR
(
hpmcou¡î3h
, 
CSR_HPMCOUNTER3H
)

1240 
	$DECLARE_CSR
(
hpmcou¡î4h
, 
CSR_HPMCOUNTER4H
)

1241 
	$DECLARE_CSR
(
hpmcou¡î5h
, 
CSR_HPMCOUNTER5H
)

1242 
	$DECLARE_CSR
(
hpmcou¡î6h
, 
CSR_HPMCOUNTER6H
)

1243 
	$DECLARE_CSR
(
hpmcou¡î7h
, 
CSR_HPMCOUNTER7H
)

1244 
	$DECLARE_CSR
(
hpmcou¡î8h
, 
CSR_HPMCOUNTER8H
)

1245 
	$DECLARE_CSR
(
hpmcou¡î9h
, 
CSR_HPMCOUNTER9H
)

1246 
	$DECLARE_CSR
(
hpmcou¡î10h
, 
CSR_HPMCOUNTER10H
)

1247 
	$DECLARE_CSR
(
hpmcou¡î11h
, 
CSR_HPMCOUNTER11H
)

1248 
	$DECLARE_CSR
(
hpmcou¡î12h
, 
CSR_HPMCOUNTER12H
)

1249 
	$DECLARE_CSR
(
hpmcou¡î13h
, 
CSR_HPMCOUNTER13H
)

1250 
	$DECLARE_CSR
(
hpmcou¡î14h
, 
CSR_HPMCOUNTER14H
)

1251 
	$DECLARE_CSR
(
hpmcou¡î15h
, 
CSR_HPMCOUNTER15H
)

1252 
	$DECLARE_CSR
(
hpmcou¡î16h
, 
CSR_HPMCOUNTER16H
)

1253 
	$DECLARE_CSR
(
hpmcou¡î17h
, 
CSR_HPMCOUNTER17H
)

1254 
	$DECLARE_CSR
(
hpmcou¡î18h
, 
CSR_HPMCOUNTER18H
)

1255 
	$DECLARE_CSR
(
hpmcou¡î19h
, 
CSR_HPMCOUNTER19H
)

1256 
	$DECLARE_CSR
(
hpmcou¡î20h
, 
CSR_HPMCOUNTER20H
)

1257 
	$DECLARE_CSR
(
hpmcou¡î21h
, 
CSR_HPMCOUNTER21H
)

1258 
	$DECLARE_CSR
(
hpmcou¡î22h
, 
CSR_HPMCOUNTER22H
)

1259 
	$DECLARE_CSR
(
hpmcou¡î23h
, 
CSR_HPMCOUNTER23H
)

1260 
	$DECLARE_CSR
(
hpmcou¡î24h
, 
CSR_HPMCOUNTER24H
)

1261 
	$DECLARE_CSR
(
hpmcou¡î25h
, 
CSR_HPMCOUNTER25H
)

1262 
	$DECLARE_CSR
(
hpmcou¡î26h
, 
CSR_HPMCOUNTER26H
)

1263 
	$DECLARE_CSR
(
hpmcou¡î27h
, 
CSR_HPMCOUNTER27H
)

1264 
	$DECLARE_CSR
(
hpmcou¡î28h
, 
CSR_HPMCOUNTER28H
)

1265 
	$DECLARE_CSR
(
hpmcou¡î29h
, 
CSR_HPMCOUNTER29H
)

1266 
	$DECLARE_CSR
(
hpmcou¡î30h
, 
CSR_HPMCOUNTER30H
)

1267 
	$DECLARE_CSR
(
hpmcou¡î31h
, 
CSR_HPMCOUNTER31H
)

1268 
	$DECLARE_CSR
(
mcy˛eh
, 
CSR_MCYCLEH
)

1269 
	$DECLARE_CSR
(
mö°ªth
, 
CSR_MINSTRETH
)

1270 
	$DECLARE_CSR
(
mhpmcou¡î3h
, 
CSR_MHPMCOUNTER3H
)

1271 
	$DECLARE_CSR
(
mhpmcou¡î4h
, 
CSR_MHPMCOUNTER4H
)

1272 
	$DECLARE_CSR
(
mhpmcou¡î5h
, 
CSR_MHPMCOUNTER5H
)

1273 
	$DECLARE_CSR
(
mhpmcou¡î6h
, 
CSR_MHPMCOUNTER6H
)

1274 
	$DECLARE_CSR
(
mhpmcou¡î7h
, 
CSR_MHPMCOUNTER7H
)

1275 
	$DECLARE_CSR
(
mhpmcou¡î8h
, 
CSR_MHPMCOUNTER8H
)

1276 
	$DECLARE_CSR
(
mhpmcou¡î9h
, 
CSR_MHPMCOUNTER9H
)

1277 
	$DECLARE_CSR
(
mhpmcou¡î10h
, 
CSR_MHPMCOUNTER10H
)

1278 
	$DECLARE_CSR
(
mhpmcou¡î11h
, 
CSR_MHPMCOUNTER11H
)

1279 
	$DECLARE_CSR
(
mhpmcou¡î12h
, 
CSR_MHPMCOUNTER12H
)

1280 
	$DECLARE_CSR
(
mhpmcou¡î13h
, 
CSR_MHPMCOUNTER13H
)

1281 
	$DECLARE_CSR
(
mhpmcou¡î14h
, 
CSR_MHPMCOUNTER14H
)

1282 
	$DECLARE_CSR
(
mhpmcou¡î15h
, 
CSR_MHPMCOUNTER15H
)

1283 
	$DECLARE_CSR
(
mhpmcou¡î16h
, 
CSR_MHPMCOUNTER16H
)

1284 
	$DECLARE_CSR
(
mhpmcou¡î17h
, 
CSR_MHPMCOUNTER17H
)

1285 
	$DECLARE_CSR
(
mhpmcou¡î18h
, 
CSR_MHPMCOUNTER18H
)

1286 
	$DECLARE_CSR
(
mhpmcou¡î19h
, 
CSR_MHPMCOUNTER19H
)

1287 
	$DECLARE_CSR
(
mhpmcou¡î20h
, 
CSR_MHPMCOUNTER20H
)

1288 
	$DECLARE_CSR
(
mhpmcou¡î21h
, 
CSR_MHPMCOUNTER21H
)

1289 
	$DECLARE_CSR
(
mhpmcou¡î22h
, 
CSR_MHPMCOUNTER22H
)

1290 
	$DECLARE_CSR
(
mhpmcou¡î23h
, 
CSR_MHPMCOUNTER23H
)

1291 
	$DECLARE_CSR
(
mhpmcou¡î24h
, 
CSR_MHPMCOUNTER24H
)

1292 
	$DECLARE_CSR
(
mhpmcou¡î25h
, 
CSR_MHPMCOUNTER25H
)

1293 
	$DECLARE_CSR
(
mhpmcou¡î26h
, 
CSR_MHPMCOUNTER26H
)

1294 
	$DECLARE_CSR
(
mhpmcou¡î27h
, 
CSR_MHPMCOUNTER27H
)

1295 
	$DECLARE_CSR
(
mhpmcou¡î28h
, 
CSR_MHPMCOUNTER28H
)

1296 
	$DECLARE_CSR
(
mhpmcou¡î29h
, 
CSR_MHPMCOUNTER29H
)

1297 
	$DECLARE_CSR
(
mhpmcou¡î30h
, 
CSR_MHPMCOUNTER30H
)

1298 
	$DECLARE_CSR
(
mhpmcou¡î31h
, 
CSR_MHPMCOUNTER31H
)

1300 #ifde‡
DECLARE_CAUSE


1301 
	`DECLARE_CAUSE
("mißlig√d fëch", 
CAUSE_MISALIGNED_FETCH
)

1302 
	`DECLARE_CAUSE
("Áu… fëch", 
CAUSE_FAULT_FETCH
)

1303 
	`DECLARE_CAUSE
("ûÀgÆ in°ru˘i⁄", 
CAUSE_ILLEGAL_INSTRUCTION
)

1304 
	`DECLARE_CAUSE
("bªakpoöt", 
CAUSE_BREAKPOINT
)

1305 
	`DECLARE_CAUSE
("mißlig√dÜﬂd", 
CAUSE_MISALIGNED_LOAD
)

1306 
	`DECLARE_CAUSE
("Áu…Üﬂd", 
CAUSE_FAULT_LOAD
)

1307 
	`DECLARE_CAUSE
("mißlig√d st‹e", 
CAUSE_MISALIGNED_STORE
)

1308 
	`DECLARE_CAUSE
("Áu… st‹e", 
CAUSE_FAULT_STORE
)

1309 
	`DECLARE_CAUSE
("u£r_eˇŒ", 
CAUSE_USER_ECALL
)

1310 
	`DECLARE_CAUSE
("su≥rvis‹_eˇŒ", 
CAUSE_SUPERVISOR_ECALL
)

1311 
	`DECLARE_CAUSE
("hy≥rvis‹_eˇŒ", 
CAUSE_HYPERVISOR_ECALL
)

1312 
	`DECLARE_CAUSE
("machöe_eˇŒ", 
CAUSE_MACHINE_ECALL
)

	@machine/fp_asm.S

3 #ifde‡
__riscv_Êí


5 #i‡
__riscv_Êí
 != 64

6 #îr‹ 
sögÀ
-
⁄ly
 
is
 
nŸ
 
suµ‹ãd


9 
	#gë_f32
(
which
Ë
fmv
.
x
.
s
 
a0
, which; 
jr
 
t0


	)

10 
	#put_f32
(
which
Ë
fmv
.
s
.
x
 which, 
a0
; 
jr
 
t0


	)

11 #i‡
__riscv_xÀn
 == 64

12 
	#gë_f64
(
which
Ë
fmv
.
x
.
d
 
a0
, which; 
jr
 
t0


	)

13 
	#put_f64
(
which
Ë
fmv
.
d
.
x
 which, 
a0
; 
jr
 
t0


	)

15 
	#gë_f64
(
which
Ë
fsd
 which, 0(
a0
); 
jr
 
t0


	)

16 
	#put_f64
(
which
Ë
Êd
 which, 0(
a0
); 
jr
 
t0


	)

19 .
	gãxt


20 .
›ti⁄
 
	gn‹vc


21 .
globl
 
gë_f32_ªg


22 
	ggë_f32_ªg
:

23 
	$gë_f32
(
f0
)

24 
	$gë_f32
(
f1
)

25 
	$gë_f32
(
f2
)

26 
	$gë_f32
(
f3
)

27 
	$gë_f32
(
f4
)

28 
	$gë_f32
(
f5
)

29 
	$gë_f32
(
f6
)

30 
	$gë_f32
(
f7
)

31 
	$gë_f32
(
f8
)

32 
	$gë_f32
(
f9
)

33 
	$gë_f32
(
f10
)

34 
	$gë_f32
(
f11
)

35 
	$gë_f32
(
f12
)

36 
	$gë_f32
(
f13
)

37 
	$gë_f32
(
f14
)

38 
	$gë_f32
(
f15
)

39 
	$gë_f32
(
f16
)

40 
	$gë_f32
(
f17
)

41 
	$gë_f32
(
f18
)

42 
	$gë_f32
(
f19
)

43 
	$gë_f32
(
f20
)

44 
	$gë_f32
(
f21
)

45 
	$gë_f32
(
f22
)

46 
	$gë_f32
(
f23
)

47 
	$gë_f32
(
f24
)

48 
	$gë_f32
(
f25
)

49 
	$gë_f32
(
f26
)

50 
	$gë_f32
(
f27
)

51 
	$gë_f32
(
f28
)

52 
	$gë_f32
(
f29
)

53 
	$gë_f32
(
f30
)

54 
	`gë_f32
(
f31
)

56 .
ãxt


57 .
globl
 
put_f32_ªg


58 
put_f32_ªg
:

59 
	$put_f32
(
f0
)

60 
	$put_f32
(
f1
)

61 
	$put_f32
(
f2
)

62 
	$put_f32
(
f3
)

63 
	$put_f32
(
f4
)

64 
	$put_f32
(
f5
)

65 
	$put_f32
(
f6
)

66 
	$put_f32
(
f7
)

67 
	$put_f32
(
f8
)

68 
	$put_f32
(
f9
)

69 
	$put_f32
(
f10
)

70 
	$put_f32
(
f11
)

71 
	$put_f32
(
f12
)

72 
	$put_f32
(
f13
)

73 
	$put_f32
(
f14
)

74 
	$put_f32
(
f15
)

75 
	$put_f32
(
f16
)

76 
	$put_f32
(
f17
)

77 
	$put_f32
(
f18
)

78 
	$put_f32
(
f19
)

79 
	$put_f32
(
f20
)

80 
	$put_f32
(
f21
)

81 
	$put_f32
(
f22
)

82 
	$put_f32
(
f23
)

83 
	$put_f32
(
f24
)

84 
	$put_f32
(
f25
)

85 
	$put_f32
(
f26
)

86 
	$put_f32
(
f27
)

87 
	$put_f32
(
f28
)

88 
	$put_f32
(
f29
)

89 
	$put_f32
(
f30
)

90 
	`put_f32
(
f31
)

92 .
ãxt


93 .
globl
 
gë_f64_ªg


94 
gë_f64_ªg
:

95 
	$gë_f64
(
f0
)

96 
	$gë_f64
(
f1
)

97 
	$gë_f64
(
f2
)

98 
	$gë_f64
(
f3
)

99 
	$gë_f64
(
f4
)

100 
	$gë_f64
(
f5
)

101 
	$gë_f64
(
f6
)

102 
	$gë_f64
(
f7
)

103 
	$gë_f64
(
f8
)

104 
	$gë_f64
(
f9
)

105 
	$gë_f64
(
f10
)

106 
	$gë_f64
(
f11
)

107 
	$gë_f64
(
f12
)

108 
	$gë_f64
(
f13
)

109 
	$gë_f64
(
f14
)

110 
	$gë_f64
(
f15
)

111 
	$gë_f64
(
f16
)

112 
	$gë_f64
(
f17
)

113 
	$gë_f64
(
f18
)

114 
	$gë_f64
(
f19
)

115 
	$gë_f64
(
f20
)

116 
	$gë_f64
(
f21
)

117 
	$gë_f64
(
f22
)

118 
	$gë_f64
(
f23
)

119 
	$gë_f64
(
f24
)

120 
	$gë_f64
(
f25
)

121 
	$gë_f64
(
f26
)

122 
	$gë_f64
(
f27
)

123 
	$gë_f64
(
f28
)

124 
	$gë_f64
(
f29
)

125 
	$gë_f64
(
f30
)

126 
	`gë_f64
(
f31
)

128 .
ãxt


129 .
globl
 
put_f64_ªg


130 
put_f64_ªg
:

131 
	$put_f64
(
f0
)

132 
	$put_f64
(
f1
)

133 
	$put_f64
(
f2
)

134 
	$put_f64
(
f3
)

135 
	$put_f64
(
f4
)

136 
	$put_f64
(
f5
)

137 
	$put_f64
(
f6
)

138 
	$put_f64
(
f7
)

139 
	$put_f64
(
f8
)

140 
	$put_f64
(
f9
)

141 
	$put_f64
(
f10
)

142 
	$put_f64
(
f11
)

143 
	$put_f64
(
f12
)

144 
	$put_f64
(
f13
)

145 
	$put_f64
(
f14
)

146 
	$put_f64
(
f15
)

147 
	$put_f64
(
f16
)

148 
	$put_f64
(
f17
)

149 
	$put_f64
(
f18
)

150 
	$put_f64
(
f19
)

151 
	$put_f64
(
f20
)

152 
	$put_f64
(
f21
)

153 
	$put_f64
(
f22
)

154 
	$put_f64
(
f23
)

155 
	$put_f64
(
f24
)

156 
	$put_f64
(
f25
)

157 
	$put_f64
(
f26
)

158 
	$put_f64
(
f27
)

159 
	$put_f64
(
f28
)

160 
	$put_f64
(
f29
)

161 
	$put_f64
(
f30
)

162 
	$put_f64
(
f31
)

	@machine/fp_emulation.c

1 
	~"Â_emuœti⁄.h
"

2 
	~"u≈rivûeged_mem‹y.h
"

3 
	~"so·Êﬂt.h
"

4 
	~"c⁄fig.h
"

6 
	$DECLARE_EMULATION_FUNC
(
emuœã_Â
)

8 
	`asm
 (".pushsection .rodata\n"

45 i‡(
	`u∆ikñy
((
m°©us
 & 
MSTATUS_FS
) == 0))

46  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

48 
uöt32_t
 
Â_emuœti⁄_èbÀ
[];

49 
uöt32_t
* 
pf
 = (*)
Â_emuœti⁄_èbÀ
 + ((
ö¢
 >> 25) & 0x7c);

50 
emuœti⁄_func
 
f
 = (emuœti⁄_func)(
uöçå_t
)*
pf
;

52 
	`SETUP_STATIC_ROUNDING
(
ö¢
);

53  
	`f
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

54 
	}
}

56 
	$emuœã_™y_Ádd
(
uöçå_t
* 
ªgs
, uöçå_à
mˇu£
, uöçå_à
mïc
, uöçå_à
m°©us
, 
ö¢_t
 
ö¢
, 
öt32_t
 
√g_b
)

58 i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_S
) {

59 
uöt32_t
 
rs1
 = 
	`GET_F32_RS1
(
ö¢
, 
ªgs
);

60 
uöt32_t
 
rs2
 = 
	`GET_F32_RS2
(
ö¢
, 
ªgs
Ë^ 
√g_b
;

61 
	`SET_F32_RD
(
ö¢
, 
ªgs
, 
	`f32_add
(
rs1
, 
rs2
));

62 } i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_D
) {

63 
uöt64_t
 
rs1
 = 
	`GET_F64_RS1
(
ö¢
, 
ªgs
);

64 
uöt64_t
 
rs2
 = 
	`GET_F64_RS2
(
ö¢
, 
ªgs
Ë^ ((uöt64_t)
√g_b
 << 32);

65 
	`SET_F64_RD
(
ö¢
, 
ªgs
, 
	`f64_add
(
rs1
, 
rs2
));

67  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

69 
	}
}

71 
	$DECLARE_EMULATION_FUNC
(
emuœã_Ádd
)

73  
	`emuœã_™y_Ádd
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
, 0);

74 
	}
}

76 
	$DECLARE_EMULATION_FUNC
(
emuœã_fsub
)

78  
	`emuœã_™y_Ádd
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
, 
INT32_MIN
);

79 
	}
}

81 
	$DECLARE_EMULATION_FUNC
(
emuœã_fmul
)

83 i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_S
) {

84 
uöt32_t
 
rs1
 = 
	`GET_F32_RS1
(
ö¢
, 
ªgs
);

85 
uöt32_t
 
rs2
 = 
	`GET_F32_RS2
(
ö¢
, 
ªgs
);

86 
	`SET_F32_RD
(
ö¢
, 
ªgs
, 
	`f32_mul
(
rs1
, 
rs2
));

87 } i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_D
) {

88 
uöt64_t
 
rs1
 = 
	`GET_F64_RS1
(
ö¢
, 
ªgs
);

89 
uöt64_t
 
rs2
 = 
	`GET_F64_RS2
(
ö¢
, 
ªgs
);

90 
	`SET_F64_RD
(
ö¢
, 
ªgs
, 
	`f64_mul
(
rs1
, 
rs2
));

92  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

94 
	}
}

96 
	$DECLARE_EMULATION_FUNC
(
emuœã_fdiv
)

98 i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_S
) {

99 
uöt32_t
 
rs1
 = 
	`GET_F32_RS1
(
ö¢
, 
ªgs
);

100 
uöt32_t
 
rs2
 = 
	`GET_F32_RS2
(
ö¢
, 
ªgs
);

101 
	`SET_F32_RD
(
ö¢
, 
ªgs
, 
	`f32_div
(
rs1
, 
rs2
));

102 } i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_D
) {

103 
uöt64_t
 
rs1
 = 
	`GET_F64_RS1
(
ö¢
, 
ªgs
);

104 
uöt64_t
 
rs2
 = 
	`GET_F64_RS2
(
ö¢
, 
ªgs
);

105 
	`SET_F64_RD
(
ö¢
, 
ªgs
, 
	`f64_div
(
rs1
, 
rs2
));

107  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

109 
	}
}

111 
	$DECLARE_EMULATION_FUNC
(
emuœã_fsqπ
)

113 i‡((
ö¢
 >> 20) & 0x1f)

114  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

116 i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_S
) {

117 
	`SET_F32_RD
(
ö¢
, 
ªgs
, 
	`f32_sqπ
(
	`GET_F32_RS1
(insn,Ñegs)));

118 } i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_D
) {

119 
	`SET_F64_RD
(
ö¢
, 
ªgs
, 
	`f64_sqπ
(
	`GET_F64_RS1
(insn,Ñegs)));

121  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

123 
	}
}

125 
	$DECLARE_EMULATION_FUNC
(
emuœã_fsgnj
)

127 
rm
 = 
	`GET_RM
(
ö¢
);

128 i‡(
rm
 >= 3)

129  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

131 
	#DO_FSGNJ
(
rs1
, 
rs2
, 
rm
) ({ \

132 
	`ty≥of
(
rs1
Ë
rs1_sign
 = (rs1) >> (8*(rs1)-1); \

133 
	`ty≥of
(
rs1
Ë
rs2_sign
 = (
rs2
) >> (8*(rs1)-1); \

134 
rs1_sign
 &(
rm
) >> 1; \

135 
rs1_sign
 ^(
rm
Ë^ 
rs2_sign
; \

136 ((
rs1
Ë<< 1 >> 1Ë| (
rs1_sign
 << (8*‘s1)-1)); })

	)

138 i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_S
) {

139 
uöt32_t
 
rs1
 = 
	`GET_F32_RS1
(
ö¢
, 
ªgs
);

140 
uöt32_t
 
rs2
 = 
	`GET_F32_RS2
(
ö¢
, 
ªgs
);

141 
	`SET_F32_RD
(
ö¢
, 
ªgs
, 
	`DO_FSGNJ
(
rs1
, 
rs2
, 
rm
));

142 } i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_D
) {

143 
uöt64_t
 
rs1
 = 
	`GET_F64_RS1
(
ö¢
, 
ªgs
);

144 
uöt64_t
 
rs2
 = 
	`GET_F64_RS2
(
ö¢
, 
ªgs
);

145 
	`SET_F64_RD
(
ö¢
, 
ªgs
, 
	`DO_FSGNJ
(
rs1
, 
rs2
, 
rm
));

147  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

149 
	}
}

151 
	$DECLARE_EMULATION_FUNC
(
emuœã_fmö
)

153 
rm
 = 
	`GET_RM
(
ö¢
);

154 i‡(
rm
 >= 2)

155  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

157 i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_S
) {

158 
uöt32_t
 
rs1
 = 
	`GET_F32_RS1
(
ö¢
, 
ªgs
);

159 
uöt32_t
 
rs2
 = 
	`GET_F32_RS2
(
ö¢
, 
ªgs
);

160 
uöt32_t
 
¨g1
 = 
rm
 ? 
rs2
 : 
rs1
;

161 
uöt32_t
 
¨g2
 = 
rm
 ? 
rs1
 : 
rs2
;

162 
u£_rs1
 = 
	`f32_…_quõt
(
¨g1
, 
¨g2
Ë|| 
	`isNaNF32UI
(
rs2
);

163 
	`SET_F32_RD
(
ö¢
, 
ªgs
, 
u£_rs1
 ? 
rs1
 : 
rs2
);

164 } i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_D
) {

165 
uöt64_t
 
rs1
 = 
	`GET_F64_RS1
(
ö¢
, 
ªgs
);

166 
uöt64_t
 
rs2
 = 
	`GET_F64_RS2
(
ö¢
, 
ªgs
);

167 
uöt64_t
 
¨g1
 = 
rm
 ? 
rs2
 : 
rs1
;

168 
uöt64_t
 
¨g2
 = 
rm
 ? 
rs1
 : 
rs2
;

169 
u£_rs1
 = 
	`f64_…_quõt
(
¨g1
, 
¨g2
Ë|| 
	`isNaNF64UI
(
rs2
);

170 
	`SET_F64_RD
(
ö¢
, 
ªgs
, 
u£_rs1
 ? 
rs1
 : 
rs2
);

172  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

174 
	}
}

176 
	$DECLARE_EMULATION_FUNC
(
emuœã_fcvt_ff
)

178 
rs2_num
 = (
ö¢
 >> 20) & 0x1f;

179 i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_S
) {

180 i‡(
rs2_num
 != 1)

181  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

182 
	`SET_F32_RD
(
ö¢
, 
ªgs
, 
	`f64_to_f32
(
	`GET_F64_RS1
(insn,Ñegs)));

183 } i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_D
) {

184 i‡(
rs2_num
 != 0)

185  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

186 
	`SET_F64_RD
(
ö¢
, 
ªgs
, 
	`f32_to_f64
(
	`GET_F32_RS1
(insn,Ñegs)));

188  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

190 
	}
}

192 
	$DECLARE_EMULATION_FUNC
(
emuœã_fcvt_fi
)

194 i‡(
	`GET_PRECISION
(
ö¢
Ë!
PRECISION_S
 && GET_PRECISION(ö¢Ë!
PRECISION_D
)

195  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

197 
√g©ive
 = 0;

198 
uöt64_t
 
uöt_vÆ
 = 
	`GET_RS1
(
ö¢
, 
ªgs
);

200 (
ö¢
 >> 20) & 0x1f)

203 
√g©ive
 = (
öt32_t
)
uöt_vÆ
 < 0;

204 
uöt_vÆ
 = 
√g©ive
 ? -(
öt32_t
)uint_val : (int32_t)uint_val;

207 
uöt_vÆ
 = (
uöt32_t
)uint_val;

209 #i‡
__riscv_xÀn
 == 64

211 
√g©ive
 = (
öt64_t
)
uöt_vÆ
 < 0;

212 
uöt_vÆ
 = 
√g©ive
 ? -uint_val : uint_val;

217  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

220 
uöt64_t
 
Êﬂt64
 = 
	`ui64_to_f64
(
uöt_vÆ
);

221 i‡(
√g©ive
)

222 
Êﬂt64
 ^
INT64_MIN
;

224 i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_S
)

225 
	`SET_F32_RD
(
ö¢
, 
ªgs
, 
	`f64_to_f32
(
Êﬂt64
));

227 
	`SET_F64_RD
(
ö¢
, 
ªgs
, 
Êﬂt64
);

228 
	}
}

230 
	$DECLARE_EMULATION_FUNC
(
emuœã_fcvt_if
)

232 
rs2_num
 = (
ö¢
 >> 20) & 0x1f;

233 #i‡
__riscv_xÀn
 == 64

234 i‡(
rs2_num
 >= 4)

235  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

237 i‡(
rs2_num
 >= 2)

238  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

241 
öt64_t
 
Êﬂt64
;

242 i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_S
)

243 
Êﬂt64
 = 
	`f32_to_f64
(
	`GET_F32_RS1
(
ö¢
, 
ªgs
));

244 i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_D
)

245 
Êﬂt64
 = 
	`GET_F64_RS1
(
ö¢
, 
ªgs
);

247  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

249 
√g©ive
 = 0;

250 i‡(
Êﬂt64
 < 0) {

251 
√g©ive
 = 1;

252 
Êﬂt64
 ^
INT64_MIN
;

254 
uöt64_t
 
uöt_vÆ
 = 
	`f64_to_ui64
(
Êﬂt64
, 
so·Êﬂt_roundögMode
, 
åue
);

255 
uöt64_t
 
ªsu…
, 
limô
, 
limô_ªsu…
;

257 
rs2_num
)

260 i‡(
√g©ive
) {

261 
ªsu…
 = (
öt32_t
)-
uöt_vÆ
;

262 
limô_ªsu…
 = 
limô
 = (
uöt32_t
)
INT32_MIN
;

264 
ªsu…
 = (
öt32_t
)
uöt_vÆ
;

265 
limô_ªsu…
 = 
limô
 = 
INT32_MAX
;

270 
limô
 = 
limô_ªsu…
 = 
UINT32_MAX
;

271 i‡(
√g©ive
)

272 
ªsu…
 = 
limô
 = 0;

274 
ªsu…
 = (
uöt32_t
)
uöt_vÆ
;

278 i‡(
√g©ive
) {

279 
ªsu…
 = (
öt64_t
)-
uöt_vÆ
;

280 
limô_ªsu…
 = 
limô
 = (
uöt64_t
)
INT64_MIN
;

282 
ªsu…
 = (
öt64_t
)
uöt_vÆ
;

283 
limô_ªsu…
 = 
limô
 = 
INT64_MAX
;

288 
limô
 = 
limô_ªsu…
 = 
UINT64_MAX
;

289 i‡(
√g©ive
)

290 
ªsu…
 = 
limô
 = 0;

292 
ªsu…
 = (
uöt64_t
)
uöt_vÆ
;

296 
	`__buûtö_uƒóchabÀ
();

299 i‡(
uöt_vÆ
 > 
limô
) {

300 
ªsu…
 = 
limô_ªsu…
;

301 
	`so·Êﬂt_øi£Fœgs
(
so·Êﬂt_Êag_övÆid
);

304 
	`SET_FS_DIRTY
();

305 
	`SET_RD
(
ö¢
, 
ªgs
, 
ªsu…
);

306 
	}
}

308 
	$DECLARE_EMULATION_FUNC
(
emuœã_fcmp
)

310 
rm
 = 
	`GET_RM
(
ö¢
);

311 i‡(
rm
 >= 3)

312  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

314 
uöçå_t
 
ªsu…
;

315 i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_S
) {

316 
uöt32_t
 
rs1
 = 
	`GET_F32_RS1
(
ö¢
, 
ªgs
);

317 
uöt32_t
 
rs2
 = 
	`GET_F32_RS2
(
ö¢
, 
ªgs
);

318 i‡(
rm
 != 1)

319 
ªsu…
 = 
	`f32_eq
(
rs1
, 
rs2
);

320 i‡(
rm
 =1 || (rm =0 && !
ªsu…
))

321 
ªsu…
 = 
	`f32_…
(
rs1
, 
rs2
);

322 
suc˚ss
;

323 } i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_D
) {

324 
uöt64_t
 
rs1
 = 
	`GET_F64_RS1
(
ö¢
, 
ªgs
);

325 
uöt64_t
 
rs2
 = 
	`GET_F64_RS2
(
ö¢
, 
ªgs
);

326 i‡(
rm
 != 1)

327 
ªsu…
 = 
	`f64_eq
(
rs1
, 
rs2
);

328 i‡(
rm
 =1 || (rm =0 && !
ªsu…
))

329 
ªsu…
 = 
	`f64_…
(
rs1
, 
rs2
);

330 
suc˚ss
;

332  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

333 
suc˚ss
:

334 
	`SET_RD
(
ö¢
, 
ªgs
, 
ªsu…
);

335 
	}
}

337 
	$DECLARE_EMULATION_FUNC
(
emuœã_fmv_if
)

339 
uöçå_t
 
ªsu…
;

340 i‡((
ö¢
 >> 20) & 0x1f)

341  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

343 i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_S
) {

344 
ªsu…
 = 
	`GET_F32_RS1
(
ö¢
, 
ªgs
);

345 
	`GET_RM
(
ö¢
)) {

346 
	`GET_RM
(
MATCH_FMV_X_S
): ;

347 
	`GET_RM
(
MATCH_FCLASS_S
): 
ªsu…
 = 
	`f32_˛assify
(result); ;

348 :  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

350 } i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_D
) {

351 
ªsu…
 = 
	`GET_F64_RS1
(
ö¢
, 
ªgs
);

352 
	`GET_RM
(
ö¢
)) {

353 
	`GET_RM
(
MATCH_FMV_X_D
): ;

354 
	`GET_RM
(
MATCH_FCLASS_D
): 
ªsu…
 = 
	`f64_˛assify
(result); ;

355 :  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

358  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

361 
	`SET_RD
(
ö¢
, 
ªgs
, 
ªsu…
);

362 
	}
}

364 
	$DECLARE_EMULATION_FUNC
(
emuœã_fmv_fi
)

366 
uöçå_t
 
rs1
 = 
	`GET_RS1
(
ö¢
, 
ªgs
);

368 i‡((
ö¢
 & 
MASK_FMV_S_X
Ë=
MATCH_FMV_S_X
)

369 
	`SET_F32_RD
(
ö¢
, 
ªgs
, 
rs1
);

370 #i‡
__riscv_xÀn
 == 64

371 i‡((
ö¢
 & 
MASK_FMV_D_X
Ë=
MATCH_FMV_D_X
)

372 
	`SET_F64_RD
(
ö¢
, 
ªgs
, 
rs1
);

375  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

376 
	}
}

378 
	$DECLARE_EMULATION_FUNC
(
emuœã_fmadd
)

381 i‡(
	`u∆ikñy
((
m°©us
 & 
MSTATUS_FS
) == 0))

382  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

384 
›
 = (
ö¢
 >> 2) & 3;

385 
	`SETUP_STATIC_ROUNDING
(
ö¢
);

386 i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_S
) {

387 
uöt32_t
 
rs1
 = 
	`GET_F32_RS1
(
ö¢
, 
ªgs
);

388 
uöt32_t
 
rs2
 = 
	`GET_F32_RS2
(
ö¢
, 
ªgs
);

389 
uöt32_t
 
rs3
 = 
	`GET_F32_RS3
(
ö¢
, 
ªgs
);

390 
	`SET_F32_RD
(
ö¢
, 
ªgs
, 
	`so·Êﬂt_mulAddF32
(
›
, 
rs1
, 
rs2
, 
rs3
));

391 } i‡(
	`GET_PRECISION
(
ö¢
Ë=
PRECISION_D
) {

392 
uöt64_t
 
rs1
 = 
	`GET_F64_RS1
(
ö¢
, 
ªgs
);

393 
uöt64_t
 
rs2
 = 
	`GET_F64_RS2
(
ö¢
, 
ªgs
);

394 
uöt64_t
 
rs3
 = 
	`GET_F64_RS3
(
ö¢
, 
ªgs
);

395 
	`SET_F64_RD
(
ö¢
, 
ªgs
, 
	`so·Êﬂt_mulAddF64
(
›
, 
rs1
, 
rs2
, 
rs3
));

397  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

399 
	}
}

	@machine/fp_emulation.h

1 #i‚de‡
_RISCV_FP_EMULATION_H


2 
	#_RISCV_FP_EMULATION_H


	)

4 
	~"emuœti⁄.h
"

6 
	#GET_PRECISION
(
ö¢
Ë(((ö¢Ë>> 25Ë& 3)

	)

7 
	#GET_RM
(
ö¢
Ë(((ö¢Ë>> 12Ë& 7)

	)

8 
	#PRECISION_S
 0

	)

9 
	#PRECISION_D
 1

	)

11 #ifde‡
__riscv_Êí


12 
	#GET_F32_REG
(
ö¢
, 
pos
, 
ªgs
) ({ \

13 
öt32_t
 
vÆue
 
	`asm
("a0"Ë((
ö¢
Ë>> ((
pos
)-3)) & 0xf8; \

14 
uöçå_t
 
tmp
; \

15 
	`asm
 ("1:áuù¯%0, %%p¸ñ_hi(gë_f32_ªg);ádd %0, %0, %1; jÆ∏t0, %0, %%p¸ñ_lo(1b)" : "=&r"(
tmp
), "+&r"(
vÆue
) :: "t0"); \

16 
vÆue
; })

	)

17 
	#SET_F32_REG
(
ö¢
, 
pos
, 
ªgs
, 
vÆ
) ({ \

18 
uöt32_t
 
vÆue
 
	`asm
("a0"Ë(
vÆ
); \

19 
uöçå_t
 
off£t
 = ((
ö¢
Ë>> ((
pos
)-3)) & 0xf8; \

20 
uöçå_t
 
tmp
; \

21 
asm
 vﬁ©ûê("1:áuù¯%0, %%p¸ñ_hi’ut_f32_ªg);ádd %0, %0, %2; jÆ∏t0, %0, %%p¸ñ_lo(1b)" : "=&r"(
tmp
Ë: "r"(
vÆue
), "r"(
off£t
Ë: "t0"); })

	)

22 
	#öô_Â_ªg
(
i
Ë
	`SET_F32_REG
((iË<< 3, 3, 0, 0)

	)

23 
	#GET_F64_REG
(
ö¢
, 
pos
, 
ªgs
) ({ \

24 
uöçå_t
 
vÆue
 
	`asm
("a0"Ë((
ö¢
Ë>> ((
pos
)-3)) & 0xf8; \

25 
uöçå_t
 
tmp
; \

26 
	`asm
 ("1:áuù¯%0, %%p¸ñ_hi(gë_f64_ªg);ádd %0, %0, %1; jÆ∏t0, %0, %%p¸ñ_lo(1b)" : "=&r"(
tmp
), "+&r"(
vÆue
) :: "t0"); \

27 (
uöçå_t
Ë=4 ? *(
öt64_t
*)
vÆue
 : (öt64_t)vÆue; })

	)

28 
	#SET_F64_REG
(
ö¢
, 
pos
, 
ªgs
, 
vÆ
) ({ \

29 
uöt64_t
 
__vÆ
 = (
vÆ
); \

30 
uöçå_t
 
vÆue
 
	`asm
("a0"Ë(uöçå_tË=4 ? (uöçå_t)&
__vÆ
 : (uintptr_t)__val; \

31 
uöçå_t
 
off£t
 = ((
ö¢
Ë>> ((
pos
)-3)) & 0xf8; \

32 
uöçå_t
 
tmp
; \

33 
asm
 vﬁ©ûê("1:áuù¯%0, %%p¸ñ_hi’ut_f64_ªg);ádd %0, %0, %2; jÆ∏t0, %0, %%p¸ñ_lo(1b)" : "=&r"(
tmp
Ë: "r"(
vÆue
), "r"(
off£t
Ë: "t0"); })

	)

34 
	#GET_FCSR
(Ë
	`ªad_c§
(
fc§
)

	)

35 
	#SET_FCSR
(
vÆue
Ë
	`wrôe_c§
(
fc§
, (vÆue))

	)

36 
	#GET_FRM
(Ë
	`ªad_c§
(
‰m
)

	)

37 
	#SET_FRM
(
vÆue
Ë
	`wrôe_c§
(
‰m
, (vÆue))

	)

38 
	#GET_FFLAGS
(Ë
	`ªad_c§
(
fÊags
)

	)

39 
	#SET_FFLAGS
(
vÆue
Ë
	`wrôe_c§
(
fÊags
, (vÆue))

	)

41 
	#SETUP_STATIC_ROUNDING
(
ö¢
) ({ \

42 
ç
 
	`asm
("ç"Ë
	`ªad_c§
(
‰m
); \

43 i‡(
	`likñy
(((
ö¢
Ë& 
MASK_FUNCT3
) == MASK_FUNCT3)) ; \

44 i‡(
	`GET_RM
(
ö¢
Ë> 4Ë 
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, insn); \

45 
ç
 = 
	`GET_RM
(
ö¢
); \

46 
asm
 vﬁ©ûê("":"+r"(
ç
)); })

	)

47 
	#so·Êﬂt_øi£Fœgs
(
which
Ë
	`£t_c§
(
fÊags
, which)

	)

48 
	#so·Êﬂt_roundögMode
 ({ 
ç
 
	`asm
("ç");Åp; })

	)

49 
	#SET_FS_DIRTY
(Ë((Ë0)

	)

51 
	#GET_F64_REG
(
ö¢
, 
pos
, 
ªgs
Ë(*(
öt64_t
*)((*)(‘egsË+ 32Ë+ (((ö¢Ë>> (’os)-3)Ë& 0xf8)))

	)

52 
	#SET_F64_REG
(
ö¢
, 
pos
, 
ªgs
, 
vÆ
Ë(
	`GET_F64_REG
(ö¢,Öos,ÑegsË(vÆ))

	)

53 
	#GET_F32_REG
(
ö¢
, 
pos
, 
ªgs
Ë(*(
öt32_t
*)&
	`GET_F64_REG
(ö¢,Öos,Ñegs))

	)

54 
	#SET_F32_REG
(
ö¢
, 
pos
, 
ªgs
, 
vÆ
Ë(
	`GET_F32_REG
(ö¢,Öos,ÑegsË(vÆ))

	)

55 
	#GET_FCSR
(Ë({ 
ç
 
	`asm
("ç");Å∞& 0xFF; })

	)

56 
	#SET_FCSR
(
vÆue
Ë({ 
asm
 vﬁ©ûe("addÅp, x0, %0" :: "rI"((vÆueË& 0xFF)); })

	)

57 
	#GET_FRM
(Ë(
	`GET_FCSR
(Ë>> 5)

	)

58 
	#SET_FRM
(
vÆue
Ë
	`SET_FCSR
(
	`GET_FFLAGS
(Ë| ((vÆueË<< 5))

	)

59 
	#GET_FFLAGS
(Ë(
	`GET_FCSR
(Ë& 0x1F)

	)

60 
	#SET_FFLAGS
(
vÆue
Ë
	`SET_FCSR
((
	`GET_FRM
(Ë<< 5Ë| ((vÆueË& 0x1F))

	)

62 
	#SETUP_STATIC_ROUNDING
(
ö¢
) ({ \

63 
ç
 
	`asm
("tp");Åp &= 0xFF; \

64 i‡(
	`likñy
(((
ö¢
Ë& 
MASK_FUNCT3
Ë=MASK_FUNCT3)Ë
ç
 |=Åp << 8; \

65 i‡(
	`GET_RM
(
ö¢
Ë> 4Ë 
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, insn); \

66 
ç
 |
	`GET_RM
(
ö¢
) << 13; \

67 
asm
 vﬁ©ûê("":"+r"(
ç
)); })

	)

68 
	#so·Êﬂt_øi£Fœgs
(
which
Ë({ 
asm
 vﬁ©ûê("‹Åp,Åp, %0" :: "rI"(which)); })

	)

69 
	#so·Êﬂt_roundögMode
 ({ 
ç
 
	`asm
("ç");Å∞>> 13; })

	)

70 
	#SET_FS_DIRTY
(Ë
	`£t_c§
(
m°©us
, 
MSTATUS_FS
)

	)

73 
	#GET_F32_RS1
(
ö¢
, 
ªgs
Ë(
	`GET_F32_REG
(ö¢, 15,Ñegs))

	)

74 
	#GET_F32_RS2
(
ö¢
, 
ªgs
Ë(
	`GET_F32_REG
(ö¢, 20,Ñegs))

	)

75 
	#GET_F32_RS3
(
ö¢
, 
ªgs
Ë(
	`GET_F32_REG
(ö¢, 27,Ñegs))

	)

76 
	#GET_F64_RS1
(
ö¢
, 
ªgs
Ë(
	`GET_F64_REG
(ö¢, 15,Ñegs))

	)

77 
	#GET_F64_RS2
(
ö¢
, 
ªgs
Ë(
	`GET_F64_REG
(ö¢, 20,Ñegs))

	)

78 
	#GET_F64_RS3
(
ö¢
, 
ªgs
Ë(
	`GET_F64_REG
(ö¢, 27,Ñegs))

	)

79 
	#SET_F32_RD
(
ö¢
, 
ªgs
, 
vÆ
Ë(
	`SET_F32_REG
(ö¢, 7,Ñegs, vÆ), 
	`SET_FS_DIRTY
())

	)

80 
	#SET_F64_RD
(
ö¢
, 
ªgs
, 
vÆ
Ë(
	`SET_F64_REG
(ö¢, 7,Ñegs, vÆ), 
	`SET_FS_DIRTY
())

	)

	@machine/fp_ldst.c

1 
	~"Â_emuœti⁄.h
"

2 
	~"u≈rivûeged_mem‹y.h
"

4 
	$DECLARE_EMULATION_FUNC
(
emuœã_Êﬂt_lﬂd
)

6 
uöt64_t
 
vÆ
;

7 
uöçå_t
 
addr
 = 
	`GET_RS1
(
ö¢
, 
ªgs
Ë+ 
	`IMM_I
(insn);

9 
ö¢
 & 
MASK_FUNCT3
)

11 
MATCH_FLW
 & 
MASK_FUNCT3
:

12 i‡(
addr
 % 4 != 0)

13  
	`mißlig√d_lﬂd_å≠
(
ªgs
, 
mˇu£
, 
mïc
);

15 
	`SET_F32_RD
(
ö¢
, 
ªgs
, 
	`lﬂd_öt32_t
((*)
addr
, 
mïc
));

18 
MATCH_FLD
 & 
MASK_FUNCT3
:

19 i‡(
addr
 % (
uöçå_t
) != 0)

20  
	`mißlig√d_lﬂd_å≠
(
ªgs
, 
mˇu£
, 
mïc
);

22 #i‡
__riscv_xÀn
 == 64

23 
vÆ
 = 
	`lﬂd_uöt64_t
((*)
addr
, 
mïc
);

25 
vÆ
 = 
	`lﬂd_uöt32_t
((*)
addr
, 
mïc
);

26 
vÆ
 +(
uöt64_t
)
	`lﬂd_uöt32_t
((*)(
addr
 + 4), 
mïc
) << 32;

28 
	`SET_F64_RD
(
ö¢
, 
ªgs
, 
vÆ
);

32  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

34 
	}
}

36 
	$DECLARE_EMULATION_FUNC
(
emuœã_Êﬂt_°‹e
)

38 
uöt64_t
 
vÆ
;

39 
uöçå_t
 
addr
 = 
	`GET_RS1
(
ö¢
, 
ªgs
Ë+ 
	`IMM_S
(insn);

41 
ö¢
 & 
MASK_FUNCT3
)

43 
MATCH_FSW
 & 
MASK_FUNCT3
:

44 i‡(
addr
 % 4 != 0)

45  
	`mißlig√d_°‹e_å≠
(
ªgs
, 
mˇu£
, 
mïc
);

47 
	`°‹e_uöt32_t
((*)
addr
, 
	`GET_F32_RS2
(
ö¢
, 
ªgs
), 
mïc
);

50 
MATCH_FSD
 & 
MASK_FUNCT3
:

51 i‡(
addr
 % (
uöçå_t
) != 0)

52  
	`mißlig√d_°‹e_å≠
(
ªgs
, 
mˇu£
, 
mïc
);

54 
vÆ
 = 
	`GET_F64_RS2
(
ö¢
, 
ªgs
);

55 #i‡
__riscv_xÀn
 == 64

56 
	`°‹e_uöt64_t
((*)
addr
, 
vÆ
, 
mïc
);

58 
	`°‹e_uöt32_t
((*)
addr
, 
vÆ
, 
mïc
);

59 
	`°‹e_uöt32_t
((*)(
addr
 + 4), 
vÆ
 >> 32, 
mïc
);

64  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

66 
	}
}

	@machine/htif.h

1 #i‚de‡
_RISCV_HTIF_H


2 
	#_RISCV_HTIF_H


	)

4 
	~<°döt.h
>

6 
	#TOHOST_CMD
(
dev
, 
cmd
, 
∑ylﬂd
) \

7 (((
uöt64_t
)(
dev
Ë<< 56Ë| ((uöt64_t)(
cmd
Ë<< 48Ë| (uöt64_t)(
∑ylﬂd
))

	)

8 
	#FROMHOST_DEV
(
‰omho°_vÆue
Ë((
uöt64_t
)(‰omho°_vÆueË>> 56)

	)

9 
	#FROMHOST_CMD
(
‰omho°_vÆue
Ë((
uöt64_t
)(‰omho°_vÆueË<< 8 >> 56)

	)

10 
	#FROMHOST_DATA
(
‰omho°_vÆue
Ë((
uöt64_t
)(‰omho°_vÆueË<< 16 >> 16)

	)

	@machine/mcall.h

1 #i‚de‡
_RISCV_MCALL_H


2 
	#_RISCV_MCALL_H


	)

4 
	#MCALL_HART_ID
 10

	)

5 
	#MCALL_CONSOLE_PUTCHAR
 1

	)

6 
	#MCALL_CONSOLE_GETCHAR
 2

	)

7 
	#MCALL_HTIF_SYSCALL
 11

	)

8 
	#MCALL_SEND_IPI
 4

	)

9 
	#MCALL_CLEAR_IPI
 3

	)

10 
	#MCALL_SHUTDOWN
 8

	)

11 
	#MCALL_SET_TIMER
 0

	)

12 
	#MCALL_REMOTE_SFENCE_VM
 6

	)

13 
	#MCALL_REMOTE_FENCE_I
 5

	)

15 #i‚de‡
__ASSEMBLER__


17 
uöçå_t
 
do_mˇŒ
(uöçå_à
which
, ...);

	@machine/mentry.S

3 
	~"må≠.h
"

4 
	~"bôs.h
"

6 .
	gd©a


7 .
	gÆign
 6

8 
	gå≠_èbÀ
:

9 .
w‹d
 
bad_å≠


10 .
w‹d
 
éb_i_miss_å≠


11 .
w‹d
 
ûÀgÆ_ö¢_å≠


12 .
w‹d
 
bad_å≠


13 .
w‹d
 
mißlig√d_lﬂd_å≠


14 .
w‹d
 
éb_r_miss_å≠


15 .
w‹d
 
mißlig√d_°‹e_å≠


16 .
w‹d
 
éb_w_miss_å≠


17 .
w‹d
 
bad_å≠


18 .
w‹d
 
mˇŒ_å≠


19 .
w‹d
 
bad_å≠


20 .
w‹d
 
bad_å≠


21 
	#SOFTWARE_INTERRUPT_VECTOR
 12

	)

22 .
w‹d
 
so·w¨e_öãºu±


23 
	#TIMER_INTERRUPT_VECTOR
 13

	)

24 .
w‹d
 
timî_öãºu±


25 
	#TRAP_FROM_MACHINE_MODE_VECTOR
 14

	)

26 .
w‹d
 
__å≠_‰om_machöe_mode


28 .
›ti⁄
 
n‹vc


29 .
£˘i⁄
 .
ãxt
.
öô
,"ax",@
	g¥ogbôs


30 .
globl
 
ª£t_ve˘‹


31 
	gª£t_ve˘‹
:

32 
j
 
do_ª£t


34 
nmi_ve˘‹
:

35 .
Lunh™dÀabÀ_å≠
:

36 
j
 
bad_å≠


38 
å≠_ve˘‹
:

39 
c§rw
 
•
, 
	gms¸©ch
, sp

40 
beqz
 
	g•
, .
Lå≠_‰om_machöe_mode


42 
STORE
 
	ga0
, 10*
	$REGBYTES
(
•
)

43 
STORE
 
a1
, 11*
	$REGBYTES
(
•
)

45 
c§r
 
a1
, 
mˇu£


46 
bgez
 
a1
, .
Lh™dÀ_å≠_ö_machöe_mode


48 #Thi†
is
 
™
 
öãºu±
. 
Disˇrd
 
the
 
mˇu£
 
MSB
 
™d
 
decode
Åhê
ª°
.

49 
¶l
 
a1
,á1, 1

51 #I†
ô
 
a
 
machöe
 
timî
 
öãºu±
?

52 
li
 
a0
, 
IRQ_M_TIMER
 * 2

53 
b√
 
a0
, 
a1
, 1f

54 
li
 
a1
, 
TIMER_INTERRUPT_VECTOR


55 
j
 .
Lh™dÀ_å≠_ö_machöe_mode


57 .
Lmªt
:

58 #Gÿ
back
 
whí˚
 
we
 
ˇme
.

59 
LOAD
 
a0
, 10*
	$REGBYTES
(
•
)

60 
LOAD
 
a1
, 11*
	$REGBYTES
(
•
)

61 
c§rw
 
•
, 
ms¸©ch
, sp

62 
mªt


65 #I†
ô
 
™
 
IPI
?

66 
li
 
a0
, 
IRQ_M_SOFT
 * 2

67 
b√
 
a0
, 
a1
, .
Lunh™dÀabÀ_å≠


68 
li
 
a1
, 
SOFTWARE_INTERRUPT_VECTOR


69 
j
 .
Lh™dÀ_å≠_ö_machöe_mode


71 .
Lh™dÀ_å≠_ö_machöe_mode
:

72 #Pª£rvê
the
 
ªgi°îs
. 
Compuã
Åhê
addªss
 
of
Åhê
å≠
 
h™dÀr
.

73 
STORE
 
ø
, 1*
	$REGBYTES
(
•
)

74 
STORE
 
gp
, 3*
	$REGBYTES
(
•
)

75 
STORE
 
ç
, 4*
	$REGBYTES
(
•
)

76 
STORE
 
t0
, 5*
	`REGBYTES
(
•
)

77 1:
auùc
 
t0
, %
	$p¸ñ_hi
(
å≠_èbÀ
Ë#t0 <- %
	$hi
(
å≠_èbÀ
)

78 
STORE
 
t1
, 6*
	$REGBYTES
(
•
)

79 
¶l
 
t1
, 
a1
, 2 #t1 <- 
mˇu£
 << 2

80 
STORE
 
t2
, 7*
	$REGBYTES
(
•
)

81 
add
 
t1
, 
t0
,Å1 #t1 <- %
	`hi
(
å≠_èbÀ
)[
mˇu£
]

82 
STORE
 
s0
, 8*
	$REGBYTES
(
•
)

83 
LWU
 
t1
, %
	$p¸ñ_lo
(1b)(
t1
Ë#t1 <- 
å≠_èbÀ
[
mˇu£
]

84 
STORE
 
s1
, 9*
	$REGBYTES
(
•
)

85 
mv
 
a0
, 
•
 #a0 <- 
ªgs


86 
STORE
 
a2
,12*
	$REGBYTES
(
•
)

87 
c§r
 
a2
, 
mïc
 #a2 <- mepc

88 
STORE
 
a3
,13*
	$REGBYTES
(
•
)

89 
c§rw
 
t0
, 
ms¸©ch
, 
x0
 #t0 <- 
u£r
 
•


90 
STORE
 
a4
,14*
	$REGBYTES
(
•
)

91 
STORE
 
a5
,15*
	$REGBYTES
(
•
)

92 
STORE
 
a6
,16*
	$REGBYTES
(
•
)

93 
STORE
 
a7
,17*
	$REGBYTES
(
•
)

94 
STORE
 
s2
,18*
	$REGBYTES
(
•
)

95 
STORE
 
s3
,19*
	$REGBYTES
(
•
)

96 
STORE
 
s4
,20*
	$REGBYTES
(
•
)

97 
STORE
 
s5
,21*
	$REGBYTES
(
•
)

98 
STORE
 
s6
,22*
	$REGBYTES
(
•
)

99 
STORE
 
s7
,23*
	$REGBYTES
(
•
)

100 
STORE
 
s8
,24*
	$REGBYTES
(
•
)

101 
STORE
 
s9
,25*
	$REGBYTES
(
•
)

102 
STORE
 
s10
,26*
	$REGBYTES
(
•
)

103 
STORE
 
s11
,27*
	$REGBYTES
(
•
)

104 
STORE
 
t3
,28*
	$REGBYTES
(
•
)

105 
STORE
 
t4
,29*
	$REGBYTES
(
•
)

106 
STORE
 
t5
,30*
	$REGBYTES
(
•
)

107 
STORE
 
t6
,31*
	$REGBYTES
(
•
)

108 
STORE
 
t0
, 2*
	$REGBYTES
(
•
) #sp

110 #i‚de‡
__riscv_Êí


111 
lw
 
ç
, (
•
Ë#Movê
the
 
emuœãd
 
FCSR
 
‰om
 
x0
's save slot intoÅp.

113 
STORE
 
x0
, (
•
) #Zero x0's save slot.

115 #Invokê
the
 
h™dÀr
.

116 
jÆr
 
t1


118 #i‚de‡
__riscv_Êí


119 
sw
 
ç
, (
•
Ë#Movê
the
 
emuœãd
 
FCSR
 
‰om
Å∞
öto
 
x0
's save slot.

122 
ª°‹e_ms¸©ch
:

123 #Re°‹ê
ms¸©ch
, 
so
 
futuª
 
å≠s
 
wûl
 
know
 
they
 
didn
't come from M-mode.

124 
c§w
 
ms¸©ch
, 
•


126 
ª°‹e_ªgs
:

127 #Re°‹ê
Æl
 
of
 
the
 
ªgi°îs
.

128 
LOAD
 
ø
, 1*
	$REGBYTES
(
•
)

129 
LOAD
 
gp
, 3*
	$REGBYTES
(
•
)

130 
LOAD
 
ç
, 4*
	$REGBYTES
(
•
)

131 
LOAD
 
t0
, 5*
	$REGBYTES
(
•
)

132 
LOAD
 
t1
, 6*
	$REGBYTES
(
•
)

133 
LOAD
 
t2
, 7*
	$REGBYTES
(
•
)

134 
LOAD
 
s0
, 8*
	$REGBYTES
(
•
)

135 
LOAD
 
s1
, 9*
	$REGBYTES
(
•
)

136 
LOAD
 
a0
,10*
	$REGBYTES
(
•
)

137 
LOAD
 
a1
,11*
	$REGBYTES
(
•
)

138 
LOAD
 
a2
,12*
	$REGBYTES
(
•
)

139 
LOAD
 
a3
,13*
	$REGBYTES
(
•
)

140 
LOAD
 
a4
,14*
	$REGBYTES
(
•
)

141 
LOAD
 
a5
,15*
	$REGBYTES
(
•
)

142 
LOAD
 
a6
,16*
	$REGBYTES
(
•
)

143 
LOAD
 
a7
,17*
	$REGBYTES
(
•
)

144 
LOAD
 
s2
,18*
	$REGBYTES
(
•
)

145 
LOAD
 
s3
,19*
	$REGBYTES
(
•
)

146 
LOAD
 
s4
,20*
	$REGBYTES
(
•
)

147 
LOAD
 
s5
,21*
	$REGBYTES
(
•
)

148 
LOAD
 
s6
,22*
	$REGBYTES
(
•
)

149 
LOAD
 
s7
,23*
	$REGBYTES
(
•
)

150 
LOAD
 
s8
,24*
	$REGBYTES
(
•
)

151 
LOAD
 
s9
,25*
	$REGBYTES
(
•
)

152 
LOAD
 
s10
,26*
	$REGBYTES
(
•
)

153 
LOAD
 
s11
,27*
	$REGBYTES
(
•
)

154 
LOAD
 
t3
,28*
	$REGBYTES
(
•
)

155 
LOAD
 
t4
,29*
	$REGBYTES
(
•
)

156 
LOAD
 
t5
,30*
	$REGBYTES
(
•
)

157 
LOAD
 
t6
,31*
	$REGBYTES
(
•
)

158 
LOAD
 
•
, 2*
	$REGBYTES
(
•
)

159 
mªt


161 .
Lå≠_‰om_machöe_mode
:

162 
c§r
 
•
, 
ms¸©ch


163 
addi
 
•
, sp, -
INTEGER_CONTEXT_SIZE


164 
STORE
 
a0
,10*
	$REGBYTES
(
•
)

165 
STORE
 
a1
,11*
	$REGBYTES
(
•
)

166 
li
 
a1
, 
TRAP_FROM_MACHINE_MODE_VECTOR


167 
j
 .
Lh™dÀ_å≠_ö_machöe_mode


169 .
globl
 
__ªdúe˘_å≠


170 
__ªdúe˘_å≠
:

171 #ª£à
•
 
to
 
t›
 
of
 
M
-
mode
 
°ack


172 
li
 
t0
, 
MACHINE_STACK_SIZE


173 
add
 
•
, sp, 
t0


174 
√g
 
t0
,Å0

175 
™d
 
•
, sp, 
t0


176 
addi
 
•
, sp, -
MENTRY_FRAME_SIZE


177 
j
 
ª°‹e_ms¸©ch


179 
__å≠_‰om_machöe_mode
:

180 
jÆ
 
å≠_‰om_machöe_mode


181 
j
 
ª°‹e_ªgs


183 
do_ª£t
:

184 
li
 
x1
, 0

185 
li
 
x2
, 0

186 
li
 
x3
, 0

187 
li
 
x4
, 0

188 
li
 
x5
, 0

189 
li
 
x6
, 0

190 
li
 
x7
, 0

191 
li
 
x8
, 0

192 
li
 
x9
, 0

193 
li
 
x10
, 0

194 
li
 
x11
, 0

195 
li
 
x12
, 0

196 
li
 
x13
, 0

197 
li
 
x14
, 0

198 
li
 
x15
, 0

199 
li
 
x16
, 0

200 
li
 
x17
, 0

201 
li
 
x18
, 0

202 
li
 
x19
, 0

203 
li
 
x20
, 0

204 
li
 
x21
, 0

205 
li
 
x22
, 0

206 
li
 
x23
, 0

207 
li
 
x24
, 0

208 
li
 
x25
, 0

209 
li
 
x26
, 0

210 
li
 
x27
, 0

211 
li
 
x28
, 0

212 
li
 
x29
, 0

213 
li
 
x30
, 0

214 
li
 
x31
, 0

215 
c§w
 
ms¸©ch
, 
x0


217 #wrôê
mtvec
 
™d
 
make
 
suª
 
ô
 
°icks


218 
œ
 
t0
, 
å≠_ve˘‹


219 
c§w
 
mtvec
, 
t0


220 
c§r
 
t1
, 
mtvec


221 1:
b√
 
t0
, 
t1
, 1b

223 #• <- 
íd
 
of
 
fú°
 
fuŒ
 
∑ge
 
a·î
 
the
Énd o‡thê
bö¨y


224 
œ
 
•
, 
_íd
 + 2*
RISCV_PGSIZE
 - 1

225 
li
 
t0
, -
RISCV_PGSIZE


226 
™d
 
•
, sp, 
t0


227 
addi
 
•
, sp, -
MENTRY_FRAME_SIZE


229 
c§r
 
a0
, 
mh¨tid


230 
¶li
 
a1
, 
a0
, 
RISCV_PGSHIFT


231 
add
 
•
, sp, 
a1


233 
beqz
 
a0
, 
öô_fú°_h¨t


235 #£à
MSIE
 
bô
 
to
 
ª˚ive
 
IPI


236 
li
 
a1
, 
MIP_MSIP


237 
c§w
 
mõ
, 
a1


239 .
Lmu…iH¨t
:

240 #i‡
MAX_HARTS
 > 1

241 #waô 
™
 
IPI
 
to
 
sig«l
 
th©
 
ô
's safeÅo boot

242 
wfi


243 
c§r
 
a1
, 
mù


244 
™di
 
a1
,á1, 
MIP_MSIP


245 
beqz
 
a1
, .
Lmu…iH¨t


247 #makê
suª
 
our
 
h¨t
 
id
 
is
 
wôhö
 
a
 
vÆid
 
ønge


248 
„n˚


249 
li
 
a1
, 
MAX_HARTS


250 
b…u
 
a0
, 
a1
, 
öô_Ÿhî_h¨t


252 
wfi


253 
j
 .
Lmu…iH¨t


	@machine/minit.c

1 
	~"må≠.h
"

2 
	~"©omic.h
"

3 
	~"vm.h
"

4 
	~"Â_emuœti⁄.h
"

5 
	~<°rög.h
>

6 
	~<limôs.h
>

8 
±e_t
* 
	groŸ_∑ge_èbÀ
;

9 
uöçå_t
 
	gfú°_‰ì_∑ddr
;

10 
uöçå_t
 
	gmem_size
;

11 
uöçå_t
 
	gnum_h¨ts
;

12 vﬁ©ûê
uöt64_t
* 
	gmtime
;

13 vﬁ©ûê
uöt32_t
* 
	g∂ic_¥i‹ôõs
;

14 
size_t
 
	g∂ic_ndevs
;

16 
	$m°©us_öô
()

19 
uöçå_t
 
ms
 = 0;

20 
ms
 = 
	`INSERT_FIELD
(ms, 
MSTATUS_VM
, 
VM_CHOICE
);

21 
ms
 = 
	`INSERT_FIELD
(ms, 
MSTATUS_FS
, 1);

22 
	`wrôe_c§
(
m°©us
, 
ms
);

25 
ms
 = 
	`ªad_c§
(
m°©us
);

26 
	`as£π
(
	`EXTRACT_FIELD
(
ms
, 
MSTATUS_VM
Ë=
VM_CHOICE
);

29 
	`wrôe_c§
(
mucou¡îí
, -1);

30 
	`wrôe_c§
(
mscou¡îí
, -1);

31 
	`wrôe_c§
(
mõ
, ~
MIP_MTIP
);

32 
	}
}

35 
	$dñeg©e_å≠s
()

37 
uöçå_t
 
öãºu±s
 = 
MIP_SSIP
 | 
MIP_STIP
 | 
MIP_SEIP
;

38 
uöçå_t
 
ex˚±i⁄s
 =

39 (1U << 
CAUSE_MISALIGNED_FETCH
) |

41 (1U << 
CAUSE_BREAKPOINT
) |

44 (1U << 
CAUSE_BREAKPOINT
) |

45 (1U << 
CAUSE_USER_ECALL
);

47 
	`wrôe_c§
(
midñeg
, 
öãºu±s
);

48 
	`wrôe_c§
(
medñeg
, 
ex˚±i⁄s
);

49 
	`as£π
(
	`ªad_c§
(
midñeg
Ë=
öãºu±s
);

50 
	`as£π
(
	`ªad_c§
(
medñeg
Ë=
ex˚±i⁄s
);

51 
	}
}

53 
	$Â_öô
()

55 
	`as£π
(
	`ªad_c§
(
m°©us
Ë& 
MSTATUS_FS
);

57 #ifde‡
__riscv_Êí


58 i‡(
	`suµ‹ts_exãnsi⁄
('D'))

60 
i
 = 0; i < 32; i++)

61 
	`öô_Â_ªg
(
i
);

62 
	`wrôe_c§
(
fc§
, 0);

67 
uöçå_t
 
fd_mask
 = (1 << ('F' - 'A')) | (1 << ('D' - 'A'));

68 
	`˛ór_c§
(
miß
, 
fd_mask
);

69 
	`as£π
(!(
	`ªad_c§
(
miß
Ë& 
fd_mask
));

70 
	}
}

72 
hls_t
* 
	$hls_öô
(
uöçå_t
 
id
)

74 
hls_t
* 
hls
 = 
	`OTHER_HLS
(
id
);

75 
	`mem£t
(
hls
, 0, (*hls));

77  
hls
;

78 
	}
}

80 
uöçå_t
 
	$sbi_t›_∑ddr
()

82 
_íd
;

83  
	`ROUNDUP
((
uöçå_t
)&
_íd
, 
RISCV_PGSIZE
);

84 
	}
}

86 
	$mem‹y_öô
()

88 
mem_size
 = mem_sizê/ 
MEGAPAGE_SIZE
 * MEGAPAGE_SIZE;

89 
fú°_‰ì_∑ddr
 = 
	`sbi_t›_∑ddr
(Ë+ 
num_h¨ts
 * 
RISCV_PGSIZE
;

90 
	}
}

92 
	$mem‹y_check
()

95 
	}
}

97 
	$h¨t_öô
()

99 
num_h¨ts
 = 0;

100 
	`m°©us_öô
();

101 
	`Â_öô
();

102 
	`dñeg©e_å≠s
();

103 
	}
}

105 
	$∂ic_öô
()

107 
size_t
 
i
 = 1; i <
∂ic_ndevs
; i++)

108 
∂ic_¥i‹ôõs
[
i
] = 1;

109 
	}
}

111 
	$¥ci_ã°
()

113 
	`as£π
(!(
	`ªad_c§
(
mù
Ë& 
MIP_MSIP
));

114 *
	`HLS
()->
ùi
 = 1;

115 
	`as£π
(
	`ªad_c§
(
mù
Ë& 
MIP_MSIP
);

116 *
	`HLS
()->
ùi
 = 0;

118 
	`as£π
(!(
	`ªad_c§
(
mù
Ë& 
MIP_MTIP
));

119 *
	`HLS
()->
timecmp
 = 0;

120 
	`as£π
(
	`ªad_c§
(
mù
Ë& 
MIP_MTIP
);

121 *
	`HLS
()->
timecmp
 = -1ULL;

122 
	}
}

124 
	$h¨t_∂ic_öô
()

127 *
	`HLS
()->
ùi
 = 0;

128 *
	`HLS
()->
timecmp
 = -1ULL;

129 
	`wrôe_c§
(
mù
, 0);

131 i‡(!
∂ic_ndevs
)

134 
	`dõ
("not implemented");

136 
size_t
 
õ_w‹ds
 = 
∂ic_ndevs
 / (
uöçå_t
) + 1;

137 
size_t
 
i
 = 0; i < 
õ_w‹ds
; i++)

138 
	`HLS
()->
∂ic_s_õ
[
i
] = 
ULONG_MAX
;

139 *
	`HLS
()->
∂ic_m_thªsh
 = 1;

140 *
	`HLS
()->
∂ic_s_thªsh
 = 0;

141 
	}
}

143 
	$u«lig√d_r_w_ã°
()

147 
uöt32_t
 
s
[2] = {0x12345678, 0x9abcdef0};

149 
uöt32_t
 
vÆue
 = 123;

150 
asm
 vﬁ©ûe("lw %0, (%1)" : "Ù"(
vÆue
Ë: "r"((
uöçå_t
)
s
 + 1));

151 if(
vÆue
 != 0xf0123456)

152 
	`log
("vÆuê%x\n", 
vÆue
);

153 
	`as£π
(
vÆue
 == 0xf0123456);

155 
vÆue
 = 0x87654321;

156 
asm
 vﬁ©ûe("sw %0, (%1)" : :"r"(
vÆue
), "r"((
uöçå_t
)
s
 + 3) : "memory");

158 if(
s
[0] != 0x21345678)

159 
	`log
("s[0] = %x\n", 
s
[0]);

160 
	`as£π
(
s
[0] == 0x21345678);

162 if(
s
[1] != 0x9a876543)

163 
	`log
("s[1] = %x\n", 
s
[1]);

164 
	`as£π
(
s
[1] == 0x9a876543);

165 
	}
}

167 
	$˛ock_ã°
()

169 *
	`HLS
()->
timecmp
 = *
mtime
 + 0x100000;

170 
	`˛ór_c§
(
mù
, 
MIP_STIP
);

171 
	`£t_c§
(
mõ
, 
MIP_MTIP
);

172 
	`£t_c§
(
m°©us
, 
MSTATUS_MIE
);

176 
	`__buûtö_uƒóchabÀ
();

177 
	}
}

179 
	$öô_fú°_h¨t
()

181 
	`h¨t_öô
();

182 
	`hls_öô
(0);

183 
	`∑r£_c⁄fig_°rög
();

184 
	`∂ic_öô
();

185 
	`h¨t_∂ic_öô
();

186 
	`¥ci_ã°
();

187 
	`u«lig√d_r_w_ã°
();

188 
	`mem‹y_öô
();

189 
	`mem‹y_check
();

191 
	`˛ock_ã°
();

193 
	`boŸ_lﬂdî
();

194 
	}
}

196 
	$öô_Ÿhî_h¨t
()

198 
	`h¨t_öô
();

199 
	`h¨t_∂ic_öô
();

200 
	`boŸ_Ÿhî_h¨t
();

201 
	}
}

203 
	$íãr_su≥rvis‹_mode
((*
‚
)(
uöçå_t
), uöçå_à
°ack
)

205 
uöçå_t
 
m°©us
 = 
	`ªad_c§
(mstatus);

206 
m°©us
 = 
	`INSERT_FIELD
(m°©us, 
MSTATUS_MPP
, 
PRV_S
);

207 
m°©us
 = 
	`INSERT_FIELD
(m°©us, 
MSTATUS_MPIE
, 0);

208 
	`wrôe_c§
(
m°©us
, mstatus);

209 
	`wrôe_c§
(
ms¸©ch
, 
	`MACHINE_STACK_TOP
(Ë- 
MENTRY_FRAME_SIZE
);

210 
	`wrôe_c§
(
mïc
, 
‚
);

211 
	`wrôe_c§
(
•tbr
, (
uöçå_t
)
roŸ_∑ge_èbÀ
 >> 
RISCV_PGSHIFT
);

213 
asm
 vﬁ©ûê("mvá0, %0; mv sp, %0; mªt" : : "r" (
°ack
));

214 
	`__buûtö_uƒóchabÀ
();

215 
	}
}

	@machine/misaligned_ldst.c

1 
	~"emuœti⁄.h
"

2 
	~"Â_emuœti⁄.h
"

3 
	~"u≈rivûeged_mem‹y.h
"

4 
	~"må≠.h
"

6 
	ubyã_¨øy
 {

7 
uöt8_t
 
	mbyãs
[8];

8 
uöçå_t
 
	mötx
;

9 
uöt64_t
 
	möt64
;

12 
	$mißlig√d_lﬂd_å≠
(
uöçå_t
* 
ªgs
, uöçå_à
mˇu£
, uöçå_à
mïc
)

17 
byã_¨øy
 
vÆ
;

18 
uöçå_t
 
m°©us
;

19 
ö¢_t
 
ö¢
 = 
	`gë_ö¢
(
mïc
, &
m°©us
);

20 
uöçå_t
 
addr
 = 
	`ªad_c§
(
mbadaddr
);

22 
shi·
 = 0, 
Â
 = 0, 
Àn
;

23 i‡((
ö¢
 & 
MASK_LW
Ë=
MATCH_LW
)

24 
Àn
 = 4, 
shi·
 = 8*((
uöçå_t
) -Üen);

25 #i‡
__riscv_xÀn
 == 64

26 i‡((
ö¢
 & 
MASK_LD
Ë=
MATCH_LD
)

27 
Àn
 = 8, 
shi·
 = 8*((
uöçå_t
) -Üen);

28 i‡((
ö¢
 & 
MASK_LWU
Ë=
MATCH_LWU
)

29 
Àn
 = 4;

31 #ifde‡
PK_ENABLE_FP_EMULATION


32 i‡((
ö¢
 & 
MASK_FLD
Ë=
MATCH_FLD
)

33 
Â
 = 1, 
Àn
 = 8;

34 i‡((
ö¢
 & 
MASK_FLW
Ë=
MATCH_FLW
)

35 
Â
 = 1, 
Àn
 = 4;

37 i‡((
ö¢
 & 
MASK_LH
Ë=
MATCH_LH
)

38 
Àn
 = 2, 
shi·
 = 8*((
uöçå_t
) -Üen);

39 i‡((
ö¢
 & 
MASK_LHU
Ë=
MATCH_LHU
)

40 
Àn
 = 2;

42  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

44 
vÆ
.
öt64
 = 0;

45 
öçå_t
 
i
 = 0; i < 
Àn
; i++)

46 
vÆ
.
byãs
[
i
] = 
	`lﬂd_uöt8_t
((*)(
addr
 + i), 
mïc
);

48 i‡(!
Â
)

49 
	`SET_RD
(
ö¢
, 
ªgs
, (
öçå_t
)
vÆ
.
ötx
 << 
shi·
 >> shift);

50 i‡(
Àn
 == 8)

51 
	`SET_F64_RD
(
ö¢
, 
ªgs
, 
vÆ
.
öt64
);

53 
	`SET_F32_RD
(
ö¢
, 
ªgs
, 
vÆ
.
ötx
);

55 
	`wrôe_c§
(
mïc
, mepc + 4);

56 
	}
}

58 
	$mißlig√d_°‹e_å≠
(
uöçå_t
* 
ªgs
, uöçå_à
mˇu£
, uöçå_à
mïc
)

63 
byã_¨øy
 
vÆ
;

64 
uöçå_t
 
m°©us
;

65 
ö¢_t
 
ö¢
 = 
	`gë_ö¢
(
mïc
, &
m°©us
);

66 
Àn
;

68 
vÆ
.
ötx
 = 
	`GET_RS2
(
ö¢
, 
ªgs
);

69 i‡((
ö¢
 & 
MASK_SW
Ë=
MATCH_SW
)

70 
Àn
 = 4;

71 #i‡
__riscv_xÀn
 == 64

72 i‡((
ö¢
 & 
MASK_SD
Ë=
MATCH_SD
)

73 
Àn
 = 8;

75 #ifde‡
PK_ENABLE_FP_EMULATION


76 i‡((
ö¢
 & 
MASK_FSD
Ë=
MATCH_FSD
)

77 
Àn
 = 8, 
vÆ
.
öt64
 = 
	`GET_F64_RS2
(
ö¢
, 
ªgs
);

78 i‡((
ö¢
 & 
MASK_FSW
Ë=
MATCH_FSW
)

79 
Àn
 = 4, 
vÆ
.
ötx
 = 
	`GET_F32_RS2
(
ö¢
, 
ªgs
);

81 i‡((
ö¢
 & 
MASK_SH
Ë=
MATCH_SH
)

82 
Àn
 = 2;

84  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

86 
uöçå_t
 
addr
 = 
	`ªad_c§
(
mbadaddr
);

87 
i
 = 0; i < 
Àn
; i++)

88 
	`°‹e_uöt8_t
((*)(
addr
 + 
i
), 
vÆ
.
byãs
[i], 
mïc
);

90 
	`wrôe_c§
(
mïc
, mepc + 4);

91 
	}
}

	@machine/mtrap.c

1 
	~"må≠.h
"

2 
	~"mˇŒ.h
"

3 
	~"htif.h
"

4 
	~"©omic.h
"

5 
	~"bôs.h
"

6 
	~<î∫o.h
>

7 
	~<°d¨g.h
>

8 
	~<°dio.h
>

10 
uöçå_t
 
	gu¨t
;

12 
ölöe
 
uöt8_t


13 
	$öb
(
uöçå_t
 
p‹t
) {

14 
uöt8_t
 
d©a
 = *((vﬁ©ûêuöt8_t*Ë
p‹t
);

15  
d©a
;

16 
	}
}

18 
ölöe
 

19 
	$outb
(
uöçå_t
 
p‹t
, 
uöt8_t
 
d©a
) {

20 *((vﬁ©ûê
uöt8_t
*Ë
p‹t
Ë
d©a
;

21 
	}
}

23 
ölöe
 
uöt32_t


24 
	$öw
(
uöçå_t
 
p‹t
) {

25 
uöt32_t
 
d©a
 = *((vﬁ©ûê
uöçå_t
 *Ë
p‹t
);

26  
d©a
;

27 
	}
}

29 
ölöe
 

30 
	$outw
(
uöçå_t
 
p‹t
, 
uöt32_t
 
d©a
) {

31 *((vﬁ©ûê
uöçå_t
 *Ë
p‹t
Ë
d©a
;

32 
	}
}

35 
	$Âga_u¨t_öô
(
uöt16_t
 
div˛k
)

38 
	`outb
(
u¨t
 + 3, 0x80);

44 
	`outb
(
u¨t
 + 1, (
uöt8_t
)(
div˛k
 >> 8));

45 
	`outb
(
u¨t
 + 0, (
uöt8_t
)
div˛k
);

48 
	`outb
(
u¨t
 + 3, 0x03);

51 
	`outb
(
u¨t
 + 1, 0x01);

52 
	}
}

55 
	$Âga_u¨t_putch¨_sub
(
uöt8_t
 
ch
)

58 
	`outb
(
u¨t
 + 0, 
ch
 & 0xFF);

59 
	}
}

62 
	$Âga_u¨t_putch¨
(
uöt8_t
 
c
) {

63 i‡(
c
 == '\b') {

64 
	`Âga_u¨t_putch¨_sub
('\b');

65 
	`Âga_u¨t_putch¨_sub
(' ');

66 
	`Âga_u¨t_putch¨_sub
('\b');

67 } if(
c
 == '\n') {

68 
	`Âga_u¨t_putch¨_sub
('\r');

69 
	`Âga_u¨t_putch¨_sub
('\n');

71 
	`Âga_u¨t_putch¨_sub
(
c
);

73 
	}
}

75 
uöt8_t


76 
	$Âga_u¨t_gëch¨
() {

77 
œ°_is_CR
 = 0;

78 
uöt8_t
 
c
;

82 if–(
	`öb
(
u¨t
 + 5) & 0x01) == 0)

84 
c
 = 
	`öb
(
u¨t
 + 0) & 0xFF;

86 i‡(
c
 == 127)

88 
c
 = '\b';

91 if(
c
 == '\r')

93 
c
 = '\n';

94 
œ°_is_CR
 = 1;

98 if(
œ°_is_CR
 && 
c
 == '\n')

100 
œ°_is_CR
 = 0;

103 
œ°_is_CR
 = 0;

106  
c
;

108 
	}
}

110 vﬁ©ûê
uöt64_t
 
toho°
 
__©åibuã__
((
	$Æig√d
(64))Ë
	`__©åibuã__
((
	`£˘i⁄
("htif")));

111 vﬁ©ûê
uöt64_t
 
‰omho°
 
	`__©åibuã__
((
	$Æig√d
(64))Ë
	`__©åibuã__
((
	`£˘i⁄
("htif")));

112 
•ölock_t
 
htif_lock
 = 
SPINLOCK_INIT
;

114 
	`__©åibuã__
((
n‹ëu∫
)Ë
	$bad_å≠
()

116 
	`dõ
("machöêmode: unh™dœbÀÅø∞%x @ %p", 
	`ªad_c§
(
mˇu£
),Ñód_c§(
mïc
));

117 
	}
}

119 
uöçå_t
 
	$mˇŒ_h¨t_id
()

121  
	`ªad_c⁄°_c§
(
mh¨tid
);

122 
	}
}

124 
	$ªque°_htif_keybﬂrd_öãºu±
()

127 
toho°
 = 
	`TOHOST_CMD
(1, 0, 0);

128 
	}
}

130 
	$__htif_öãºu±
()

133 
uöt64_t
 
fh
 = 
‰omho°
;

134 i‡(!
fh
)

136 i‡(!(
	`FROMHOST_DEV
(
fh
Ë=1 && 
	`FROMHOST_CMD
(fh) == 0))

137 
	`dõ
("unexpected htif interrupt");

138 
	`HLS
()->
c⁄sﬁe_ibuf
 = 1 + (
uöt8_t
)
	`FROMHOST_DATA
(
fh
);

139 
‰omho°
 = 0;

140 
	`£t_c§
(
mù
, 
MIP_SSIP
);

141 
	}
}

143 
	$do_toho°_‰omho°
(
uöçå_t
 
dev
, uöçå_à
cmd
, uöçå_à
d©a
)

145 
	`•ölock_lock
(&
htif_lock
);

146 
toho°
)

147 
	`__htif_öãºu±
();

148 
toho°
 = 
	`TOHOST_CMD
(
dev
, 
cmd
, 
d©a
);

151 
uöt64_t
 
fh
 = 
‰omho°
;

152 i‡(
fh
) {

153 i‡(
	`FROMHOST_DEV
(
fh
Ë=
dev
 && 
	`FROMHOST_CMD
(fhË=
cmd
) {

154 
‰omho°
 = 0;

157 
	`__htif_öãºu±
();

160 
	`•ölock_u∆ock
(&
htif_lock
);

161 
	}
}

163 
	$htif_öãºu±
()

165 i‡(
	`•ölock_åylock
(&
htif_lock
) == 0) {

166 
	`__htif_öãºu±
();

167 
	`•ölock_u∆ock
(&
htif_lock
);

169 
	}
}

171 
uöçå_t
 
	$timî_öãºu±
()

174 
	`˛ór_c§
(
mõ
, 
MIP_MTIP
);

175 
	`£t_c§
(
mù
, 
MIP_STIP
);

178 
	`htif_öãºu±
();

192 
	}
}

194 
uöçå_t
 
	$mˇŒ_c⁄sﬁe_putch¨
(
uöt8_t
 
ch
)

196 if(
u¨t
 == 0)

198 
	`do_toho°_‰omho°
(1, 1, 
ch
);

202 
	`Âga_u¨t_putch¨
(
ch
);

205 
	}
}

207 
uöçå_t
 
	$mˇŒ_htif_sysˇŒ
(
uöçå_t
 
magic_mem
)

209 
	`do_toho°_‰omho°
(0, 0, 
magic_mem
);

211 
	}
}

213 
	$powîoff
()

215 
	`log
("machine mode: System shutdown!");

217 
toho°
 = 1;

218 
	}
}

220 
	$put°rög
(c⁄° * 
s
)

222 *
s
)

223 
	`mˇŒ_c⁄sﬁe_putch¨
(*
s
++);

224 
	}
}

226 
	$¥ötm
(c⁄° * 
s
, ...)

228 
buf
[4096];

229 
va_li°
 
vl
;

231 
	`va_°¨t
(
vl
, 
s
);

232 
	`v¢¥ötf
(
buf
,  buf, 
s
, 
vl
);

233 
	`va_íd
(
vl
);

235 
	`put°rög
(
buf
);

236 
	}
}

238 
	$£nd_ùi
(
uöçå_t
 
ªcùõ¡
, 
evít
)

240 i‡((
	`©omic_‹
(&
	`OTHER_HLS
(
ªcùõ¡
)->
mùi_≥ndög
, 
evít
) &Évent) == 0) {

241 
	`mb
();

242 *
	`OTHER_HLS
(
ªcùõ¡
)->
ùi
 = 1;

244 
	}
}

246 
uöçå_t
 
	$mˇŒ_£nd_ùi
(
uöçå_t
 
ªcùõ¡
)

248 i‡(
ªcùõ¡
 >
num_h¨ts
)

251 
	`£nd_ùi
(
ªcùõ¡
, 
IPI_SOFT
);

253 
	}
}

255 
	$ª£t_ssù
()

257 
	`˛ór_c§
(
mù
, 
MIP_SSIP
);

258 
	`mb
();

260 i‡(
	`HLS
()->
sùi_≥ndög
 || HLS()->
c⁄sﬁe_ibuf
 > 0)

261 
	`£t_c§
(
mù
, 
MIP_SSIP
);

262 
	}
}

264 
uöçå_t
 
	$mˇŒ_c⁄sﬁe_gëch¨
()

266 
ch
 = 
	`©omic_sw≠
(&
	`HLS
()->
c⁄sﬁe_ibuf
, -1);

267 if(
u¨t
 == 0)

269 i‡(
ch
 >= 0)

270 
	`ªque°_htif_keybﬂrd_öãºu±
();

272 
	`ª£t_ssù
();

273  
ch
 - 1;

274 
	}
}

276 
uöçå_t
 
	$mˇŒ_˛ór_ùi
()

278 
ùi
 = 
	`©omic_sw≠
(&
	`HLS
()->
sùi_≥ndög
, 0);

279 
	`ª£t_ssù
();

280  
ùi
;

281 
	}
}

283 
uöçå_t
 
	$mˇŒ_shutdown
()

285 
	`powîoff
();

286 
	}
}

288 
uöçå_t
 
	$mˇŒ_£t_timî
(
uöt64_t
 
whí
)

290 *
	`HLS
()->
timecmp
 = 
whí
;

291 
	`˛ór_c§
(
mù
, 
MIP_STIP
);

292 
	`£t_c§
(
mõ
, 
MIP_MTIP
);

294 
	}
}

296 
	$so·w¨e_öãºu±
()

298 *
	`HLS
()->
ùi
 = 0;

299 
	`mb
();

300 
ùi_≥ndög
 = 
	`©omic_sw≠
(&
	`HLS
()->
mùi_≥ndög
, 0);

302 i‡(
ùi_≥ndög
 & 
IPI_SOFT
) {

303 
	`HLS
()->
sùi_≥ndög
 = 1;

304 
	`£t_c§
(
mù
, 
MIP_SSIP
);

307 i‡(
ùi_≥ndög
 & 
IPI_FENCE_I
)

308 
asm
 volatile ("fence.i");

310 i‡(
ùi_≥ndög
 & 
IPI_SFENCE_VM
)

311 
asm
 volatile ("sfence.vm");

312 
	}
}

314 
	$£nd_ùi_m™y
(
uöçå_t
* 
pmask
, 
evít
)

316 
	`_Sètic_as£π
(
MAX_HARTS
 <8 * (*
pmask
), "# harts > uintptr_t bits");

317 
uöçå_t
 
mask
 = -1;

318 i‡(
pmask
)

319 
mask
 = *
pmask
;

322 
ssize_t
 
i
 = 
num_h¨ts
-1; i >= 0; i--)

323 i‡((
mask
 >> 
i
) & 1)

324 
	`£nd_ùi
(
i
, 
evít
);

328 
ssize_t
 
i
 = 
num_h¨ts
-1; i >= 0; i--)

329 i‡((
mask
 >> 
i
) & 1)

330 
	`OTHER_HLS
(
i
)->
mùi_≥ndög
 & 
evít
)

331 
	`so·w¨e_öãºu±
();

332 
	}
}

334 
uöçå_t
 
	$mˇŒ_ªmŸe_s„n˚_vm
(
uöçå_t
* 
h¨t_mask
, uöçå_à
asid
)

338 
	`£nd_ùi_m™y
(
h¨t_mask
, 
IPI_SFENCE_VM
);

340 
	}
}

342 
uöçå_t
 
	$mˇŒ_ªmŸe_„n˚_i
(
uöçå_t
* 
h¨t_mask
)

344 
	`£nd_ùi_m™y
(
h¨t_mask
, 
IPI_FENCE_I
);

346 
	}
}

348 
	$ªdúe˘_å≠
(
uöçå_t
 
ïc
, uöçå_à
m°©us
)

350 
	`wrôe_c§
(
£pc
, 
ïc
);

351 
	`wrôe_c§
(
sˇu£
, 
	`ªad_c§
(
mˇu£
));

352 
	`wrôe_c§
(
mïc
, 
	`ªad_c§
(
°vec
));

354 
uöçå_t
 
√w_m°©us
 = 
m°©us
 & ~(
MSTATUS_SPP
 | 
MSTATUS_SPIE
 | 
MSTATUS_MPIE
);

355 
uöçå_t
 
mµ_s
 = 
MSTATUS_MPP
 & (MSTATUS_MPP >> 1);

356 
√w_m°©us
 |(
m°©us
 / (
MSTATUS_MPIE
 / 
MSTATUS_SPIE
)) & MSTATUS_SPIE;

357 
√w_m°©us
 |(
m°©us
 / (
mµ_s
 / 
MSTATUS_SPP
)) & MSTATUS_SPP;

358 
√w_m°©us
 |
mµ_s
;

359 
	`wrôe_c§
(
m°©us
, 
√w_m°©us
);

361 
	`__ªdúe˘_å≠
();

362  
	`__ªdúe˘_å≠
();

363 
	}
}

365 
	$mˇŒ_å≠
(
uöçå_t
* 
ªgs
, uöçå_à
mˇu£
, uöçå_à
mïc
)

367 
uöçå_t
 
n
 = 
ªgs
[17], 
¨g0
 =Ñegs[10], 
¨g1
 =Ñegs[11], 
ªtvÆ
;

368 
n
)

370 
MCALL_HART_ID
:

371 
ªtvÆ
 = 
	`mˇŒ_h¨t_id
();

373 
MCALL_CONSOLE_PUTCHAR
:

374 
ªtvÆ
 = 
	`mˇŒ_c⁄sﬁe_putch¨
(
¨g0
);

376 
MCALL_CONSOLE_GETCHAR
:

377 
ªtvÆ
 = 
	`mˇŒ_c⁄sﬁe_gëch¨
();

379 
MCALL_HTIF_SYSCALL
:

380 
ªtvÆ
 = 
	`mˇŒ_htif_sysˇŒ
(
¨g0
);

382 
MCALL_SEND_IPI
:

383 
ªtvÆ
 = 
	`mˇŒ_£nd_ùi
(
¨g0
);

385 
MCALL_CLEAR_IPI
:

386 
ªtvÆ
 = 
	`mˇŒ_˛ór_ùi
();

388 
MCALL_SHUTDOWN
:

389 
ªtvÆ
 = 
	`mˇŒ_shutdown
();

391 
MCALL_SET_TIMER
:

392 #i‡
__riscv_xÀn
 == 32

393 
ªtvÆ
 = 
	`mˇŒ_£t_timî
(
¨g0
 + ((
uöt64_t
)
¨g1
 << 32));

395 
ªtvÆ
 = 
	`mˇŒ_£t_timî
(
¨g0
);

398 
MCALL_REMOTE_SFENCE_VM
:

399 
ªtvÆ
 = 
	`mˇŒ_ªmŸe_s„n˚_vm
((
uöçå_t
*)
¨g0
, 
¨g1
);

401 
MCALL_REMOTE_FENCE_I
:

402 
ªtvÆ
 = 
	`mˇŒ_ªmŸe_„n˚_i
((
uöçå_t
*)
¨g0
);

405 
	`ªdúe˘_å≠
(
	`ªad_c§
(
mïc
),Ñód_c§(
m°©us
));

406 
ªtvÆ
 = -
ENOSYS
;

409 
ªgs
[10] = 
ªtvÆ
;

410 
	`wrôe_c§
(
mïc
, mepc + 4);

411 
	}
}

413 
	$machöe_∑ge_Áu…
(
uöçå_t
* 
ªgs
, uöçå_à
mïc
)

417 i‡(
	`ªad_c§
(
m°©us
Ë& 
MSTATUS_MPRV
) {

418 
	`wrôe_c§
(
sbadaddr
, 
	`ªad_c§
(
mbadaddr
));

419  
	`ªdúe˘_å≠
(
ªgs
[12],Ñegs[13]);

421 
	`bad_å≠
();

422 
	}
}

424 
	$å≠_‰om_machöe_mode
(
uöçå_t
* 
ªgs
, uöçå_à
dummy
, uöçå_à
mïc
)

426 
uöçå_t
 
mˇu£
 = 
	`ªad_c§
(mcause);

428 *
	`mißlig√d_lﬂd_å≠
(
uöçå_t
*, uintptr_t, uintptr_t);

429 *
	`mißlig√d_°‹e_å≠
(
uöçå_t
*, uintptr_t, uintptr_t);

431 
mˇu£
)

433 
CAUSE_MISALIGNED_LOAD
:

434 
	`mißlig√d_lﬂd_å≠
(
ªgs
, 
mˇu£
, 
mïc
);

437 
CAUSE_MISALIGNED_STORE
:

438 
	`mißlig√d_°‹e_å≠
(
ªgs
, 
mˇu£
, 
mïc
);

441 
CAUSE_FAULT_LOAD
:

442 
CAUSE_FAULT_STORE
:

443  
	`machöe_∑ge_Áu…
(
ªgs
, 
mïc
);

445 
IRQ_M_TIMER
 | (~(()(~0) >> 1u)):

446 
	`¥ötm
("100Åicks!!\n");

447 *
	`HLS
()->
timecmp
 = *
mtime
 + 0x100000;

451 
	`bad_å≠
();

453 
	}
}

	@machine/mtrap.h

1 #i‚de‡
_RISCV_MTRAP_H


2 
	#_RISCV_MTRAP_H


	)

4 
	~"ícodög.h
"

6 #ifde‡
__riscv_©omic


7 
	#MAX_HARTS
 8

8 #ñ£

	)

9 
	#MAX_HARTS
 1

	)

12 #i‚de‡
__ASSEMBLER__


14 
	~"sbi.h
"

15 
	~<°döt.h
>

16 
	~<°ddef.h
>

18 
	#ªad_c⁄°_c§
(
ªg
Ë({ 
__tmp
; \

19 
	`asm
 ("c§∏%0, " #ªg : "Ù"(
__tmp
)); \

20 
__tmp
; })

	)

22 
ölöe
 
	$suµ‹ts_exãnsi⁄
(
ext
)

24  
	`ªad_c⁄°_c§
(
miß
Ë& (1 << (
ext
 - 'A'));

25 
	}
}

27 
ölöe
 
	$xÀn
()

29  
	`ªad_c⁄°_c§
(
miß
) < 0 ? 64 : 32;

30 
	}
}

32 
uöçå_t
 
fú°_‰ì_∑ddr
;

33 
uöçå_t
 
mem_size
;

34 
uöçå_t
 
num_h¨ts
;

35 vﬁ©ûê
uöt64_t
* 
mtime
;

36 vﬁ©ûê
uöt32_t
* 
∂ic_¥i‹ôõs
;

37 
size_t
 
∂ic_ndevs
;

40 vﬁ©ûê
uöt64_t
* 
	mtimecmp
;

41 vﬁ©ûê
uöt32_t
* 
	mùi
;

42 vﬁ©ûê
	mmùi_≥ndög
;

43 vﬁ©ûê
	msùi_≥ndög
;

44 
	mc⁄sﬁe_ibuf
;

46 vﬁ©ûê
uöt32_t
* 
	m∂ic_m_thªsh
;

47 vﬁ©ûê
uöçå_t
* 
	m∂ic_m_õ
;

48 vﬁ©ûê
uöt32_t
* 
	m∂ic_s_thªsh
;

49 vﬁ©ûê
uöçå_t
* 
	m∂ic_s_õ
;

50 } 
	thls_t
;

52 
	#IPI_SOFT
 0x1

	)

53 
	#IPI_FENCE_I
 0x2

	)

54 
	#IPI_SFENCE_VM
 0x4

	)

56 
	#MACHINE_STACK_TOP
() ({ \

57 
uöçå_t
 
•
 
	`asm
 ("sp"); \

58 (*)((
•
 + 
RISCV_PGSIZE
Ë& -RISCV_PGSIZE); })

	)

61 
	#HLS
(Ë((
hls_t
*)(
	`MACHINE_STACK_TOP
(Ë- 
HLS_SIZE
))

	)

62 
	#OTHER_HLS
(
id
Ë((
hls_t
*)((*)
	`HLS
(Ë+ 
RISCV_PGSIZE
 * ((idË- 
	`ªad_c⁄°_c§
(
mh¨tid
))))

	)

64 
hls_t
* 
hls_öô
(
uöçå_t
 
h¨t_id
);

65 
∑r£_c⁄fig_°rög
();

66 
	$powîoff
(Ë
	`__©åibuã
((
n‹ëu∫
));

67 
	`¥ötm
(c⁄° * 
s
, ...);

68 
	`put°rög
(c⁄° * 
s
);

69 
	#as£π
(
x
Ë({ i‡(!(x)Ë
	`dõ
("as£πi⁄ faûed: %s", #x); 
	}
})

	)

70 
	#dõ
(
°r
, ...Ë({ 
	`¥ötm
("%s:%d: " så "\n", 
__FILE__
, 
__LINE__
, ##
__VA_ARGS__
); 
	`powîoff
(); })

	)

71 
	#log
(
°r
, ...Ë({ 
	`¥ötm
("%s:%d: " så "\n", 
__FILE__
, 
__LINE__
, ##
__VA_ARGS__
);})

	)

73 
	$íãr_su≥rvis‹_mode
((*
‚
)(
uöçå_t
), uöçå_à
°ack
)

74 
	`__©åibuã__
((
n‹ëu∫
));

75 
	`boŸ_lﬂdî
();

76 
	`boŸ_Ÿhî_h¨t
();

78 
ölöe
 
	$wfi
()

80 
asm
 volatile ("wfi" ::: "memory");

81 
	}
}

85 
	#MACHINE_STACK_SIZE
 
RISCV_PGSIZE


	)

86 
	#MENTRY_FRAME_SIZE
 (
INTEGER_CONTEXT_SIZE
 + 
SOFT_FLOAT_CONTEXT_SIZE
 \

87 + 
HLS_SIZE
)

	)

89 #ifde‡
__riscv_Êí


90 
	#SOFT_FLOAT_CONTEXT_SIZE
 0

	)

92 
	#SOFT_FLOAT_CONTEXT_SIZE
 (8 * 32)

	)

94 
	#HLS_SIZE
 64

	)

95 
	#INTEGER_CONTEXT_SIZE
 (32 * 
REGBYTES
)

	)

	@machine/muldiv_emulation.c

1 
	~"emuœti⁄.h
"

3 #i‚de‡
__riscv_muldiv


5 #i‡
__riscv_xÀn
 == 64

6 
__öt128
 
	tdoubÀ_öt
;

8 
öt64_t
 
	tdoubÀ_öt
;

14 
	$DECLARE_EMULATION_FUNC
(
emuœã_mul_div
)

16 
uöçå_t
 
rs1
 = 
	`GET_RS1
(
ö¢
, 
ªgs
), 
rs2
 = 
	`GET_RS2
(ö¢,Ñegs), 
vÆ
;

18 i‡((
ö¢
 & 
MASK_MUL
Ë=
MATCH_MUL
)

19 
vÆ
 = 
rs1
 * 
rs2
;

20 i‡((
ö¢
 & 
MASK_DIV
Ë=
MATCH_DIV
)

21 
vÆ
 = (
öçå_t
)
rs1
 / (öçå_t)
rs2
;

22 i‡((
ö¢
 & 
MASK_DIVU
Ë=
MATCH_DIVU
)

23 
vÆ
 = 
rs1
 / 
rs2
;

24 i‡((
ö¢
 & 
MASK_REM
Ë=
MATCH_REM
)

25 
vÆ
 = (
öçå_t
)
rs1
 % (öçå_t)
rs2
;

26 i‡((
ö¢
 & 
MASK_REMU
Ë=
MATCH_REMU
)

27 
vÆ
 = 
rs1
 % 
rs2
;

28 i‡((
ö¢
 & 
MASK_MULH
Ë=
MATCH_MULH
)

29 
vÆ
 = ((
doubÀ_öt
)(
öçå_t
)
rs1
 * (doubÀ_öt)(öçå_t)
rs2
) >> (8 * (rs1));

30 i‡((
ö¢
 & 
MASK_MULHU
Ë=
MATCH_MULHU
)

31 
vÆ
 = ((
doubÀ_öt
)
rs1
 * (doubÀ_öt)
rs2
) >> (8 * (rs1));

32 i‡((
ö¢
 & 
MASK_MULHSU
Ë=
MATCH_MULHSU
)

33 
vÆ
 = ((
doubÀ_öt
)(
öçå_t
)
rs1
 * (doubÀ_öt)
rs2
) >> (8 * (rs1));

35  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

37 
	`SET_RD
(
ö¢
, 
ªgs
, 
vÆ
);

38 
	}
}

40 #i‡
__riscv_xÀn
 == 64

42 
	$DECLARE_EMULATION_FUNC
(
emuœã_mul_div32
)

44 
uöt32_t
 
rs1
 = 
	`GET_RS1
(
ö¢
, 
ªgs
), 
rs2
 = 
	`GET_RS2
(insn,Ñegs);

45 
öt32_t
 
vÆ
;

47 i‡((
ö¢
 & 
MASK_MULW
Ë=
MATCH_MULW
)

48 
vÆ
 = 
rs1
 * 
rs2
;

49 i‡((
ö¢
 & 
MASK_DIVW
Ë=
MATCH_DIVW
)

50 
vÆ
 = (
öt32_t
)
rs1
 / (öt32_t)
rs2
;

51 i‡((
ö¢
 & 
MASK_DIVUW
Ë=
MATCH_DIVUW
)

52 
vÆ
 = 
rs1
 / 
rs2
;

53 i‡((
ö¢
 & 
MASK_REMW
Ë=
MATCH_REMW
)

54 
vÆ
 = (
öt32_t
)
rs1
 % (öt32_t)
rs2
;

55 i‡((
ö¢
 & 
MASK_REMUW
Ë=
MATCH_REMUW
)

56 
vÆ
 = 
rs1
 % 
rs2
;

58  
	`åuly_ûÀgÆ_ö¢
(
ªgs
, 
mˇu£
, 
mïc
, 
m°©us
, 
ö¢
);

60 
	`SET_RD
(
ö¢
, 
ªgs
, 
vÆ
);

61 
	}
}

	@machine/sbi.S

1 .
globl
 
	gsbi_h¨t_id
; sbi_hart_id = -2048

2 .
globl
 
sbi_num_h¨ts
; 
	gsbi_num_h¨ts
 = -2032

3 .
globl
 
sbi_quîy_mem‹y
; 
	gsbi_quîy_mem‹y
 = -2016

4 .
globl
 
sbi_c⁄sﬁe_putch¨
; 
	gsbi_c⁄sﬁe_putch¨
 = -2000

5 .
globl
 
sbi_c⁄sﬁe_gëch¨
; 
	gsbi_c⁄sﬁe_gëch¨
 = -1984

6 .
globl
 
sbi_£nd_ùi
; 
	gsbi_£nd_ùi
 = -1952

7 .
globl
 
sbi_˛ór_ùi
; 
	gsbi_˛ór_ùi
 = -1936

8 .
globl
 
sbi_timeba£
; 
	gsbi_timeba£
 = -1920

9 .
globl
 
sbi_shutdown
; 
	gsbi_shutdown
 = -1904

10 .
globl
 
sbi_£t_timî
; 
	gsbi_£t_timî
 = -1888

11 .
globl
 
sbi_mask_öãºu±
; 
	gsbi_mask_öãºu±
 = -1872

12 .
globl
 
sbi_unmask_öãºu±
; 
	gsbi_unmask_öãºu±
 = -1856

13 .
globl
 
sbi_ªmŸe_s„n˚_vm
; 
	gsbi_ªmŸe_s„n˚_vm
 = -1840

14 .
globl
 
sbi_ªmŸe_s„n˚_vm_ønge
; 
	gsbi_ªmŸe_s„n˚_vm_ønge
 = -1824

15 .
globl
 
sbi_ªmŸe_„n˚_i
; 
	gsbi_ªmŸe_„n˚_i
 = -1808

	@machine/sbi.h

1 #i‚de‡
_ASM_RISCV_SBI_H


2 
	#_ASM_RISCV_SBI_H


	)

5 
	mba£
;

6 
	msize
;

7 
	mnode_id
;

8 } 
	tmem‹y_block_öfo
;

10 
sbi_quîy_mem‹y
(
id
, 
mem‹y_block_öfo
 *
p
);

12 
sbi_h¨t_id
();

13 
sbi_num_h¨ts
();

14 
sbi_timeba£
();

15 
sbi_£t_timî
(
°ime_vÆue
);

16 
sbi_£nd_ùi
(
h¨t_id
);

17 
sbi_˛ór_ùi
();

18 
sbi_shutdown
();

20 
sbi_c⁄sﬁe_putch¨
(
ch
);

21 
sbi_c⁄sﬁe_gëch¨
();

23 
sbi_ªmŸe_s„n˚_vm
(
h¨t_mask_±r
, 
asid
);

24 
sbi_ªmŸe_s„n˚_vm_ønge
(
h¨t_mask_±r
, 
asid
, 
°¨t
, 
size
);

25 
sbi_ªmŸe_„n˚_i
(
h¨t_mask_±r
);

27 
sbi_mask_öãºu±
(
which
);

28 
sbi_unmask_öãºu±
(
which
);

	@machine/sbi_entry.S

1 
	~"ícodög.h
"

2 
	~"mˇŒ.h
"

4 .
	g£˘i⁄
 .
	gsbi
,"ax",@
	g¥ogbôs


5 .
›ti⁄
 
	gn‹vc


6 .
Æign
 
	gRISCV_PGSHIFT


7 .
globl
 
sbi_ba£


8 
	gsbi_ba£
:

10 #TODO: 
figuª
 
out
 
somëhög
 
bëãr
 
to
 dÿ
wôh
 
this
 
•a˚
. 
It
'sÇot

11 #¥Ÿe˘ed 
‰om
 
the
 
OS
, 
so
 
bew¨e
.

12 .
skù
 
	gRISCV_PGSIZE
 - 2048

15 .
	gÆign
 4

16 
li
 
	ga7
, 
MCALL_HART_ID


17 
eˇŒ


18 
	gªt


21 .
	gÆign
 4

22 
lw
 
	ga0
, 
num_h¨ts


23 
	gªt


26 .
	gÆign
 4

27 
èû
 
	g__sbi_quîy_mem‹y


30 .
	gÆign
 4

31 
li
 
	ga7
, 
MCALL_CONSOLE_PUTCHAR


32 
eˇŒ


33 
	gªt


36 .
	gÆign
 4

37 
li
 
	ga7
, 
MCALL_CONSOLE_GETCHAR


38 
eˇŒ


39 
	gªt


42 .
	gÆign
 4

43 
	gunimp


45 #£nd 
ùi


46 .
	gÆign
 4

47 
li
 
	ga7
, 
MCALL_SEND_IPI


48 
eˇŒ


49 
	gªt


51 #˛ó∏
ùi


52 .
	gÆign
 4

53 
li
 
	ga7
, 
MCALL_CLEAR_IPI


54 
eˇŒ


55 
	gªt


58 .
	gÆign
 4

59 #lò
a0
, 50000000 #‹, 
you
 
know
, 
we
 
could
 
¥ovide
 
the
 
c‹ª˘
 
™swî


60 
li
 
	ga0
, 200000000 #‹, 
you
 
	gknow
, 
we
 
could
 
¥ovide
 
the
 
c‹ª˘
 
™swî


61 
	gªt


64 .
	gÆign
 4

65 
li
 
	ga7
, 
MCALL_SHUTDOWN


66 
	geˇŒ


69 .
	gÆign
 4

70 
li
 
	ga7
, 
MCALL_SET_TIMER


71 
eˇŒ


72 
	gªt


75 .
	gÆign
 4

76 
èû
 
	g__sbi_mask_öãºu±


79 .
	gÆign
 4

80 
èû
 
	g__sbi_unmask_öãºu±


83 .
	gÆign
 4

84 
li
 
	ga7
, 
MCALL_REMOTE_SFENCE_VM


85 
eˇŒ


86 
	gªt


89 .
	gÆign
 4

90 
li
 
	ga7
, 
MCALL_REMOTE_SFENCE_VM


91 
eˇŒ


92 
	gªt


95 .
	gÆign
 4

96 
li
 
	ga7
, 
MCALL_REMOTE_FENCE_I


97 
eˇŒ


98 
	gªt


100 #íd 
of
 
SBI
 
åampﬁöes


102 .
globl
 
do_mˇŒ


103 
	gdo_mˇŒ
:

104 
mv
 
a7
, 
a0


105 
mv
 
	ga0
, 
a1


106 
mv
 
	ga1
, 
a2


107 
eˇŒ


108 
	gªt


110 .
Æign
 
	gRISCV_PGSHIFT


111 .
globl
 
_sbi_íd


112 
	g_sbi_íd
:

	@machine/sbi_impl.c

1 
	~"må≠.h
"

2 
	~"sbi.h
"

4 
uöçå_t
 
	$__sbi_quîy_mem‹y
(
uöçå_t
 
id
, 
mem‹y_block_öfo
 *
p
)

6 i‡(
id
 == 0) {

7 
p
->
ba£
 = 
fú°_‰ì_∑ddr
;

8 
p
->
size
 = 
mem_size
 + 
DRAM_BASE
 -Ö->
ba£
;

13 
	}
}

15 
	#LOW_IRQ_OK
(
n
Ë(“Ë=
IRQ_S_SOFT
 || (nË=
IRQ_S_TIMER
)

	)

17 
uöçå_t
 
	$__sbi_mask_öãºu±
(
uöçå_t
 
which
)

19 i‡(!
	`LOW_IRQ_OK
(
which
))

22 
	`˛ór_c§
(
sõ
, 1UL << 
which
);

24 
	}
}

26 
uöçå_t
 
	$__sbi_unmask_öãºu±
(
uöçå_t
 
which
)

28 i‡(!
	`LOW_IRQ_OK
(
which
))

31 
	`£t_c§
(
sõ
, 1UL << 
which
);

33 
	}
}

	@machine/unprivileged_memory.h

1 #i‚de‡
_RISCV_MISALIGNED_H


2 
	#_RISCV_MISALIGNED_H


	)

4 
	~"ícodög.h
"

5 
	~<°döt.h
>

7 
	#DECLARE_UNPRIVILEGED_LOAD_FUNCTION
(
ty≥
, 
ö¢
) \

8 
ölöe
 
ty≥
 
lﬂd_
##
	`ty≥
(c⁄°Åy≥* 
addr
, 
uöçå_t
 
mïc
) \

10 
uöçå_t
 
__mïc
 
	`asm
 ("a2"Ë
mïc
; \

11 
uöçå_t
 
__m°©us
 
	`asm
 ("a3"); \

12 
ty≥
 
vÆ
; \

13 
	`asm
 ("csrrs %0, mstatus, %3\n" \

16 : "+&r" (
__m°©us
), "=&r" (
vÆ
) \

17 : "m" (*
addr
), "r" (
MSTATUS_MPRV
), "r" (
__mïc
)); \

18  
vÆ
; \

19 }

	)

21 
	#DECLARE_UNPRIVILEGED_STORE_FUNCTION
(
ty≥
, 
ö¢
) \

22 
ölöe
 
°‹e_
##
	`ty≥
(
ty≥
* 
addr
,Åy≥ 
vÆ
, 
uöçå_t
 
mïc
) \

24 
uöçå_t
 
__mïc
 
	`asm
 ("a2"Ë
mïc
; \

25 
uöçå_t
 
__m°©us
 
	`asm
 ("a3"); \

26 
asm
 volatile ("csrrs %0, mstatus, %3\n" \

29 : "+&r" (
__m°©us
) \

30 : "r" (
vÆ
), "m" (*
addr
), "r" (
MSTATUS_MPRV
), \

31 "r" (
__mïc
)); \

32 }

	)

34 
	$DECLARE_UNPRIVILEGED_LOAD_FUNCTION
(
uöt8_t
, 
lbu
)

35 
	$DECLARE_UNPRIVILEGED_LOAD_FUNCTION
(
uöt16_t
, 
lhu
)

36 
	$DECLARE_UNPRIVILEGED_LOAD_FUNCTION
(
öt8_t
, 
lb
)

37 
	$DECLARE_UNPRIVILEGED_LOAD_FUNCTION
(
öt16_t
, 
lh
)

38 
	$DECLARE_UNPRIVILEGED_LOAD_FUNCTION
(
öt32_t
, 
lw
)

39 
	$DECLARE_UNPRIVILEGED_STORE_FUNCTION
(
uöt8_t
, 
sb
)

40 
	$DECLARE_UNPRIVILEGED_STORE_FUNCTION
(
uöt16_t
, 
sh
)

41 
	$DECLARE_UNPRIVILEGED_STORE_FUNCTION
(
uöt32_t
, 
sw
)

42 #i‡
__riscv_xÀn
 == 64

43 
	$DECLARE_UNPRIVILEGED_LOAD_FUNCTION
(
uöt32_t
, 
lwu
)

44 
	$DECLARE_UNPRIVILEGED_LOAD_FUNCTION
(
uöt64_t
, 
ld
)

45 
	$DECLARE_UNPRIVILEGED_STORE_FUNCTION
(
uöt64_t
, 
sd
)

47 
	$DECLARE_UNPRIVILEGED_LOAD_FUNCTION
(
uöt32_t
, 
lw
)

50 
uöt32_t
 
	`__©åibuã__
((
Æways_ölöe
)Ë
	$gë_ö¢
(
uöçå_t
 
mïc
, uöçå_t* 
m°©us
)

52 
uöçå_t
 
__mïc
 
	`asm
 ("a2"Ë
mïc
;

53 
uöçå_t
 
__m°©us
 
	`asm
 ("a3");

54 
uöt32_t
 
vÆ
;

55 #i‚de‡
__riscv_com¥es£d


56 
	`asm
 ("csrrs %[mstatus], mstatus, %[mprv]\n"

59 : [
m°©us
] "+&r" (
__m°©us
), [
ö¢
] "=&r" (
vÆ
)

60 : [
m¥v
] "r" (
MSTATUS_MPRV
 | 
MSTATUS_MXR
), [
addr
] "r" (
__mïc
));

62 
uöçå_t
 
rvc_mask
 = 3, 
tmp
;

63 
	`asm
 ("csrrs %[mstatus], mstatus, %[mprv]\n"

71 : [
m°©us
] "+&r" (
__m°©us
), [
ö¢
] "=&r" (
vÆ
), [
tmp
] "=&r" (tmp)

72 : [
m¥v
] "r" (
MSTATUS_MPRV
 | 
MSTATUS_MXR
), [
addr
] "r" (
__mïc
),

73 [
rvc_mask
] "r" (rvc_mask));

75 *
m°©us
 = 
__m°©us
;

76  
vÆ
;

77 
	}
}

	@machine/vm.h

1 #i‚de‡
_VM_H


2 
	#_VM_H


	)

4 
	~"ícodög.h
"

5 
	~<°döt.h
>

7 
	#MEGAPAGE_SIZE
 ((
uöçå_t
)(
RISCV_PGSIZE
 << 
RISCV_PGLEVEL_BITS
))

	)

8 #i‡
__riscv_xÀn
 == 64

9 
	#VM_CHOICE
 
VM_SV39


	)

10 
	#VA_BITS
 39

	)

11 
	#GIGAPAGE_SIZE
 (
MEGAPAGE_SIZE
 << 
RISCV_PGLEVEL_BITS
)

	)

13 
	#VM_CHOICE
 
VM_SV32


	)

14 
	#VA_BITS
 32

	)

17 
uöçå_t
 
	t±e_t
;

18 
±e_t
* 
roŸ_∑ge_èbÀ
;

20 
ölöe
 
	$Êush_éb
()

22 
asm
 volatile("sfence.vm");

23 
	}
}

25 
ölöe
 
±e_t
 
	$±e_¸óã
(
uöçå_t
 
µn
, 
ty≥
)

27  (
µn
 << 
PTE_PPN_SHIFT
Ë| 
PTE_V
 | 
ty≥
;

28 
	}
}

30 
ölöe
 
±e_t
 
	$±d_¸óã
(
uöçå_t
 
µn
)

32  
	`±e_¸óã
(
µn
, 
PTE_V
);

33 
	}
}

	@pk/boot.h

3 #i‚de‡
_BOOT_H


4 
	#_BOOT_H


	)

6 #i‚de‡
__ASSEMBLER__


8 
	~<°ddef.h
>

11 
	mphít
;

12 
	mphnum
;

13 
	mis_su≥rvis‹
;

14 
size_t
 
	mphdr
;

15 
size_t
 
	mphdr_size
;

16 
size_t
 
	mbüs
;

17 
size_t
 
	míåy
;

18 
size_t
 
	mbrk_mö
;

19 
size_t
 
	mbrk
;

20 
size_t
 
	mbrk_max
;

21 
size_t
 
	mmm≠_max
;

22 
size_t
 
	m°ack_t›
;

23 
size_t
 
	mtime0
;

24 
size_t
 
	mcy˛e0
;

25 
size_t
 
	mö°ªt0
;

26 } 
	tñf_öfo
;

28 
ñf_öfo
 
cuºít
;

30 
lﬂd_ñf
(c⁄° * 
‚
, 
ñf_öfo
* 
öfo
);

	@pk/console.c

1 
	~"pk.h
"

2 
	~"fûe.h
"

3 
	~"‰⁄ãnd.h
"

4 
	~<°döt.h
>

5 
	~<°d¨g.h
>

7 
	$v¥ötk
(c⁄° * 
s
, 
va_li°
 
vl
)

9 
out
[256];

10 
ªs
 = 
	`v¢¥ötf
(
out
, (out), 
s
, 
vl
);

11 
	`fûe_wrôe
(
°dîr
, 
out
, 
ªs
 < (out) ?Ñes : (out));

12 
	}
}

14 
	$¥ötk
(c⁄° * 
s
, ...)

16 
va_li°
 
vl
;

17 
	`va_°¨t
(
vl
, 
s
);

19 
	`v¥ötk
(
s
, 
vl
);

21 
	`va_íd
(
vl
);

22 
	}
}

24 
	$dump_tf
(
å≠‰ame_t
* 
tf
)

26 c⁄° * 
ªg«mes
[] = {

33 
tf
->
g¥
[0] = 0;

35 
i
 = 0; i < 32; i+=4)

37 
j
 = 0; j < 4; j++)

38 
	`¥ötk
("%†%lx%c",
ªg«mes
[
i
+
j
],
tf
->
g¥
[i+j],j < 3 ? ' ' : '\n');

40 
	`¥ötk
("p¯%lx v®%lx in¢ %x s∏%lx\n", 
tf
->
ïc
,Åf->
badvaddr
,

41 (
uöt32_t
)
tf
->
ö¢
,Åf->
°©us
);

42 
	}
}

44 
	$do_∑nic
(c⁄° * 
s
, ...)

46 
va_li°
 
vl
;

47 
	`va_°¨t
(
vl
, 
s
);

49 
	`v¥ötk
(
s
, 
vl
);

50 
	`shutdown
(-1);

52 
	`va_íd
(
vl
);

53 
	}
}

55 
	$kas£π_Áû
(c⁄° * 
s
)

57 
uöçå_t
 
ø
 
	`asm
 ("ra");

58 
	`do_∑nic
("as£πi⁄ faûed @ %p: %s\n", 
ø
, 
s
);

59 
	}
}

	@pk/elf.c

3 
	~"mm≠.h
"

4 
	~"pk.h
"

5 
	~"må≠.h
"

6 
	~"boŸ.h
"

7 
	~"bôs.h
"

8 
	~<sys/°©.h
>

9 
	~<f˙é.h
>

10 
	~<ñf.h
>

11 
	~<°rög.h
>

17 
ölöe
 
	$gë_¥Ÿ
(
uöt32_t
 
p_Êags
)

19 
¥Ÿ_x
 = (
p_Êags
 & 
PF_X
Ë? 
PROT_EXEC
 : 
PROT_NONE
;

20 
¥Ÿ_w
 = (
p_Êags
 & 
PF_W
Ë? 
PROT_WRITE
 : 
PROT_NONE
;

21 
¥Ÿ_r
 = (
p_Êags
 & 
PF_R
Ë? 
PROT_READ
 : 
PROT_NONE
;

23  (
¥Ÿ_x
 | 
¥Ÿ_w
 | 
¥Ÿ_r
);

24 
	}
}

26 
	$lﬂd_ñf
(c⁄° * 
‚
, 
ñf_öfo
* 
öfo
)

28 
fûe_t
* 
fûe
 = 
	`fûe_›í
(
‚
, 
O_RDONLY
, 0);

29 i‡(
	`IS_ERR_VALUE
(
fûe
))

30 
Áû
;

32 
Elf_Ehdr
 
eh
;

33 
ssize_t
 
ehdr_size
 = 
	`fûe_¥ód
(
fûe
, &
eh
, (eh), 0);

34 i‡(
ehdr_size
 < (
ssize_t
)(
eh
) ||

35 !(
eh
.
e_idít
[0] == '\177' &&Éh.e_ident[1] == 'E' &&

36 
eh
.
e_idít
[2] == 'L' &&Éh.e_ident[3] == 'F'))

37 
Áû
;

39 #i‡
__riscv_xÀn
 == 64

40 
	`as£π
(
	`IS_ELF64
(
eh
));

42 
	`as£π
(
	`IS_ELF32
(
eh
));

45 #i‚de‡
__riscv_com¥es£d


46 
	`as£π
(!(
eh
.
e_Êags
 & 
EF_RISCV_RVC
));

49 
size_t
 
phdr_size
 = 
eh
.
e_phnum
 * (
Elf_Phdr
);

50 i‡(
phdr_size
 > 
öfo
->phdr_size)

51 
Áû
;

52 
ssize_t
 
ªt
 = 
	`fûe_¥ód
(
fûe
, (*)
öfo
->
phdr
, 
phdr_size
, 
eh
.
e_phoff
);

53 i‡(
ªt
 < (
ssize_t
)
phdr_size
)

54 
Áû
;

55 
öfo
->
phnum
 = 
eh
.
e_phnum
;

56 
öfo
->
phít
 = (
Elf_Phdr
);

57 
Elf_Phdr
* 
ph
 = (
	`ty≥of
’h))
öfo
->
phdr
;

60 
uöçå_t
 
max_vaddr
 = 0;

61 
i
 = 0; i < 
eh
.
e_phnum
; i++)

62 i‡(
ph
[
i
].
p_ty≥
 =
PT_LOAD
 &&Öh[i].
p_memsz
)

63 
max_vaddr
 = 
	`MAX
(max_vaddr, 
ph
[
i
].
p_vaddr
 +Öh[i].
p_memsz
);

64 
max_vaddr
 = 
	`ROUNDUP
(max_vaddr, 
RISCV_PGSIZE
);

67 
uöçå_t
 
büs
 = 0;

68 i‡(
eh
.
e_ty≥
 =
ET_DYN
)

69 
büs
 = 
RISCV_PGSIZE
;

71 
öfo
->
íåy
 = 
eh
.
e_íåy
 + 
büs
;

72 
Êags
 = 
MAP_FIXED
 | 
MAP_PRIVATE
;

73 
i
 = 
eh
.
e_phnum
 - 1; i >= 0; i--) {

74 if(
ph
[
i
].
p_ty≥
 =
PT_LOAD
 &&Öh[i].
p_memsz
) {

75 
uöçå_t
 
¥ïad
 = 
ph
[
i
].
p_vaddr
 % 
RISCV_PGSIZE
;

76 
uöçå_t
 
vaddr
 = 
ph
[
i
].
p_vaddr
 + 
büs
;

77 i‡(
vaddr
 + 
ph
[
i
].
p_memsz
 > 
öfo
->
brk_mö
)

78 
öfo
->
brk_mö
 = 
vaddr
 + 
ph
[
i
].
p_memsz
;

79 
Êags2
 = 
Êags
 | (
¥ïad
 ? 
MAP_POPULATE
 : 0);

80 
¥Ÿ
 = 
	`gë_¥Ÿ
(
ph
[
i
].
p_Êags
);

81 i‡(
	`__do_mm≠
(
vaddr
 - 
¥ïad
, 
ph
[
i
].
p_fûesz
 +Öª∑d, 
¥Ÿ
 | 
PROT_WRITE
, 
Êags2
, 
fûe
,Öh[i].
p_off£t
 -Örepad) != vaddr -Örepad)

82 
Áû
;

83 
	`mem£t
((*)
vaddr
 - 
¥ïad
, 0,Örepad);

84 i‡(!(
¥Ÿ
 & 
PROT_WRITE
))

85 i‡(
	`do_m¥Ÿe˘
(
vaddr
 - 
¥ïad
, 
ph
[
i
].
p_fûesz
 +Öª∑d, 
¥Ÿ
))

86 
Áû
;

87 
size_t
 
m≠≥d
 = 
	`ROUNDUP
(
ph
[
i
].
p_fûesz
 + 
¥ïad
, 
RISCV_PGSIZE
) -Örepad;

88 i‡(
ph
[
i
].
p_memsz
 > 
m≠≥d
)

89 i‡(
	`__do_mm≠
(
vaddr
 + 
m≠≥d
, 
ph
[
i
].
p_memsz
 - m≠≥d, 
¥Ÿ
, 
Êags
|
MAP_ANONYMOUS
, 0, 0) != vaddr + mapped)

90 
Áû
;

94 
	`fûe_de¸ef
(
fûe
);

97 
Áû
:

98 
	`∑nic
("couldn'à›í ELFÖrogøm: %s!", 
‚
);

99 
	}
}

	@pk/elf.h

3 #i‚de‡
_ELF_H


4 
	#_ELF_H


	)

6 
	~<°döt.h
>

8 
	#IS_ELF
(
hdr
) \

9 ((
hdr
).
e_idít
[0] == 0x7f && (hdr).e_ident[1] == 'E' && \

10 (
hdr
).
e_idít
[2] ='L' && (hdr).e_idít[3] ='F')

	)

12 
	#IS_ELF32
(
hdr
Ë(
	`IS_ELF
(hdrË&& (hdr).
e_idít
[4] =1)

	)

13 
	#IS_ELF64
(
hdr
Ë(
	`IS_ELF
(hdrË&& (hdr).
e_idít
[4] =2)

	)

15 #i‡
__riscv_xÀn
 == 64

16 
	#Elf_Ehdr
 
Elf64_Ehdr


	)

17 
	#Elf_Phdr
 
Elf64_Phdr


	)

19 
	#Elf_Ehdr
 
Elf32_Ehdr


	)

20 
	#Elf_Phdr
 
Elf32_Phdr


	)

23 
	#ET_EXEC
 2

	)

24 
	#ET_DYN
 3

	)

26 
	#EF_RISCV_RVC
 1

	)

28 
	#PT_LOAD
 1

	)

30 
	#AT_NULL
 0

	)

31 
	#AT_PHDR
 3

	)

32 
	#AT_PHENT
 4

	)

33 
	#AT_PHNUM
 5

	)

34 
	#AT_PAGESZ
 6

	)

35 
	#AT_ENTRY
 9

	)

36 
	#AT_SECURE
 23

	)

37 
	#AT_RANDOM
 25

	)

39 
	#PF_X
 1

	)

40 
	#PF_W
 2

	)

41 
	#PF_R
 4

	)

44 
uöt8_t
 
	me_idít
[16];

45 
uöt16_t
 
	me_ty≥
;

46 
uöt16_t
 
	me_machöe
;

47 
uöt32_t
 
	me_vîsi⁄
;

48 
uöt32_t
 
	me_íåy
;

49 
uöt32_t
 
	me_phoff
;

50 
uöt32_t
 
	me_shoff
;

51 
uöt32_t
 
	me_Êags
;

52 
uöt16_t
 
	me_ehsize
;

53 
uöt16_t
 
	me_phítsize
;

54 
uöt16_t
 
	me_phnum
;

55 
uöt16_t
 
	me_shítsize
;

56 
uöt16_t
 
	me_shnum
;

57 
uöt16_t
 
	me_sh°∫dx
;

58 } 
	tElf32_Ehdr
;

61 
uöt32_t
 
	msh_«me
;

62 
uöt32_t
 
	msh_ty≥
;

63 
uöt32_t
 
	msh_Êags
;

64 
uöt32_t
 
	msh_addr
;

65 
uöt32_t
 
	msh_off£t
;

66 
uöt32_t
 
	msh_size
;

67 
uöt32_t
 
	msh_lök
;

68 
uöt32_t
 
	msh_öfo
;

69 
uöt32_t
 
	msh_addølign
;

70 
uöt32_t
 
	msh_ítsize
;

71 } 
	tElf32_Shdr
;

75 
uöt32_t
 
	mp_ty≥
;

76 
uöt32_t
 
	mp_off£t
;

77 
uöt32_t
 
	mp_vaddr
;

78 
uöt32_t
 
	mp_∑ddr
;

79 
uöt32_t
 
	mp_fûesz
;

80 
uöt32_t
 
	mp_memsz
;

81 
uöt32_t
 
	mp_Êags
;

82 
uöt32_t
 
	mp_Æign
;

83 } 
	tElf32_Phdr
;

87 
uöt32_t
 
	m°_«me
;

88 
uöt32_t
 
	m°_vÆue
;

89 
uöt32_t
 
	m°_size
;

90 
uöt8_t
 
	m°_öfo
;

91 
uöt8_t
 
	m°_Ÿhî
;

92 
uöt16_t
 
	m°_shndx
;

93 } 
	tElf32_Sym
;

96 
uöt8_t
 
	me_idít
[16];

97 
uöt16_t
 
	me_ty≥
;

98 
uöt16_t
 
	me_machöe
;

99 
uöt32_t
 
	me_vîsi⁄
;

100 
uöt64_t
 
	me_íåy
;

101 
uöt64_t
 
	me_phoff
;

102 
uöt64_t
 
	me_shoff
;

103 
uöt32_t
 
	me_Êags
;

104 
uöt16_t
 
	me_ehsize
;

105 
uöt16_t
 
	me_phítsize
;

106 
uöt16_t
 
	me_phnum
;

107 
uöt16_t
 
	me_shítsize
;

108 
uöt16_t
 
	me_shnum
;

109 
uöt16_t
 
	me_sh°∫dx
;

110 } 
	tElf64_Ehdr
;

113 
uöt32_t
 
	msh_«me
;

114 
uöt32_t
 
	msh_ty≥
;

115 
uöt64_t
 
	msh_Êags
;

116 
uöt64_t
 
	msh_addr
;

117 
uöt64_t
 
	msh_off£t
;

118 
uöt64_t
 
	msh_size
;

119 
uöt32_t
 
	msh_lök
;

120 
uöt32_t
 
	msh_öfo
;

121 
uöt64_t
 
	msh_addølign
;

122 
uöt64_t
 
	msh_ítsize
;

123 } 
	tElf64_Shdr
;

126 
uöt32_t
 
	mp_ty≥
;

127 
uöt32_t
 
	mp_Êags
;

128 
uöt64_t
 
	mp_off£t
;

129 
uöt64_t
 
	mp_vaddr
;

130 
uöt64_t
 
	mp_∑ddr
;

131 
uöt64_t
 
	mp_fûesz
;

132 
uöt64_t
 
	mp_memsz
;

133 
uöt64_t
 
	mp_Æign
;

134 } 
	tElf64_Phdr
;

137 
uöt32_t
 
	m°_«me
;

138 
uöt8_t
 
	m°_öfo
;

139 
uöt8_t
 
	m°_Ÿhî
;

140 
uöt16_t
 
	m°_shndx
;

141 
uöt64_t
 
	m°_vÆue
;

142 
uöt64_t
 
	m°_size
;

143 } 
	tElf64_Sym
;

	@pk/entry.S

3 
	~"ícodög.h
"

4 
	~"bôs.h
"

6 .
ma¸o
 
	gßve_tf


7 #ßvê
g¥s


8 
STORE
 
	gx1
,1*
	$REGBYTES
(
x2
)

9 
STORE
 
x3
,3*
	$REGBYTES
(
x2
)

10 
STORE
 
x4
,4*
	$REGBYTES
(
x2
)

11 
STORE
 
x5
,5*
	$REGBYTES
(
x2
)

12 
STORE
 
x6
,6*
	$REGBYTES
(
x2
)

13 
STORE
 
x7
,7*
	$REGBYTES
(
x2
)

14 
STORE
 
x8
,8*
	$REGBYTES
(
x2
)

15 
STORE
 
x9
,9*
	$REGBYTES
(
x2
)

16 
STORE
 
x10
,10*
	$REGBYTES
(
x2
)

17 
STORE
 
x11
,11*
	$REGBYTES
(
x2
)

18 
STORE
 
x12
,12*
	$REGBYTES
(
x2
)

19 
STORE
 
x13
,13*
	$REGBYTES
(
x2
)

20 
STORE
 
x14
,14*
	$REGBYTES
(
x2
)

21 
STORE
 
x15
,15*
	$REGBYTES
(
x2
)

22 
STORE
 
x16
,16*
	$REGBYTES
(
x2
)

23 
STORE
 
x17
,17*
	$REGBYTES
(
x2
)

24 
STORE
 
x18
,18*
	$REGBYTES
(
x2
)

25 
STORE
 
x19
,19*
	$REGBYTES
(
x2
)

26 
STORE
 
x20
,20*
	$REGBYTES
(
x2
)

27 
STORE
 
x21
,21*
	$REGBYTES
(
x2
)

28 
STORE
 
x22
,22*
	$REGBYTES
(
x2
)

29 
STORE
 
x23
,23*
	$REGBYTES
(
x2
)

30 
STORE
 
x24
,24*
	$REGBYTES
(
x2
)

31 
STORE
 
x25
,25*
	$REGBYTES
(
x2
)

32 
STORE
 
x26
,26*
	$REGBYTES
(
x2
)

33 
STORE
 
x27
,27*
	$REGBYTES
(
x2
)

34 
STORE
 
x28
,28*
	$REGBYTES
(
x2
)

35 
STORE
 
x29
,29*
	$REGBYTES
(
x2
)

36 
STORE
 
x30
,30*
	$REGBYTES
(
x2
)

37 
STORE
 
x31
,31*
	$REGBYTES
(
x2
)

39 #gë 
§
, 
ïc
, 
badvaddr
, 
ˇu£


40 
c§rw
 
t0
,
ss¸©ch
,
x0


41 
c§r
 
s0
,
s°©us


42 
c§r
 
t1
,
£pc


43 
c§r
 
t2
,
sbadaddr


44 
c§r
 
t3
,
sˇu£


45 
STORE
 
t0
,2*
	$REGBYTES
(
x2
)

46 
STORE
 
s0
,32*
	$REGBYTES
(
x2
)

47 
STORE
 
t1
,33*
	$REGBYTES
(
x2
)

48 
STORE
 
t2
,34*
	$REGBYTES
(
x2
)

49 
STORE
 
t3
,35*
	$REGBYTES
(
x2
)

51 #gë 
Áu…ög
 
ö¢
, 
ô
 
wa¢
'tá fetch-relatedÅrap

52 
li
 
x5
,-1

53 
STORE
 
x5
,36*
	`REGBYTES
(
x2
)

55 .
ídm


57 .
ãxt


58 .
Æign
 2

59 .
globÆ
 
å≠_íåy


60 
å≠_íåy
:

61 
c§rw
 
•
, 
ss¸©ch
, sp

62 
b√z
 
•
, 1f

63 
c§r
 
•
, 
ss¸©ch


64 1:
addi
 
•
,sp,-320

65 
ßve_tf


66 
move
 
a0
,
•


67 
jÆ
 
h™dÀ_å≠


69 
mv
 
a0
,
•


71 
™di
 
s0
,s0,
SSTATUS_SPP


72 
b√z
 
s0
,
°¨t_u£r


73 
addi
 
•
,sp,320

74 
c§w
 
ss¸©ch
,
•


76 .
globl
 
°¨t_u£r


77 
°¨t_u£r
:

78 
LOAD
 
t0
, 32*
	$REGBYTES
(
a0
)

79 
LOAD
 
t1
, 33*
	$REGBYTES
(
a0
)

80 
c§w
 
s°©us
, 
t0


81 
c§w
 
£pc
, 
t1


83 #ª°‹ê
x
 
ªgi°îs


84 
LOAD
 
x1
,1*
	$REGBYTES
(
a0
)

85 
LOAD
 
x2
,2*
	$REGBYTES
(
a0
)

86 
LOAD
 
x3
,3*
	$REGBYTES
(
a0
)

87 
LOAD
 
x4
,4*
	$REGBYTES
(
a0
)

88 
LOAD
 
x5
,5*
	$REGBYTES
(
a0
)

89 
LOAD
 
x6
,6*
	$REGBYTES
(
a0
)

90 
LOAD
 
x7
,7*
	$REGBYTES
(
a0
)

91 
LOAD
 
x8
,8*
	$REGBYTES
(
a0
)

92 
LOAD
 
x9
,9*
	$REGBYTES
(
a0
)

93 
LOAD
 
x11
,11*
	$REGBYTES
(
a0
)

94 
LOAD
 
x12
,12*
	$REGBYTES
(
a0
)

95 
LOAD
 
x13
,13*
	$REGBYTES
(
a0
)

96 
LOAD
 
x14
,14*
	$REGBYTES
(
a0
)

97 
LOAD
 
x15
,15*
	$REGBYTES
(
a0
)

98 
LOAD
 
x16
,16*
	$REGBYTES
(
a0
)

99 
LOAD
 
x17
,17*
	$REGBYTES
(
a0
)

100 
LOAD
 
x18
,18*
	$REGBYTES
(
a0
)

101 
LOAD
 
x19
,19*
	$REGBYTES
(
a0
)

102 
LOAD
 
x20
,20*
	$REGBYTES
(
a0
)

103 
LOAD
 
x21
,21*
	$REGBYTES
(
a0
)

104 
LOAD
 
x22
,22*
	$REGBYTES
(
a0
)

105 
LOAD
 
x23
,23*
	$REGBYTES
(
a0
)

106 
LOAD
 
x24
,24*
	$REGBYTES
(
a0
)

107 
LOAD
 
x25
,25*
	$REGBYTES
(
a0
)

108 
LOAD
 
x26
,26*
	$REGBYTES
(
a0
)

109 
LOAD
 
x27
,27*
	$REGBYTES
(
a0
)

110 
LOAD
 
x28
,28*
	$REGBYTES
(
a0
)

111 
LOAD
 
x29
,29*
	$REGBYTES
(
a0
)

112 
LOAD
 
x30
,30*
	$REGBYTES
(
a0
)

113 
LOAD
 
x31
,31*
	$REGBYTES
(
a0
)

114 #ª°‹ê
a0
 
œ°


115 
LOAD
 
x10
,10*
	$REGBYTES
(
a0
)

118 
§ë


	@pk/file.c

3 
	~"fûe.h
"

4 
	~"©omic.h
"

5 
	~"mm≠.h
"

6 
	~"‰⁄ãnd.h
"

7 
	~"sysˇŒ.h
"

8 
	~"pk.h
"

9 
	~<°rög.h
>

10 
	~<î∫o.h
>

12 
	#MAX_FDS
 128

	)

13 
fûe_t
* 
	gfds
[
MAX_FDS
];

14 
	#MAX_FILES
 128

	)

15 
fûe_t
 
	gfûes
[
MAX_FILES
] = {[0 ... MAX_FILES-1] = {-1,0}};

17 
	$fûe_ö¸ef
(
fûe_t
* 
f
)

19 
¥ev
 = 
	`©omic_add
(&
f
->
ªf˙t
, 1);

20 
	`kas£π
(
¥ev
 > 0);

21 
	}
}

23 
	$fûe_de¸ef
(
fûe_t
* 
f
)

25 i‡(
	`©omic_add
(&
f
->
ªf˙t
, -1) == 2)

27 
kfd
 = 
f
->kfd;

28 
	`mb
();

29 
	`©omic_£t
(&
f
->
ªf˙t
, 0);

31 
	`‰⁄ãnd_sysˇŒ
(
SYS_˛o£
, 
kfd
, 0, 0, 0, 0, 0, 0);

33 
	}
}

35 
fûe_t
* 
	$fûe_gë_‰ì
()

37 
fûe_t
* 
f
 = 
fûes
; f < fûe†+ 
MAX_FILES
; f++)

38 i‡(
	`©omic_ªad
(&
f
->
ªf˙t
Ë=0 && 
	`©omic_ˇs
(&f->refcnt, 0, 2) == 0)

39  
f
;

40  
NULL
;

41 
	}
}

43 
	$fûe_dup
(
fûe_t
* 
f
)

45 
i
 = 0; i < 
MAX_FDS
; i++)

47 i‡(
	`©omic_ˇs
(&
fds
[
i
], 0, 
f
) == 0)

49 
	`fûe_ö¸ef
(
f
);

50  
i
;

54 
	}
}

56 
	$fûe_öô
()

59 
i
 = 0; i < 3; i++) {

60 
fûe_t
* 
f
 = 
	`fûe_gë_‰ì
();

61 
f
->
kfd
 = 
i
;

62 
	`fûe_dup
(
f
);

64 
	}
}

66 
fûe_t
* 
	$fûe_gë
(
fd
)

68 
fûe_t
* 
f
;

69 i‡(
fd
 < 0 || fd >
MAX_FDS
 || (
f
 = 
	`©omic_ªad
(&
fds
[fd])Ë=
NULL
)

72 
ﬁd_˙t
;

74 
ﬁd_˙t
 = 
	`©omic_ªad
(&
f
->
ªf˙t
);

75 i‡(
ﬁd_˙t
 == 0)

77 } 
	`©omic_ˇs
(&
f
->
ªf˙t
, 
ﬁd_˙t
, old_cnt+1) != old_cnt);

79  
f
;

80 
	}
}

82 
fûe_t
* 
	$fûe_›í
(c⁄° * 
‚
, 
Êags
, 
mode
)

84  
	`fûe_›í©
(
AT_FDCWD
, 
‚
, 
Êags
, 
mode
);

85 
	}
}

87 
fûe_t
* 
	$fûe_›í©
(
dúfd
, c⁄° * 
‚
, 
Êags
, 
mode
)

89 
fûe_t
* 
f
 = 
	`fûe_gë_‰ì
();

90 i‡(
f
 =
NULL
)

91  
	`ERR_PTR
(-
ENOMEM
);

93 
size_t
 
‚_size
 = 
	`°æí
(
‚
)+1;

94 
ªt
 = 
	`‰⁄ãnd_sysˇŒ
(
SYS_›í©
, 
dúfd
, 
	`va2∑
(
‚
), 
‚_size
, 
Êags
, 
mode
, 0, 0);

95 i‡(
ªt
 >= 0)

97 
f
->
kfd
 = 
ªt
;

98  
f
;

102 
	`fûe_de¸ef
(
f
);

103  
	`ERR_PTR
(
ªt
);

105 
	}
}

107 
	$fd_˛o£
(
fd
)

109 
fûe_t
* 
f
 = 
	`fûe_gë
(
fd
);

110 i‡(!
f
)

112 
fûe_t
* 
ﬁd
 = 
	`©omic_ˇs
(&
fds
[
fd
], 
f
, 0);

113 
	`fûe_de¸ef
(
f
);

114 i‡(
ﬁd
 !
f
)

116 
	`fûe_de¸ef
(
f
);

118 
	}
}

120 
ssize_t
 
	$fûe_ªad
(
fûe_t
* 
f
, * 
buf
, 
size_t
 
size
)

122 
	`p›uœã_m≠pög
(
buf
, 
size
, 
PROT_WRITE
);

123  
	`‰⁄ãnd_sysˇŒ
(
SYS_ªad
, 
f
->
kfd
, 
	`va2∑
(
buf
), 
size
, 0, 0, 0, 0);

124 
	}
}

126 
ssize_t
 
	$fûe_¥ód
(
fûe_t
* 
f
, * 
buf
, 
size_t
 
size
, 
off_t
 
off£t
)

128 
	`p›uœã_m≠pög
(
buf
, 
size
, 
PROT_WRITE
);

129  
	`‰⁄ãnd_sysˇŒ
(
SYS_¥ód
, 
f
->
kfd
, 
	`va2∑
(
buf
), 
size
, 
off£t
, 0, 0, 0);

130 
	}
}

132 
ssize_t
 
	$fûe_wrôe
(
fûe_t
* 
f
, c⁄° * 
buf
, 
size_t
 
size
)

134 
	`p›uœã_m≠pög
(
buf
, 
size
, 
PROT_READ
);

135  
	`‰⁄ãnd_sysˇŒ
(
SYS_wrôe
, 
f
->
kfd
, 
	`va2∑
(
buf
), 
size
, 0, 0, 0, 0);

136 
	}
}

138 
ssize_t
 
	$fûe_pwrôe
(
fûe_t
* 
f
, c⁄° * 
buf
, 
size_t
 
size
, 
off_t
 
off£t
)

140 
	`p›uœã_m≠pög
(
buf
, 
size
, 
PROT_READ
);

141  
	`‰⁄ãnd_sysˇŒ
(
SYS_pwrôe
, 
f
->
kfd
, 
	`va2∑
(
buf
), 
size
, 
off£t
, 0, 0, 0);

142 
	}
}

144 
	$fûe_°©
(
fûe_t
* 
f
, 
°©
* 
s
)

146 
‰⁄ãnd_°©
 
buf
;

147 
ªt
 = 
	`‰⁄ãnd_sysˇŒ
(
SYS_f°©
, 
f
->
kfd
, 
	`va2∑
(&
buf
), 0, 0, 0, 0, 0);

148 
	`c›y_°©
(
s
, &
buf
);

149  
ªt
;

150 
	}
}

152 
	$fûe_åunˇã
(
fûe_t
* 
f
, 
off_t
 
Àn
)

154  
	`‰⁄ãnd_sysˇŒ
(
SYS_·runˇã
, 
f
->
kfd
, 
Àn
, 0, 0, 0, 0, 0);

155 
	}
}

157 
ssize_t
 
	$fûe_l£ek
(
fûe_t
* 
f
, 
size_t
 
±r
, 
dú
)

159  
	`‰⁄ãnd_sysˇŒ
(
SYS_l£ek
, 
f
->
kfd
, 
±r
, 
dú
, 0, 0, 0, 0);

160 
	}
}

	@pk/file.h

3 #i‚de‡
_FILE_H


4 
	#_FILE_H


	)

6 
	~<sys/°©.h
>

7 
	~<uni°d.h
>

8 
	~<°döt.h
>

10 
	sfûe


12 
	mkfd
;

13 
uöt32_t
 
	mªf˙t
;

14 } 
	tfûe_t
;

16 
fûe_t
 
fûes
[];

17 
	#°dö
 (
fûes
 + 0)

	)

18 
	#°dout
 (
fûes
 + 1)

	)

19 
	#°dîr
 (
fûes
 + 2)

	)

21 
fûe_t
* 
fûe_gë
(
fd
);

22 
fûe_t
* 
fûe_›í
(c⁄° * 
‚
, 
Êags
, 
mode
);

23 
fûe_de¸ef
(
fûe_t
*);

24 
fûe_ö¸ef
(
fûe_t
*);

25 
fûe_dup
(
fûe_t
*);

27 
fûe_t
* 
fûe_›í©
(
dúfd
, c⁄° * 
‚
, 
Êags
, 
mode
);

28 
ssize_t
 
fûe_pwrôe
(
fûe_t
* 
f
, c⁄° * 
buf
, 
size_t
 
n
, 
off_t
 
off
);

29 
ssize_t
 
fûe_¥ód
(
fûe_t
* 
f
, * 
buf
, 
size_t
 
n
, 
off_t
 
off
);

30 
ssize_t
 
fûe_wrôe
(
fûe_t
* 
f
, c⁄° * 
buf
, 
size_t
 
n
);

31 
ssize_t
 
fûe_ªad
(
fûe_t
* 
f
, * 
buf
, 
size_t
 
n
);

32 
ssize_t
 
fûe_l£ek
(
fûe_t
* 
f
, 
size_t
 
±r
, 
dú
);

33 
fûe_åunˇã
(
fûe_t
* 
f
, 
off_t
 
Àn
);

34 
fûe_°©
(
fûe_t
* 
f
, 
°©
* 
s
);

35 
fd_˛o£
(
fd
);

37 
fûe_öô
();

	@pk/frontend.c

3 
	~"pk.h
"

4 
	~"©omic.h
"

5 
	~"‰⁄ãnd.h
"

6 
	~"sbi.h
"

7 
	~"mˇŒ.h
"

8 
	~"sysˇŒ.h
"

9 
	~<°döt.h
>

11 
	$‰⁄ãnd_sysˇŒ
(
n
, 
uöt64_t
 
a0
, uöt64_à
a1
, uöt64_à
a2
, uöt64_à
a3
, uöt64_à
a4
, uöt64_à
a5
, uöt64_à
a6
)

13 vﬁ©ûê
uöt64_t
 
magic_mem
[8];

15 
•ölock_t
 
lock
 = 
SPINLOCK_INIT
;

16 
	`•ölock_lock
(&
lock
);

18 
magic_mem
[0] = 
n
;

19 
magic_mem
[1] = 
a0
;

20 
magic_mem
[2] = 
a1
;

21 
magic_mem
[3] = 
a2
;

22 
magic_mem
[4] = 
a3
;

23 
magic_mem
[5] = 
a4
;

24 
magic_mem
[6] = 
a5
;

25 
magic_mem
[7] = 
a6
;

27 
	`do_mˇŒ
(
MCALL_HTIF_SYSCALL
, 
magic_mem
);

29 
ªt
 = 
magic_mem
[0];

31 
	`•ölock_u∆ock
(&
lock
);

32  
ªt
;

33 
	}
}

35 
	$shutdown
(
code
)

37 
	`‰⁄ãnd_sysˇŒ
(
SYS_exô
, 
code
, 0, 0, 0, 0, 0, 0);

39 
	}
}

41 
	$c›y_°©
(
°©
* 
de°
, 
‰⁄ãnd_°©
* 
§c
)

43 
de°
->
°_dev
 = 
§c
->
dev
;

44 
de°
->
°_öo
 = 
§c
->
öo
;

45 
de°
->
°_mode
 = 
§c
->
mode
;

46 
de°
->
°_∆ök
 = 
§c
->
∆ök
;

47 
de°
->
°_uid
 = 
§c
->
uid
;

48 
de°
->
°_gid
 = 
§c
->
gid
;

49 
de°
->
°_rdev
 = 
§c
->
rdev
;

50 
de°
->
°_size
 = 
§c
->
size
;

51 
de°
->
°_blksize
 = 
§c
->
blksize
;

52 
de°
->
°_blocks
 = 
§c
->
blocks
;

53 
de°
->
°_©ime
 = 
§c
->
©ime
;

54 
de°
->
°_mtime
 = 
§c
->
mtime
;

55 
de°
->
°_˘ime
 = 
§c
->
˘ime
;

56 
	}
}

	@pk/frontend.h

3 #i‚de‡
_RISCV_FRONTEND_H


4 
	#_RISCV_FRONTEND_H


	)

6 
	~<°döt.h
>

7 
	~<sys/°©.h
>

9 
	$shutdown
(Ë
	`__©åibuã__
((
n‹ëu∫
));

10 
	`‰⁄ãnd_sysˇŒ
(
n
, 
uöt64_t
 
a0
, uöt64_à
a1
, uöt64_à
a2
, uöt64_à
a3
, uöt64_à
a4
, uöt64_à
a5
, uöt64_à
a6
);

12 
	s‰⁄ãnd_°©
 {

13 
uöt64_t
 
dev
;

14 
uöt64_t
 
öo
;

15 
uöt32_t
 
mode
;

16 
uöt32_t
 
∆ök
;

17 
uöt32_t
 
uid
;

18 
uöt32_t
 
gid
;

19 
uöt64_t
 
rdev
;

20 
uöt64_t
 
__∑d1
;

21 
uöt64_t
 
size
;

22 
uöt32_t
 
blksize
;

23 
uöt32_t
 
__∑d2
;

24 
uöt64_t
 
blocks
;

25 
uöt64_t
 
©ime
;

26 
uöt64_t
 
__∑d3
;

27 
uöt64_t
 
mtime
;

28 
uöt64_t
 
__∑d4
;

29 
uöt64_t
 
˘ime
;

30 
uöt64_t
 
__∑d5
;

31 
uöt32_t
 
__unu£d4
;

32 
uöt32_t
 
__unu£d5
;

35 
	`c›y_°©
(
°©
* 
de°
, 
‰⁄ãnd_°©
* 
§c
);

	@pk/handlers.c

3 
	~"pk.h
"

4 
	~"c⁄fig.h
"

5 
	~"sysˇŒ.h
"

6 
	~"mm≠.h
"

8 
	$h™dÀ_ûÀgÆ_ö°ru˘i⁄
(
å≠‰ame_t
* 
tf
)

10 
tf
->
ö¢
 = *(
uöt16_t
*Èf->
ïc
;

11 
Àn
 = 
	`ö¢_Àn
(
tf
->
ö¢
);

12 i‡(
Àn
 == 4)

13 
tf
->
ö¢
 |((
uöt32_t
)*(
uöt16_t
*)—f->
ïc
 + 2) << 16);

15 
	`kas£π
(
Àn
 == 2);

17 
	`dump_tf
(
tf
);

18 
	`∑nic
("An illegal instruction wasÉxecuted!");

19 
	}
}

21 
	$h™dÀ_bªakpoöt
(
å≠‰ame_t
* 
tf
)

23 
	`dump_tf
(
tf
);

24 
	`¥ötk
("Breakpoint!\n");

25 
tf
->
ïc
 += 4;

26 
	}
}

28 
	$h™dÀ_mißlig√d_„tch
(
å≠‰ame_t
* 
tf
)

30 
	`dump_tf
(
tf
);

31 
	`∑nic
("Misaligned instructionáccess!");

32 
	}
}

34 
	$h™dÀ_mißlig√d_°‹e
(
å≠‰ame_t
* 
tf
)

36 
	`dump_tf
(
tf
);

37 
	`∑nic
("Misaligned AMO!");

38 
	}
}

40 
	$£gÁu…
(
å≠‰ame_t
* 
tf
, 
uöçå_t
 
addr
, c⁄° * 
ty≥
)

42 
	`dump_tf
(
tf
);

43 c⁄° * 
who
 = (
tf
->
°©us
 & 
SSTATUS_SPP
) ? "Kernel" : "User";

44 
	`∑nic
("%†%†£gÁu… @ %p", 
who
, 
ty≥
, 
addr
);

45 
	}
}

47 
	$h™dÀ_Áu…_„tch
(
å≠‰ame_t
* 
tf
)

49 i‡(
	`h™dÀ_∑ge_Áu…
(
tf
->
badvaddr
, 
PROT_EXEC
) != 0)

50 
	`£gÁu…
(
tf
,Åf->
badvaddr
, "fetch");

51 
	}
}

53 
	$h™dÀ_Áu…_lﬂd
(
å≠‰ame_t
* 
tf
)

55 i‡(
	`h™dÀ_∑ge_Áu…
(
tf
->
badvaddr
, 
PROT_READ
) != 0)

56 
	`£gÁu…
(
tf
,Åf->
badvaddr
, "load");

57 
	}
}

59 
	$h™dÀ_Áu…_°‹e
(
å≠‰ame_t
* 
tf
)

61 i‡(
	`h™dÀ_∑ge_Áu…
(
tf
->
badvaddr
, 
PROT_WRITE
) != 0)

62 
	`£gÁu…
(
tf
,Åf->
badvaddr
, "store");

63 
	}
}

65 
	$h™dÀ_sysˇŒ
(
å≠‰ame_t
* 
tf
)

67 
tf
->
g¥
[10] = 
	`do_sysˇŒ
(tf->gpr[10],Åf->gpr[11],Åf->gpr[12],Åf->gpr[13],

68 
tf
->
g¥
[14],Åf->gpr[15],Åf->gpr[17]);

69 
tf
->
ïc
 += 4;

70 
	}
}

72 
	$h™dÀ_öãºu±
(
å≠‰ame_t
* 
tf
)

74 
	`˛ór_c§
(
sù
, 
SIP_SSIP
);

75 
	}
}

77 
	$h™dÀ_å≠
(
å≠‰ame_t
* 
tf
)

79 i‡((
öçå_t
)
tf
->
ˇu£
 < 0)

80  
	`h™dÀ_öãºu±
(
tf
);

82 (*
	tå≠_h™dÀr
)(
	tå≠‰ame_t
*);

84 c⁄° 
å≠_h™dÀr
 
å≠_h™dÀrs
[] = {

85 [
CAUSE_MISALIGNED_FETCH
] = 
h™dÀ_mißlig√d_„tch
,

86 [
CAUSE_FAULT_FETCH
] = 
h™dÀ_Áu…_„tch
,

87 [
CAUSE_ILLEGAL_INSTRUCTION
] = 
h™dÀ_ûÀgÆ_ö°ru˘i⁄
,

88 [
CAUSE_USER_ECALL
] = 
h™dÀ_sysˇŒ
,

89 [
CAUSE_BREAKPOINT
] = 
h™dÀ_bªakpoöt
,

90 [
CAUSE_MISALIGNED_STORE
] = 
h™dÀ_mißlig√d_°‹e
,

91 [
CAUSE_FAULT_LOAD
] = 
h™dÀ_Áu…_lﬂd
,

92 [
CAUSE_FAULT_STORE
] = 
h™dÀ_Áu…_°‹e
,

95 
	`kas£π
(
tf
->
ˇu£
 < 
	`ARRAY_SIZE
(
å≠_h™dÀrs
) &&Årap_handlers[tf->cause]);

97 
å≠_h™dÀrs
[
tf
->
ˇu£
](tf);

98 
	}
}

	@pk/mmap.c

1 
	~"mm≠.h
"

2 
	~"©omic.h
"

3 
	~"pk.h
"

4 
	~"boŸ.h
"

5 
	~"bôs.h
"

6 
	~"må≠.h
"

7 
	~<°döt.h
>

8 
	~<î∫o.h
>

11 
uöçå_t
 
	maddr
;

12 
size_t
 
	mÀngth
;

13 
fûe_t
* 
	mfûe
;

14 
size_t
 
	moff£t
;

15 
	mªf˙t
;

16 
	m¥Ÿ
;

17 } 
	tvmr_t
;

19 
	#MAX_VMR
 (
RISCV_PGSIZE
 / (
vmr_t
))

	)

20 
•ölock_t
 
	gvm_lock
 = 
SPINLOCK_INIT
;

21 
vmr_t
* 
	gvmrs
;

23 
uöçå_t
 
	gfú°_‰ì_∑ge
;

24 
size_t
 
	g√xt_‰ì_∑ge
;

25 
size_t
 
	g‰ì_∑ges
;

27 
	gdem™d_∑gög
 = 1;

29 
uöçå_t
 
	$__∑ge_Æloc
()

31 
	`kas£π
(
√xt_‰ì_∑ge
 !
‰ì_∑ges
);

32 
uöçå_t
 
addr
 = 
fú°_‰ì_∑ge
 + 
RISCV_PGSIZE
 * 
√xt_‰ì_∑ge
++;

33 
	`mem£t
((*)
addr
, 0, 
RISCV_PGSIZE
);

34  
addr
;

35 
	}
}

37 
vmr_t
* 
	$__vmr_Æloc
(
uöçå_t
 
addr
, 
size_t
 
Àngth
, 
fûe_t
* 
fûe
,

38 
size_t
 
off£t
, 
ªf˙t
, 
¥Ÿ
)

40 i‡(!
vmrs
) {

41 
	`•ölock_lock
(&
vm_lock
);

42 i‡(!
vmrs
)

43 
vmrs
 = (
vmr_t
*)
	`__∑ge_Æloc
();

44 
	`•ölock_u∆ock
(&
vm_lock
);

47 
vmr_t
* 
v
 = 
vmrs
; v < vmr†+ 
MAX_VMR
; v++) {

48 i‡(
v
->
ªf˙t
 == 0) {

49 i‡(
fûe
)

50 
	`fûe_ö¸ef
(
fûe
);

51 
v
->
addr
 =áddr;

52 
v
->
Àngth
 =Üength;

53 
v
->
fûe
 = file;

54 
v
->
off£t
 = offset;

55 
v
->
ªf˙t
 =Ñefcnt;

56 
v
->
¥Ÿ
 =Örot;

57  
v
;

60  
NULL
;

61 
	}
}

63 
	$__vmr_de¸ef
(
vmr_t
* 
v
, 
dec
)

65 i‡((
v
->
ªf˙t
 -
dec
) == 0)

67 i‡(
v
->
fûe
)

68 
	`fûe_de¸ef
(
v
->
fûe
);

70 
	}
}

72 
size_t
 
	$±e_µn
(
±e_t
 
±e
)

74  
±e
 >> 
PTE_PPN_SHIFT
;

75 
	}
}

77 
uöçå_t
 
	$µn
(
uöçå_t
 
addr
)

79  
addr
 >> 
RISCV_PGSHIFT
;

80 
	}
}

82 
size_t
 
	$±_idx
(
uöçå_t
 
addr
, 
Àvñ
)

84 
size_t
 
idx
 = 
addr
 >> (
RISCV_PGLEVEL_BITS
*
Àvñ
 + 
RISCV_PGSHIFT
);

85  
idx
 & ((1 << 
RISCV_PGLEVEL_BITS
) - 1);

86 
	}
}

88 
±e_t
* 
__wÆk_¸óã
(
uöçå_t
 
addr
);

90 
±e_t
* 
__©åibuã__
((
noölöe
)Ë
	$__c⁄töue_wÆk_¸óã
(
uöçå_t
 
addr
, 
±e_t
* 
±e
)

92 *
±e
 = 
	`±d_¸óã
(
	`µn
(
	`__∑ge_Æloc
()));

93  
	`__wÆk_¸óã
(
addr
);

94 
	}
}

96 
±e_t
* 
	$__wÆk_öã∫Æ
(
uöçå_t
 
addr
, 
¸óã
)

98 
±e_t
* 
t
 = 
roŸ_∑ge_èbÀ
;

99 
i
 = (
VA_BITS
 - 
RISCV_PGSHIFT
Ë/ 
RISCV_PGLEVEL_BITS
 - 1; i > 0; i--) {

100 
size_t
 
idx
 = 
	`±_idx
(
addr
, 
i
);

101 i‡(
	`u∆ikñy
(!(
t
[
idx
] & 
PTE_V
)))

102  
¸óã
 ? 
	`__c⁄töue_wÆk_¸óã
(
addr
, &
t
[
idx
]) : 0;

103 
t
 = (
±e_t
*)(
	`±e_µn
—[
idx
]Ë<< 
RISCV_PGSHIFT
);

105  &
t
[
	`±_idx
(
addr
, 0)];

106 
	}
}

108 
±e_t
* 
	$__wÆk
(
uöçå_t
 
addr
)

110  
	`__wÆk_öã∫Æ
(
addr
, 0);

111 
	}
}

113 
±e_t
* 
	$__wÆk_¸óã
(
uöçå_t
 
addr
)

115  
	`__wÆk_öã∫Æ
(
addr
, 1);

116 
	}
}

118 
	$__va_avaû
(
uöçå_t
 
vaddr
)

120 
±e_t
* 
±e
 = 
	`__wÆk
(
vaddr
);

121  
±e
 == 0 || *pte == 0;

122 
	}
}

124 
uöçå_t
 
	$__vm_Æloc
(
size_t
 
≈age
)

126 
uöçå_t
 
°¨t
 = 
cuºít
.
brk
, 
íd
 = cuºít.
mm≠_max
 - 
≈age
*
RISCV_PGSIZE
;

127 
uöçå_t
 
a
 = 
°¨t
;á <
íd
;á +
RISCV_PGSIZE
)

129 i‡(!
	`__va_avaû
(
a
))

131 
uöçå_t
 
fú°
 = 
a
, 
œ°
 =á + (
≈age
-1Ë* 
RISCV_PGSIZE
;

132 
a
 = 
œ°
;á > 
fú°
 && 
	`__va_avaû
◊);á -
RISCV_PGSIZE
)

134 i‡(
a
 > 
fú°
)

136  
a
;

139 
	}
}

141 
ölöe
 
±e_t
 
	$¥Ÿ_to_ty≥
(
¥Ÿ
, 
u£r
)

143 
±e_t
 
±e
 = 0;

144 i‡(
¥Ÿ
 & 
PROT_READ
Ë
±e
 |
PTE_R
;

145 i‡(
¥Ÿ
 & 
PROT_WRITE
Ë
±e
 |
PTE_W
;

146 i‡(
¥Ÿ
 & 
PROT_EXEC
Ë
±e
 |
PTE_X
;

147 i‡(
±e
 =0Ë±ê
PTE_R
;

148 i‡(
u£r
Ë
±e
 |
PTE_U
;

149  
±e
;

150 
	}
}

152 
	$__vÆid_u£r_ønge
(
uöçå_t
 
vaddr
, 
size_t
 
Àn
)

154 i‡(
vaddr
 + 
Àn
 < vaddr)

156  
vaddr
 + 
Àn
 <
cuºít
.
mm≠_max
;

157 
	}
}

159 
	$__h™dÀ_∑ge_Áu…
(
uöçå_t
 
vaddr
, 
¥Ÿ
)

161 
uöçå_t
 
v≤
 = 
vaddr
 >> 
RISCV_PGSHIFT
;

162 
vaddr
 = 
v≤
 << 
RISCV_PGSHIFT
;

164 
±e_t
* 
±e
 = 
	`__wÆk
(
vaddr
);

166 i‡(
±e
 =0 || *±ê=0 || !
	`__vÆid_u£r_ønge
(
vaddr
, 1))

168 i‡(!(*
±e
 & 
PTE_V
))

170 
uöçå_t
 
µn
 = 
v≤
 + (
fú°_‰ì_∑ddr
 / 
RISCV_PGSIZE
);

172 
vmr_t
* 
v
 = (vmr_t*)*
±e
;

173 *
±e
 = 
	`±e_¸óã
(
µn
, 
	`¥Ÿ_to_ty≥
(
PROT_READ
|
PROT_WRITE
, 0));

174 
	`Êush_éb
();

175 i‡(
v
->
fûe
)

177 
size_t
 
Êí
 = 
	`MIN
(
RISCV_PGSIZE
, 
v
->
Àngth
 - (
vaddr
 - v->
addr
));

178 
ssize_t
 
ªt
 = 
	`fûe_¥ód
(
v
->
fûe
, (*)
vaddr
, 
Êí
, vadd∏- v->
addr
 + v->
off£t
);

179 
	`kas£π
(
ªt
 > 0);

180 i‡(
ªt
 < 
RISCV_PGSIZE
)

181 
	`mem£t
((*)
vaddr
 + 
ªt
, 0, 
RISCV_PGSIZE
 -Ñet);

184 
	`mem£t
((*)
vaddr
, 0, 
RISCV_PGSIZE
);

185 
	`__vmr_de¸ef
(
v
, 1);

186 *
±e
 = 
	`±e_¸óã
(
µn
, 
	`¥Ÿ_to_ty≥
(
v
->
¥Ÿ
, 1));

189 
±e_t
 
≥rms
 = 
	`±e_¸óã
(0, 
	`¥Ÿ_to_ty≥
(
¥Ÿ
, 1));

190 i‡((*
±e
 & 
≥rms
) !=Öerms)

193 
	`Êush_éb
();

195 
	}
}

197 
	$h™dÀ_∑ge_Áu…
(
uöçå_t
 
vaddr
, 
¥Ÿ
)

199 
	`•ölock_lock
(&
vm_lock
);

200 
ªt
 = 
	`__h™dÀ_∑ge_Áu…
(
vaddr
, 
¥Ÿ
);

201 
	`•ölock_u∆ock
(&
vm_lock
);

202  
ªt
;

203 
	}
}

205 
	$__do_munm≠
(
uöçå_t
 
addr
, 
size_t
 
Àn
)

207 
uöçå_t
 
a
 = 
addr
;á <ádd∏+ 
Àn
;á +
RISCV_PGSIZE
)

209 
±e_t
* 
±e
 = 
	`__wÆk
(
a
);

210 i‡(
±e
 == 0 || *pte == 0)

213 i‡(!(*
±e
 & 
PTE_V
))

214 
	`__vmr_de¸ef
((
vmr_t
*)*
±e
, 1);

216 *
±e
 = 0;

218 
	`Êush_éb
();

219 
	}
}

221 
uöçå_t
 
	$__do_mm≠
(
uöçå_t
 
addr
, 
size_t
 
Àngth
, 
¥Ÿ
, 
Êags
, 
fûe_t
* 
f
, 
off_t
 
off£t
)

223 
size_t
 
≈age
 = (
Àngth
-1)/
RISCV_PGSIZE
+1;

224 i‡(
Êags
 & 
MAP_FIXED
)

226 i‡((
addr
 & (
RISCV_PGSIZE
-1)Ë|| !
	`__vÆid_u£r_ønge
◊ddr, 
Àngth
))

227  (
uöçå_t
)-1;

229 i‡((
addr
 = 
	`__vm_Æloc
(
≈age
)) == 0)

230  (
uöçå_t
)-1;

232 
vmr_t
* 
v
 = 
	`__vmr_Æloc
(
addr
, 
Àngth
, 
f
, 
off£t
, 
≈age
, 
¥Ÿ
);

233 i‡(!
v
)

234  (
uöçå_t
)-1;

236 
uöçå_t
 
a
 = 
addr
;á <ádd∏+ 
Àngth
;á +
RISCV_PGSIZE
)

238 
±e_t
* 
±e
 = 
	`__wÆk_¸óã
(
a
);

239 
	`kas£π
(
±e
);

241 i‡(*
±e
)

242 
	`__do_munm≠
(
a
, 
RISCV_PGSIZE
);

244 *
±e
 = (
±e_t
)
v
;

247 i‡(!
dem™d_∑gög
 || (
Êags
 & 
MAP_POPULATE
))

248 
uöçå_t
 
a
 = 
addr
;á <ádd∏+ 
Àngth
;á +
RISCV_PGSIZE
)

249 
	`kas£π
(
	`__h™dÀ_∑ge_Áu…
(
a
, 
¥Ÿ
) == 0);

251  
addr
;

252 
	}
}

254 
	$do_munm≠
(
uöçå_t
 
addr
, 
size_t
 
Àngth
)

256 i‡((
addr
 & (
RISCV_PGSIZE
-1)Ë|| !
	`__vÆid_u£r_ønge
◊ddr, 
Àngth
))

257  -
EINVAL
;

259 
	`•ölock_lock
(&
vm_lock
);

260 
	`__do_munm≠
(
addr
, 
Àngth
);

261 
	`•ölock_u∆ock
(&
vm_lock
);

264 
	}
}

266 
uöçå_t
 
	$do_mm≠
(
uöçå_t
 
addr
, 
size_t
 
Àngth
, 
¥Ÿ
, 
Êags
, 
fd
, 
off_t
 
off£t
)

268 i‡(!(
Êags
 & 
MAP_PRIVATE
Ë|| 
Àngth
 =0 || (
off£t
 & (
RISCV_PGSIZE
-1)))

269  -
EINVAL
;

271 
fûe_t
* 
f
 = 
NULL
;

272 i‡(!(
Êags
 & 
MAP_ANONYMOUS
Ë&& (
f
 = 
	`fûe_gë
(
fd
)Ë=
NULL
)

273  -
EBADF
;

275 
	`•ölock_lock
(&
vm_lock
);

276 
addr
 = 
	`__do_mm≠
◊ddr, 
Àngth
, 
¥Ÿ
, 
Êags
, 
f
, 
off£t
);

278 i‡(
addr
 < 
cuºít
.
brk_max
)

279 
cuºít
.
brk_max
 = 
addr
;

280 
	`•ölock_u∆ock
(&
vm_lock
);

282 i‡(
f
Ë
	`fûe_de¸ef
(f);

283  
addr
;

284 
	}
}

286 
uöçå_t
 
	$__do_brk
(
size_t
 
addr
)

288 
uöçå_t
 
√wbrk
 = 
addr
;

289 i‡(
addr
 < 
cuºít
.
brk_mö
)

290 
√wbrk
 = 
cuºít
.
brk_mö
;

291 i‡(
addr
 > 
cuºít
.
brk_max
)

292 
√wbrk
 = 
cuºít
.
brk_max
;

294 i‡(
cuºít
.
brk
 == 0)

295 
cuºít
.
brk
 = 
	`ROUNDUP
(cuºít.
brk_mö
, 
RISCV_PGSIZE
);

297 
uöçå_t
 
√wbrk_∑ge
 = 
	`ROUNDUP
(
√wbrk
, 
RISCV_PGSIZE
);

298 i‡(
cuºít
.
brk
 > 
√wbrk_∑ge
)

299 
	`__do_munm≠
(
√wbrk_∑ge
, 
cuºít
.
brk
 -Çewbrk_page);

300 i‡(
cuºít
.
brk
 < 
√wbrk_∑ge
)

301 
	`kas£π
(
	`__do_mm≠
(
cuºít
.
brk
, 
√wbrk_∑ge
 - cuºít.brk, -1, 
MAP_FIXED
|
MAP_PRIVATE
|
MAP_ANONYMOUS
, 0, 0) == current.brk);

302 
cuºít
.
brk
 = 
√wbrk_∑ge
;

304  
√wbrk
;

305 
	}
}

307 
uöçå_t
 
	$do_brk
(
size_t
 
addr
)

309 
	`•ölock_lock
(&
vm_lock
);

310 
addr
 = 
	`__do_brk
(addr);

311 
	`•ölock_u∆ock
(&
vm_lock
);

313  
addr
;

314 
	}
}

316 
uöçå_t
 
	$do_mªm≠
(
uöçå_t
 
addr
, 
size_t
 
ﬁd_size
, size_à
√w_size
, 
Êags
)

318  -
ENOSYS
;

319 
	}
}

321 
uöçå_t
 
	$do_m¥Ÿe˘
(
uöçå_t
 
addr
, 
size_t
 
Àngth
, 
¥Ÿ
)

323 
uöçå_t
 
ªs
 = 0;

324 i‡((
addr
Ë& (
RISCV_PGSIZE
-1))

325  -
EINVAL
;

327 
	`•ölock_lock
(&
vm_lock
);

328 
uöçå_t
 
a
 = 
addr
;á <ádd∏+ 
Àngth
;á +
RISCV_PGSIZE
)

330 
±e_t
* 
±e
 = 
	`__wÆk
(
a
);

331 i‡(
±e
 == 0 || *pte == 0) {

332 
ªs
 = -
ENOMEM
;

336 i‡(!(*
±e
 & 
PTE_V
)) {

337 
vmr_t
* 
v
 = (vmr_t*)*
±e
;

338 if((
v
->
¥Ÿ
 ^Örot) & ~v->prot){

340 
ªs
 = -
EACCES
;

343 
v
->
¥Ÿ
 =Örot;

345 i‡(!(*
±e
 & 
PTE_U
) ||

346 ((
¥Ÿ
 & 
PROT_READ
Ë&& !(*
±e
 & 
PTE_R
)) ||

347 ((
¥Ÿ
 & 
PROT_WRITE
Ë&& !(*
±e
 & 
PTE_W
)) ||

348 ((
¥Ÿ
 & 
PROT_EXEC
Ë&& !(*
±e
 & 
PTE_X
))) {

350 
ªs
 = -
EACCES
;

353 *
±e
 = 
	`±e_¸óã
(
	`±e_µn
(*±e), 
	`¥Ÿ_to_ty≥
(
¥Ÿ
, 1));

356 
	`•ölock_u∆ock
(&
vm_lock
);

358 
	`Êush_éb
();

359  
ªs
;

360 
	}
}

362 
	$__m≠_kî√l_ønge
(
uöçå_t
 
vaddr
, uöçå_à
∑ddr
, 
size_t
 
Àn
, 
¥Ÿ
)

364 
uöçå_t
 
n
 = 
	`ROUNDUP
(
Àn
, 
RISCV_PGSIZE
) / RISCV_PGSIZE;

365 
uöçå_t
 
off£t
 = 
∑ddr
 - 
vaddr
;

366 
uöçå_t
 
a
 = 
vaddr
, 
i
 = 0; i < 
n
; i++,á +
RISCV_PGSIZE
)

368 
±e_t
* 
±e
 = 
	`__wÆk_¸óã
(
a
);

369 
	`kas£π
(
±e
);

370 *
±e
 = 
	`±e_¸óã
((
a
 + 
off£t
Ë>> 
RISCV_PGSHIFT
, 
	`¥Ÿ_to_ty≥
(
¥Ÿ
, 0));

372 
	}
}

374 
	$p›uœã_m≠pög
(c⁄° * 
°¨t
, 
size_t
 
size
, 
¥Ÿ
)

376 
uöçå_t
 
a0
 = 
	`ROUNDDOWN
((uöçå_t)
°¨t
, 
RISCV_PGSIZE
);

377 
uöçå_t
 
a
 = 
a0
;á < (uöçå_t)
°¨t
+
size
;á +
RISCV_PGSIZE
)

379 i‡(
¥Ÿ
 & 
PROT_WRITE
)

380 
	`©omic_add
((*)
a
, 0);

382 
	`©omic_ªad
((*)
a
);

384 
	}
}

386 
uöçå_t
 
	$pk_vm_öô
()

388 #i‡
__riscv_xÀn
 == 32

390 
mem_size
 = 
	`MIN
(mem_size, 1U << 31);

393 
size_t
 
mem_∑ges
 = 
mem_size
 >> 
RISCV_PGSHIFT
;

394 
‰ì_∑ges
 = 
	`MAX
(8, 
mem_∑ges
 >> (
RISCV_PGLEVEL_BITS
-1));

395 
fú°_‰ì_∑ge
 = 
fú°_‰ì_∑ddr
;

396 
fú°_‰ì_∑ddr
 +
‰ì_∑ges
 * 
RISCV_PGSIZE
;

398 
roŸ_∑ge_èbÀ
 = (*)
	`__∑ge_Æloc
();

399 
	`__m≠_kî√l_ønge
(
DRAM_BASE
, DRAM_BASE, 
fú°_‰ì_∑ddr
 - DRAM_BASE, 
PROT_READ
|
PROT_WRITE
|
PROT_EXEC
);

401 
cuºít
.
mm≠_max
 = cuºít.
brk_max
 =

402 
	`MIN
(
DRAM_BASE
, 
mem_size
 - (
fú°_‰ì_∑ddr
 - DRAM_BASE));

404 
size_t
 
°ack_size
 = 
RISCV_PGSIZE
 * 64;

405 
size_t
 
°ack_bŸtom
 = 
	`__do_mm≠
(
cuºít
.
mm≠_max
 - 
°ack_size
, sèck_size, 
PROT_READ
|
PROT_WRITE
|
PROT_EXEC
, 
MAP_PRIVATE
|
MAP_ANONYMOUS
|
MAP_FIXED
, 0, 0);

406 
	`kas£π
(
°ack_bŸtom
 !(
uöçå_t
)-1);

407 
cuºít
.
°ack_t›
 = 
°ack_bŸtom
 + 
°ack_size
;

409 
uöçå_t
 
kî√l_°ack_t›
 = 
	`__∑ge_Æloc
(Ë+ 
RISCV_PGSIZE
;

410  
kî√l_°ack_t›
;

411 
	}
}

	@pk/mmap.h

1 #i‚de‡
_MMAP_H


2 
	#_MMAP_H


	)

4 
	~"vm.h
"

5 
	~"sysˇŒ.h
"

6 
	~"ícodög.h
"

7 
	~"fûe.h
"

8 
	~"må≠.h
"

9 
	~<°ddef.h
>

11 
	#PROT_NONE
 0

	)

12 
	#PROT_READ
 1

	)

13 
	#PROT_WRITE
 2

	)

14 
	#PROT_EXEC
 4

	)

16 
	#MAP_PRIVATE
 0x2

	)

17 
	#MAP_FIXED
 0x10

	)

18 
	#MAP_ANONYMOUS
 0x20

	)

19 
	#MAP_POPULATE
 0x8000

	)

20 
	#MREMAP_FIXED
 0x2

	)

22 
dem™d_∑gög
;

23 
uöçå_t
 
pk_vm_öô
();

24 
h™dÀ_∑ge_Áu…
(
uöçå_t
 
vaddr
, 
¥Ÿ
);

25 
p›uœã_m≠pög
(c⁄° * 
°¨t
, 
size_t
 
size
, 
¥Ÿ
);

26 
__m≠_kî√l_ønge
(
uöçå_t
 
va
, uöçå_à
∑
, 
size_t
 
Àn
, 
¥Ÿ
);

27 
__vÆid_u£r_ønge
(
uöçå_t
 
vaddr
, 
size_t
 
Àn
);

28 
uöçå_t
 
__do_mm≠
(uöçå_à
addr
, 
size_t
 
Àngth
, 
¥Ÿ
, 
Êags
, 
fûe_t
* 
fûe
, 
off_t
 
off£t
);

29 
uöçå_t
 
do_mm≠
(uöçå_à
addr
, 
size_t
 
Àngth
, 
¥Ÿ
, 
Êags
, 
fd
, 
off_t
 
off£t
);

30 
do_munm≠
(
uöçå_t
 
addr
, 
size_t
 
Àngth
);

31 
uöçå_t
 
do_mªm≠
(uöçå_à
addr
, 
size_t
 
ﬁd_size
, size_à
√w_size
, 
Êags
);

32 
uöçå_t
 
do_m¥Ÿe˘
(uöçå_à
addr
, 
size_t
 
Àngth
, 
¥Ÿ
);

33 
uöçå_t
 
do_brk
(uöçå_à
addr
);

35 
	#va2∑
(
va
Ë({ 
uöçå_t
 
__va
 = (uintptr_t)(va); \

36 
__va
 >
DRAM_BASE
 ? __v®: __v®+ 
fú°_‰ì_∑ddr
; })

	)

	@pk/pk.c

1 
	~"pk.h
"

2 
	~"mm≠.h
"

3 
	~"boŸ.h
"

4 
	~"ñf.h
"

5 
	~"må≠.h
"

6 
	~"‰⁄ãnd.h
"

7 
	~<°dboﬁ.h
>

9 
ñf_öfo
 
	gcuºít
;

11 
	$h™dÀ_›ti⁄
(c⁄° * 
s
)

13 
s
[1])

16 
cuºít
.
cy˛e0
 = 1;

20 
dem™d_∑gög
 = 0;

24 
	`∑nic
("uƒecognized o±i⁄: `%c'", 
s
[1]);

27 
	}
}

29 
	#MAX_ARGS
 64

	)

31 
uöt64_t
 
	mbuf
[
MAX_ARGS
];

32 * 
	m¨gv
[
MAX_ARGS
];

33 } 
	t¨g_buf
;

35 
size_t
 
	$∑r£_¨gs
(
¨g_buf
* 
¨gs
)

37 
r
 = 
	`‰⁄ãnd_sysˇŒ
(
SYS_gëmaöv¨s
, 
	`va2∑
(
¨gs
), (*args), 0, 0, 0, 0, 0);

38 
	`kas£π
(
r
 == 0);

39 
uöt64_t
* 
pk_¨gv
 = &
¨gs
->
buf
[1];

41 
size_t
 
pk_¨gc
 = 
¨gs
->
buf
[0], 
¨g
 = 1;

42  ; 
¨g
 < 
pk_¨gc
 && *(*)(
uöçå_t
)
pk_¨gv
[arg] == '-';árg++)

43 
	`h™dÀ_›ti⁄
((c⁄° *)(
uöçå_t
)
pk_¨gv
[
¨g
]);

45 
size_t
 
i
 = 0; 
¨g
 + i < 
pk_¨gc
; i++)

46 
¨gs
->
¨gv
[
i
] = (*)(
uöçå_t
)
pk_¨gv
[
¨g
 + i];

47  
pk_¨gc
 - 
¨g
;

48 
	}
}

50 
	$öô_tf
(
å≠‰ame_t
* 
tf
, 
pc
, 
•
)

52 
	`mem£t
(
tf
, 0, (*tf));

53 
tf
->
°©us
 = (
	`ªad_c§
(
s°©us
Ë&~ 
SSTATUS_SPP
 &~ 
SSTATUS_SIE
Ë| 
SSTATUS_SPIE
;

54 
tf
->
g¥
[2] = 
•
;

55 
tf
->
ïc
 = 
pc
;

56 
	}
}

58 
	$run_lﬂded_¥ogøm
(
size_t
 
¨gc
, ** 
¨gv
, 
uöçå_t
 
k°ack_t›
)

61 
size_t
 
°ack_t›
 = 
cuºít
.°ack_t› - cuºít.
phdr_size
;

62 
	`mem˝y
((*)
°ack_t›
, (*)
cuºít
.
phdr
, cuºít.
phdr_size
);

63 
cuºít
.
phdr
 = 
°ack_t›
;

66 
size_t
 
i
 = 0; i < 
¨gc
; i++) {

67 
size_t
 
Àn
 = 
	`°æí
((*)(
uöçå_t
)
¨gv
[
i
])+1;

68 
°ack_t›
 -
Àn
;

69 
	`mem˝y
((*)
°ack_t›
, (*)(
uöçå_t
)
¨gv
[
i
], 
Àn
);

70 
¨gv
[
i
] = (*)
°ack_t›
;

74 c⁄° * 
ívp
[] = {

77 
size_t
 
ívc
 = (
ívp
) / (envp[0]);

78 
size_t
 
i
 = 0; i < 
ívc
; i++) {

79 
size_t
 
Àn
 = 
	`°æí
(
ívp
[
i
]) + 1;

80 
°ack_t›
 -
Àn
;

81 
	`mem˝y
((*)
°ack_t›
, 
ívp
[
i
], 
Àn
);

82 
ívp
[
i
] = (*)
°ack_t›
;

86 
°ack_t›
 &= -(*);

89 
key
;

90 
vÆue
;

91 } 
aux
[] = {

92 {
AT_ENTRY
, 
cuºít
.
íåy
},

93 {
AT_PHNUM
, 
cuºít
.
phnum
},

94 {
AT_PHENT
, 
cuºít
.
phít
},

95 {
AT_PHDR
, 
cuºít
.
phdr
},

96 {
AT_PAGESZ
, 
RISCV_PGSIZE
},

97 {
AT_SECURE
, 0},

98 {
AT_RANDOM
, 
°ack_t›
},

99 {
AT_NULL
, 0}

103 
	#PUSH_ARG
(
ty≥
, 
vÆue
) do { \

104 *((
ty≥
*)
•
Ë—y≥)
vÆue
; \

105 
•
 +(
ty≥
); \

106 } 0)

	)

108 
	#STACK_INIT
(
ty≥
) do { \

109 
«ux
 = (
aux
)/(aux[0]); \

110 
°ack_t›
 -(1 + 
¨gc
 + 1 + 
ívc
 + 1 + 2*
«ux
Ë* (
ty≥
); \

111 
°ack_t›
 &= -16; \

112 
•
 = 
°ack_t›
; \

113 
	`PUSH_ARG
(
ty≥
, 
¨gc
); \

114 
i
 = 0; i < 
¨gc
; i++) \

115 
	`PUSH_ARG
(
ty≥
, 
¨gv
[
i
]); \

116 
	`PUSH_ARG
(
ty≥
, 0); \

117 
i
 = 0; i < 
ívc
; i++) \

118 
	`PUSH_ARG
(
ty≥
, 
ívp
[
i
]); \

119 
	`PUSH_ARG
(
ty≥
, 0); \

120 
i
 = 0; i < 
«ux
; i++) { \

121 
	`PUSH_ARG
(
ty≥
, 
aux
[
i
].
key
); \

122 
	`PUSH_ARG
(
ty≥
, 
aux
[
i
].
vÆue
); \

124 } 0)

	)

126 
	`STACK_INIT
(
uöçå_t
);

128 i‡(
cuºít
.
cy˛e0
) {

129 
cuºít
.
time0
 = 
	`rdtime
();

130 
cuºít
.
cy˛e0
 = 
	`rdcy˛e
();

131 
cuºít
.
ö°ªt0
 = 
	`rdö°ªt
();

134 
å≠‰ame_t
 
tf
;

135 
	`öô_tf
(&
tf
, 
cuºít
.
íåy
, 
°ack_t›
);

136 
	`__˛ór_ˇche
(0, 0);

137 
	`wrôe_c§
(
ss¸©ch
, 
k°ack_t›
);

138 
	`°¨t_u£r
(&
tf
);

139 
	}
}

141 
	$ª°_of_boŸ_lﬂdî
(
uöçå_t
 
k°ack_t›
)

143 
¨g_buf
 
¨gs
;

144 
size_t
 
¨gc
 = 
	`∑r£_¨gs
(&
¨gs
);

145 i‡(!
¨gc
)

146 
	`∑nic
("tell me what ELFÅoÜoad!");

149 
phdrs
[128];

150 
cuºít
.
phdr
 = (
uöçå_t
)
phdrs
;

151 
cuºít
.
phdr_size
 = (
phdrs
);

152 
	`lﬂd_ñf
(
¨gs
.
¨gv
[0], &
cuºít
);

154 
	`run_lﬂded_¥ogøm
(
¨gc
, 
¨gs
.
¨gv
, 
k°ack_t›
);

155 
	}
}

157 
	$boŸ_lﬂdî
()

159 
å≠_íåy
;

160 
	`wrôe_c§
(
°vec
, &
å≠_íåy
);

161 
	`wrôe_c§
(
ss¸©ch
, 0);

162 
	`wrôe_c§
(
sõ
, 0);

164 
	`fûe_öô
();

165 
	`íãr_su≥rvis‹_mode
(
ª°_of_boŸ_lﬂdî
, 
	`pk_vm_öô
());

166 
	}
}

168 
	$boŸ_Ÿhî_h¨t
()

172 
	`wfi
();

173 
	}
}

	@pk/pk.h

3 #i‚de‡
_PK_H


4 
	#_PK_H


	)

6 #i‚de‡
__ASSEMBLER__


8 
	~"ícodög.h
"

9 
	~<°döt.h
>

10 
	~<°rög.h
>

11 
	~<°d¨g.h
>

15 
	mg¥
[32];

16 
	m°©us
;

17 
	mïc
;

18 
	mbadvaddr
;

19 
	mˇu£
;

20 
	mö¢
;

21 } 
	tå≠‰ame_t
;

23 
	#∑nic
(
s
,...Ëdÿ{ 
	`do_∑nic
(s"\n", ##
__VA_ARGS__
); } 0)

	)

24 
	#kas£π
(
c⁄d
Ëdÿ{ if(!(c⁄d)Ë
	`kas£π_Áû
(""#c⁄d); } 0)

	)

25 
	$do_∑nic
(c⁄° * 
s
, ...Ë
	`__©åibuã__
((
n‹ëu∫
));

26 
	$kas£π_Áû
(c⁄° * 
s
Ë
	`__©åibuã__
((
n‹ëu∫
));

28 #ifde‡
__˝lu•lus


32 
	`¥ötk
(c⁄° * 
s
, ...);

33 
	`¥ötm
(c⁄° * 
s
, ...);

34 
	`v¢¥ötf
(* 
out
, 
size_t
 
n
, c⁄° * 
s
, 
va_li°
 
vl
);

35 
	`¢¥ötf
(* 
out
, 
size_t
 
n
, c⁄° * 
s
, ...);

36 
	`°¨t_u£r
(
å≠‰ame_t
* 
tf
Ë
	`__©åibuã__
((
n‹ëu∫
));

37 
	`dump_tf
(
å≠‰ame_t
*);

39 
ölöe
 
	`ö¢_Àn
(
ö¢
)

41  (
ö¢
 & 0x3) < 0x3 ? 2 : 4;

44 
	#ARRAY_SIZE
(
x
Ë((x)/((x)[0]))

	)

46 #ifde‡
__˝lu•lus


47 
	}
}

	@pk/syscall.c

3 
	~"sysˇŒ.h
"

4 
	~"pk.h
"

5 
	~"fûe.h
"

6 
	~"‰⁄ãnd.h
"

7 
	~"mm≠.h
"

8 
	~"boŸ.h
"

9 
	~<°rög.h
>

10 
	~<î∫o.h
>

12 (*
	tsysˇŒ_t
)(, , , , , , );

14 
	#CLOCK_FREQ
 1000000000

	)

16 
	$sys_exô
(
code
)

18 i‡(
cuºít
.
cy˛e0
) {

19 
size_t
 
dt
 = 
	`rdtime
(Ë- 
cuºít
.
time0
;

20 
size_t
 
dc
 = 
	`rdcy˛e
(Ë- 
cuºít
.
cy˛e0
;

21 
size_t
 
di
 = 
	`rdö°ªt
(Ë- 
cuºít
.
ö°ªt0
;

23 
	`¥ötk
("%ldÅicks\n", 
dt
);

24 
	`¥ötk
("%ld cy˛es\n", 
dc
);

25 
	`¥ötk
("%ld in°ru˘i⁄s\n", 
di
);

26 
	`¥ötk
("%d.%d%d CPI\n", 
dc
/
di
, 10ULL*dc/di % 10, (100ULL*dc + di/2)/di % 10);

28 
	`shutdown
(
code
);

29 
	}
}

31 
ssize_t
 
	$sys_ªad
(
fd
, * 
buf
, 
size_t
 
n
)

33 
ssize_t
 
r
 = -
EBADF
;

34 
fûe_t
* 
f
 = 
	`fûe_gë
(
fd
);

36 i‡(
f
)

38 
r
 = 
	`fûe_ªad
(
f
, 
buf
, 
n
);

39 
	`fûe_de¸ef
(
f
);

42  
r
;

43 
	}
}

45 
ssize_t
 
	$sys_¥ód
(
fd
, * 
buf
, 
size_t
 
n
, 
off_t
 
off£t
)

47 
ssize_t
 
r
 = -
EBADF
;

48 
fûe_t
* 
f
 = 
	`fûe_gë
(
fd
);

50 i‡(
f
)

52 
r
 = 
	`fûe_¥ód
(
f
, 
buf
, 
n
, 
off£t
);

53 
	`fûe_de¸ef
(
f
);

56  
r
;

57 
	}
}

59 
ssize_t
 
	$sys_wrôe
(
fd
, c⁄° * 
buf
, 
size_t
 
n
)

61 
ssize_t
 
r
 = -
EBADF
;

62 
fûe_t
* 
f
 = 
	`fûe_gë
(
fd
);

64 i‡(
f
)

66 
r
 = 
	`fûe_wrôe
(
f
, 
buf
, 
n
);

67 
	`fûe_de¸ef
(
f
);

70  
r
;

71 
	}
}

73 
	$©_kfd
(
dúfd
)

75 i‡(
dúfd
 =
AT_FDCWD
)

76  
AT_FDCWD
;

77 
fûe_t
* 
dú
 = 
	`fûe_gë
(
dúfd
);

78 i‡(
dú
 =
NULL
)

80  
dú
->
kfd
;

81 
	}
}

83 
	$sys_›í©
(
dúfd
, c⁄° * 
«me
, 
Êags
, 
mode
)

85 
kfd
 = 
	`©_kfd
(
dúfd
);

86 i‡(
kfd
 != -1) {

87 
fûe_t
* 
fûe
 = 
	`fûe_›í©
(
kfd
, 
«me
, 
Êags
, 
mode
);

88 i‡(
	`IS_ERR_VALUE
(
fûe
))

89  
	`PTR_ERR
(
fûe
);

91 
fd
 = 
	`fûe_dup
(
fûe
);

92 i‡(
fd
 < 0) {

93 
	`fûe_de¸ef
(
fûe
);

94  -
ENOMEM
;

97  
fd
;

99  -
EBADF
;

100 
	}
}

102 
	$sys_›í
(c⁄° * 
«me
, 
Êags
, 
mode
)

104  
	`sys_›í©
(
AT_FDCWD
, 
«me
, 
Êags
, 
mode
);

105 
	}
}

107 
	$sys_˛o£
(
fd
)

109 
ªt
 = 
	`fd_˛o£
(
fd
);

110 i‡(
ªt
 < 0)

111  -
EBADF
;

112  
ªt
;

113 
	}
}

115 
	$sys_ª«mót
(
ﬁd_fd
, c⁄° *
ﬁd_∑th
, 
√w_fd
, c⁄° *
√w_∑th
) {

116 
ﬁd_kfd
 = 
	`©_kfd
(
ﬁd_fd
);

117 
√w_kfd
 = 
	`©_kfd
(
√w_fd
);

118 if(
ﬁd_kfd
 !-1 && 
√w_kfd
 != -1) {

119 
size_t
 
ﬁd_size
 = 
	`°æí
(
ﬁd_∑th
)+1;

120 
size_t
 
√w_size
 = 
	`°æí
(
√w_∑th
)+1;

121  
	`‰⁄ãnd_sysˇŒ
(
SYS_ª«mót
, 
ﬁd_kfd
, 
	`va2∑
(
ﬁd_∑th
), 
ﬁd_size
,

122 
√w_kfd
, 
	`va2∑
(
√w_∑th
), 
√w_size
, 0);

124  -
EBADF
;

125 
	}
}

127 
	$sys_f°©
(
fd
, * 
°
)

129 
r
 = -
EBADF
;

130 
fûe_t
* 
f
 = 
	`fûe_gë
(
fd
);

132 i‡(
f
)

134 
r
 = 
	`fûe_°©
(
f
, 
°
);

135 
	`fûe_de¸ef
(
f
);

138  
r
;

139 
	}
}

141 
	$sys_f˙é
(
fd
, 
cmd
, 
¨g
)

143 
r
 = -
EBADF
;

144 
fûe_t
* 
f
 = 
	`fûe_gë
(
fd
);

146 i‡(
f
)

148 
r
 = 
	`‰⁄ãnd_sysˇŒ
(
SYS_f˙é
, 
f
->
kfd
, 
cmd
, 
¨g
, 0, 0, 0, 0);

149 
	`fûe_de¸ef
(
f
);

152  
r
;

153 
	}
}

155 
	$sys_·runˇã
(
fd
, 
off_t
 
Àn
)

157 
r
 = -
EBADF
;

158 
fûe_t
* 
f
 = 
	`fûe_gë
(
fd
);

160 i‡(
f
)

162 
r
 = 
	`fûe_åunˇã
(
f
, 
Àn
);

163 
	`fûe_de¸ef
(
f
);

166  
r
;

167 
	}
}

169 
	$sys_dup
(
fd
)

171 
r
 = -
EBADF
;

172 
fûe_t
* 
f
 = 
	`fûe_gë
(
fd
);

174 i‡(
f
)

176 
r
 = 
	`fûe_dup
(
f
);

177 
	`fûe_de¸ef
(
f
);

180  
r
;

181 
	}
}

183 
ssize_t
 
	$sys_l£ek
(
fd
, 
size_t
 
±r
, 
dú
)

185 
ssize_t
 
r
 = -
EBADF
;

186 
fûe_t
* 
f
 = 
	`fûe_gë
(
fd
);

188 i‡(
f
)

190 
r
 = 
	`fûe_l£ek
(
f
, 
±r
, 
dú
);

191 
	`fûe_de¸ef
(
f
);

194  
r
;

195 
	}
}

197 
	$sys_l°©
(c⁄° * 
«me
, * 
°
)

199 
‰⁄ãnd_°©
 
buf
;

200 
size_t
 
«me_size
 = 
	`°æí
(
«me
)+1;

201 
ªt
 = 
	`‰⁄ãnd_sysˇŒ
(
SYS_l°©
, 
	`va2∑
(
«me
), 
«me_size
, va2∑(&
buf
), 0, 0, 0, 0);

202 
	`c›y_°©
(
°
, &
buf
);

203  
ªt
;

204 
	}
}

206 
	$sys_f°©©
(
dúfd
, c⁄° * 
«me
, * 
°
, 
Êags
)

208 
kfd
 = 
	`©_kfd
(
dúfd
);

209 i‡(
kfd
 != -1) {

210 
‰⁄ãnd_°©
 
buf
;

211 
size_t
 
«me_size
 = 
	`°æí
(
«me
)+1;

212 
ªt
 = 
	`‰⁄ãnd_sysˇŒ
(
SYS_f°©©
, 
kfd
, 
	`va2∑
(
«me
), 
«me_size
, va2∑(&
buf
), 
Êags
, 0, 0);

213 
	`c›y_°©
(
°
, &
buf
);

214  
ªt
;

216  -
EBADF
;

217 
	}
}

219 
	$sys_°©
(c⁄° * 
«me
, * 
°
)

221  
	`sys_f°©©
(
AT_FDCWD
, 
«me
, 
°
, 0);

222 
	}
}

224 
	$sys_Ác˚sßt
(
dúfd
, c⁄° *
«me
, 
mode
)

226 
kfd
 = 
	`©_kfd
(
dúfd
);

227 i‡(
kfd
 != -1) {

228 
size_t
 
«me_size
 = 
	`°æí
(
«me
)+1;

229  
	`‰⁄ãnd_sysˇŒ
(
SYS_Ác˚sßt
, 
kfd
, 
	`va2∑
(
«me
), 
«me_size
, 
mode
, 0, 0, 0);

231  -
EBADF
;

232 
	}
}

234 
	$sys_ac˚ss
(c⁄° *
«me
, 
mode
)

236  
	`sys_Ác˚sßt
(
AT_FDCWD
, 
«me
, 
mode
);

237 
	}
}

239 
	$sys_lök©
(
ﬁd_dúfd
, c⁄° * 
ﬁd_«me
, 
√w_dúfd
, c⁄° * 
√w_«me
, 
Êags
)

241 
ﬁd_kfd
 = 
	`©_kfd
(
ﬁd_dúfd
);

242 
√w_kfd
 = 
	`©_kfd
(
√w_dúfd
);

243 i‡(
ﬁd_kfd
 !-1 && 
√w_kfd
 != -1) {

244 
size_t
 
ﬁd_size
 = 
	`°æí
(
ﬁd_«me
)+1;

245 
size_t
 
√w_size
 = 
	`°æí
(
√w_«me
)+1;

246  
	`‰⁄ãnd_sysˇŒ
(
SYS_lök©
, 
ﬁd_kfd
, 
	`va2∑
(
ﬁd_«me
), 
ﬁd_size
,

247 
√w_kfd
, 
	`va2∑
(
√w_«me
), 
√w_size
,

248 
Êags
);

250  -
EBADF
;

251 
	}
}

253 
	$sys_lök
(c⁄° * 
ﬁd_«me
, c⁄° * 
√w_«me
)

255  
	`sys_lök©
(
AT_FDCWD
, 
ﬁd_«me
, AT_FDCWD, 
√w_«me
, 0);

256 
	}
}

258 
	$sys_u∆ök©
(
dúfd
, c⁄° * 
«me
, 
Êags
)

260 
kfd
 = 
	`©_kfd
(
dúfd
);

261 i‡(
kfd
 != -1) {

262 
size_t
 
«me_size
 = 
	`°æí
(
«me
)+1;

263  
	`‰⁄ãnd_sysˇŒ
(
SYS_u∆ök©
, 
kfd
, 
	`va2∑
(
«me
), 
«me_size
, 
Êags
, 0, 0, 0);

265  -
EBADF
;

266 
	}
}

268 
	$sys_u∆ök
(c⁄° * 
«me
)

270  
	`sys_u∆ök©
(
AT_FDCWD
, 
«me
, 0);

271 
	}
}

273 
	$sys_mkdú©
(
dúfd
, c⁄° * 
«me
, 
mode
)

275 
kfd
 = 
	`©_kfd
(
dúfd
);

276 i‡(
kfd
 != -1) {

277 
size_t
 
«me_size
 = 
	`°æí
(
«me
)+1;

278  
	`‰⁄ãnd_sysˇŒ
(
SYS_mkdú©
, 
kfd
, 
	`va2∑
(
«me
), 
«me_size
, 
mode
, 0, 0, 0);

280  -
EBADF
;

281 
	}
}

283 
	$sys_mkdú
(c⁄° * 
«me
, 
mode
)

285  
	`sys_mkdú©
(
AT_FDCWD
, 
«me
, 
mode
);

286 
	}
}

288 
	$sys_gëcwd
(c⁄° * 
buf
, 
size_t
 
size
)

290 
	`p›uœã_m≠pög
(
buf
, 
size
, 
PROT_WRITE
);

291  
	`‰⁄ãnd_sysˇŒ
(
SYS_gëcwd
, 
	`va2∑
(
buf
), 
size
, 0, 0, 0, 0, 0);

292 
	}
}

294 
size_t
 
	$sys_brk
(
size_t
 
pos
)

296  
	`do_brk
(
pos
);

297 
	}
}

299 
	$sys_u«me
(* 
buf
)

301 c⁄° 
sz
 = 65;

302 
	`°r˝y
(
buf
 + 0*
sz
, "Proxy Kernel");

303 
	`°r˝y
(
buf
 + 1*
sz
, "");

304 
	`°r˝y
(
buf
 + 2*
sz
, "3.4.5");

305 
	`°r˝y
(
buf
 + 3*
sz
, "");

306 
	`°r˝y
(
buf
 + 4*
sz
, "");

307 
	`°r˝y
(
buf
 + 5*
sz
, "");

309 
	}
}

311 
pid_t
 
	$sys_gëpid
()

314 
	}
}

316 
	$sys_gëuid
()

319 
	}
}

321 
uöçå_t
 
	$sys_mm≠
(
uöçå_t
 
addr
, 
size_t
 
Àngth
, 
¥Ÿ
, 
Êags
, 
fd
, 
off_t
 
off£t
)

323 #i‡
__riscv_xÀn
 == 32

324 i‡(
off£t
 != (offset << 12 >> 12))

325  -
ENXIO
;

326 
off£t
 <<= 12;

328  
	`do_mm≠
(
addr
, 
Àngth
, 
¥Ÿ
, 
Êags
, 
fd
, 
off£t
);

329 
	}
}

331 
	$sys_munm≠
(
uöçå_t
 
addr
, 
size_t
 
Àngth
)

333  
	`do_munm≠
(
addr
, 
Àngth
);

334 
	}
}

336 
uöçå_t
 
	$sys_mªm≠
(
uöçå_t
 
addr
, 
size_t
 
ﬁd_size
, size_à
√w_size
, 
Êags
)

338  
	`do_mªm≠
(
addr
, 
ﬁd_size
, 
√w_size
, 
Êags
);

339 
	}
}

341 
uöçå_t
 
	$sys_m¥Ÿe˘
(
uöçå_t
 
addr
, 
size_t
 
Àngth
, 
¥Ÿ
)

343  
	`do_m¥Ÿe˘
(
addr
, 
Àngth
, 
¥Ÿ
);

344 
	}
}

346 
	$sys_π_siga˘i⁄
(
sig
, c⁄° * 
a˘
, * 
ﬂ˘
, 
size_t
 
sssz
)

348 i‡(
ﬂ˘
)

349 
	`mem£t
(
ﬂ˘
, 0, () * 3);

352 
	}
}

354 
	$sys_time
(* 
loc
)

356 
uöçå_t
 
t
 = 
	`rdcy˛e
(Ë/ 
CLOCK_FREQ
;

357 i‡(
loc
)

358 *
loc
 = 
t
;

359  
t
;

360 
	}
}

362 
	$sys_times
(* 
loc
)

364 
uöçå_t
 
t
 = 
	`rdcy˛e
();

365 
	`kas£π
(
CLOCK_FREQ
 % 1000000 == 0);

366 
loc
[0] = 
t
 / (
CLOCK_FREQ
 / 1000000);

367 
loc
[1] = 0;

368 
loc
[2] = 0;

369 
loc
[3] = 0;

372 
	}
}

374 
	$sys_gëtimeofday
(* 
loc
)

376 
uöçå_t
 
t
 = 
	`rdcy˛e
();

377 
loc
[0] = 
t
 / 
CLOCK_FREQ
;

378 
loc
[1] = (
t
 % 
CLOCK_FREQ
) / (CLOCK_FREQ / 1000000);

381 
	}
}

383 
ssize_t
 
	$sys_wrôev
(
fd
, c⁄° * 
iov
, 
˙t
)

385 
ssize_t
 
ªt
 = 0;

386 
i
 = 0; i < 
˙t
; i++)

388 
ssize_t
 
r
 = 
	`sys_wrôe
(
fd
, (*)
iov
[2*
i
], iov[2*i+1]);

389 i‡(
r
 < 0)

390  
r
;

391 
ªt
 +
r
;

393  
ªt
;

394 
	}
}

396 
	$sys_chdú
(c⁄° *
∑th
)

398  
	`‰⁄ãnd_sysˇŒ
(
SYS_chdú
, 
	`va2∑
(
∑th
), 0, 0, 0, 0, 0, 0);

399 
	}
}

401 
	$sys_gëdíts
(
fd
, * 
dúbuf
, 
cou¡
)

404 
	}
}

406 
	$sys_°ub_suc˚ss
()

409 
	}
}

411 
	$sys_°ub_nosys
()

413  -
ENOSYS
;

414 
	}
}

416 
	$do_sysˇŒ
(
a0
, 
a1
, 
a2
, 
a3
, 
a4
, 
a5
, 
n
)

418 c⁄° * 
sysˇŒ_èbÀ
[] = {

419 [
SYS_exô
] = 
sys_exô
,

420 [
SYS_exô_group
] = 
sys_exô
,

421 [
SYS_ªad
] = 
sys_ªad
,

422 [
SYS_¥ód
] = 
sys_¥ód
,

423 [
SYS_wrôe
] = 
sys_wrôe
,

424 [
SYS_›í©
] = 
sys_›í©
,

425 [
SYS_˛o£
] = 
sys_˛o£
,

426 [
SYS_f°©
] = 
sys_f°©
,

427 [
SYS_l£ek
] = 
sys_l£ek
,

428 [
SYS_f°©©
] = 
sys_f°©©
,

429 [
SYS_lök©
] = 
sys_lök©
,

430 [
SYS_u∆ök©
] = 
sys_u∆ök©
,

431 [
SYS_mkdú©
] = 
sys_mkdú©
,

432 [
SYS_ª«mót
] = 
sys_ª«mót
,

433 [
SYS_gëcwd
] = 
sys_gëcwd
,

434 [
SYS_brk
] = 
sys_brk
,

435 [
SYS_u«me
] = 
sys_u«me
,

436 [
SYS_gëpid
] = 
sys_gëpid
,

437 [
SYS_gëuid
] = 
sys_gëuid
,

438 [
SYS_gëeuid
] = 
sys_gëuid
,

439 [
SYS_gëgid
] = 
sys_gëuid
,

440 [
SYS_gëegid
] = 
sys_gëuid
,

441 [
SYS_mm≠
] = 
sys_mm≠
,

442 [
SYS_munm≠
] = 
sys_munm≠
,

443 [
SYS_mªm≠
] = 
sys_mªm≠
,

444 [
SYS_m¥Ÿe˘
] = 
sys_m¥Ÿe˘
,

445 [
SYS_π_siga˘i⁄
] = 
sys_π_siga˘i⁄
,

446 [
SYS_gëtimeofday
] = 
sys_gëtimeofday
,

447 [
SYS_times
] = 
sys_times
,

448 [
SYS_wrôev
] = 
sys_wrôev
,

449 [
SYS_Ác˚sßt
] = 
sys_Ác˚sßt
,

450 [
SYS_f˙é
] = 
sys_f˙é
,

451 [
SYS_·runˇã
] = 
sys_·runˇã
,

452 [
SYS_gëdíts
] = 
sys_gëdíts
,

453 [
SYS_dup
] = 
sys_dup
,

454 [
SYS_ªadlök©
] = 
sys_°ub_nosys
,

455 [
SYS_π_sig¥ocmask
] = 
sys_°ub_suc˚ss
,

456 [
SYS_io˘l
] = 
sys_°ub_nosys
,

457 [
SYS_˛ock_gëtime
] = 
sys_°ub_nosys
,

458 [
SYS_gërußge
] = 
sys_°ub_nosys
,

459 [
SYS_gëæimô
] = 
sys_°ub_nosys
,

460 [
SYS_£ålimô
] = 
sys_°ub_nosys
,

461 [
SYS_chdú
] = 
sys_chdú
,

462 [
SYS_£t_tid_addªss
] = 
sys_°ub_nosys
,

463 [
SYS_£t_robu°_li°
] = 
sys_°ub_nosys
,

466 c⁄° * 
ﬁd_sysˇŒ_èbÀ
[] = {

467 [-
OLD_SYSCALL_THRESHOLD
 + 
SYS_›í
] = 
sys_›í
,

468 [-
OLD_SYSCALL_THRESHOLD
 + 
SYS_lök
] = 
sys_lök
,

469 [-
OLD_SYSCALL_THRESHOLD
 + 
SYS_u∆ök
] = 
sys_u∆ök
,

470 [-
OLD_SYSCALL_THRESHOLD
 + 
SYS_mkdú
] = 
sys_mkdú
,

471 [-
OLD_SYSCALL_THRESHOLD
 + 
SYS_ac˚ss
] = 
sys_ac˚ss
,

472 [-
OLD_SYSCALL_THRESHOLD
 + 
SYS_°©
] = 
sys_°©
,

473 [-
OLD_SYSCALL_THRESHOLD
 + 
SYS_l°©
] = 
sys_l°©
,

474 [-
OLD_SYSCALL_THRESHOLD
 + 
SYS_time
] = 
sys_time
,

477 
sysˇŒ_t
 
f
 = 0;

479 i‡(
n
 < 
	`ARRAY_SIZE
(
sysˇŒ_èbÀ
))

480 
f
 = 
sysˇŒ_èbÀ
[
n
];

481 i‡(
n
 - 
OLD_SYSCALL_THRESHOLD
 < 
	`ARRAY_SIZE
(
ﬁd_sysˇŒ_èbÀ
))

482 
f
 = 
ﬁd_sysˇŒ_èbÀ
[
n
 - 
OLD_SYSCALL_THRESHOLD
];

484 i‡(!
f
)

485 
	`∑nic
("bad sysˇŒ #%ld!",
n
);

487  
	`f
(
a0
, 
a1
, 
a2
, 
a3
, 
a4
, 
a5
, 
n
);

488 
	}
}

	@pk/syscall.h

3 #i‚de‡
_PK_SYSCALL_H


4 
	#_PK_SYSCALL_H


	)

6 
	#SYS_exô
 93

	)

7 
	#SYS_exô_group
 94

	)

8 
	#SYS_gëpid
 172

	)

9 
	#SYS_kûl
 129

	)

10 
	#SYS_ªad
 63

	)

11 
	#SYS_wrôe
 64

	)

12 
	#SYS_›í©
 56

	)

13 
	#SYS_˛o£
 57

	)

14 
	#SYS_l£ek
 62

	)

15 
	#SYS_brk
 214

	)

16 
	#SYS_lök©
 37

	)

17 
	#SYS_u∆ök©
 35

	)

18 
	#SYS_mkdú©
 34

	)

19 
	#SYS_ª«mót
 38

	)

20 
	#SYS_chdú
 49

	)

21 
	#SYS_gëcwd
 17

	)

22 
	#SYS_f°©
 80

	)

23 
	#SYS_f°©©
 79

	)

24 
	#SYS_Ác˚sßt
 48

	)

25 
	#SYS_¥ód
 67

	)

26 
	#SYS_pwrôe
 68

	)

27 
	#SYS_u«me
 160

	)

28 
	#SYS_gëuid
 174

	)

29 
	#SYS_gëeuid
 175

	)

30 
	#SYS_gëgid
 176

	)

31 
	#SYS_gëegid
 177

	)

32 
	#SYS_mm≠
 222

	)

33 
	#SYS_munm≠
 215

	)

34 
	#SYS_mªm≠
 216

	)

35 
	#SYS_m¥Ÿe˘
 226

	)

36 
	#SYS_gëmaöv¨s
 2011

	)

37 
	#SYS_π_siga˘i⁄
 134

	)

38 
	#SYS_wrôev
 66

	)

39 
	#SYS_gëtimeofday
 169

	)

40 
	#SYS_times
 153

	)

41 
	#SYS_f˙é
 25

	)

42 
	#SYS_·runˇã
 46

	)

43 
	#SYS_gëdíts
 61

	)

44 
	#SYS_dup
 23

	)

45 
	#SYS_ªadlök©
 78

	)

46 
	#SYS_π_sig¥ocmask
 135

	)

47 
	#SYS_io˘l
 29

	)

48 
	#SYS_gëæimô
 163

	)

49 
	#SYS_£ålimô
 164

	)

50 
	#SYS_gërußge
 165

	)

51 
	#SYS_˛ock_gëtime
 113

	)

52 
	#SYS_£t_tid_addªss
 96

	)

53 
	#SYS_£t_robu°_li°
 99

	)

55 
	#OLD_SYSCALL_THRESHOLD
 1024

	)

56 
	#SYS_›í
 1024

	)

57 
	#SYS_lök
 1025

	)

58 
	#SYS_u∆ök
 1026

	)

59 
	#SYS_mkdú
 1030

	)

60 
	#SYS_ac˚ss
 1033

	)

61 
	#SYS_°©
 1038

	)

62 
	#SYS_l°©
 1039

	)

63 
	#SYS_time
 1062

	)

65 
	#IS_ERR_VALUE
(
x
Ë(()(xË>()-4096)

	)

66 
	#ERR_PTR
(
x
Ë((*)()(x))

	)

67 
	#PTR_ERR
(
x
Ë(()(x))

	)

69 
	#AT_FDCWD
 -100

	)

71 
do_sysˇŒ
(
a0
, 
a1
, 
a2
, 
a3
, 
a4
, 
a5
, 
n
);

	@softfloat/8086/OLD-specialize.c

39 
boﬁ
 
	gÊﬂt_dëe˘Tööess
 = 
Êﬂt_tööess_a·îRoundög
;

	@softfloat/8086/OLD-specialize.h

38 *** 
COMMON


40 
Êag
 
	msign
;

41 
uöt128_t
 
	mbôs
;

42 } 
	tcomm⁄NaNT
;

47 
	#Êﬂt32Bôs_deÁu…NaN
 0xFFC00000

	)

53 *** 
	gCOMMON


54 
	#so·Êﬂt_isNaNFlﬂt32Bôs
–
a
 ) ( 0xFF000000 < (
uöt32_t
Ë–®)<<1 )

	)

60 
ölöe
 
boﬁ
 
	$so·Êﬂt_isSigNaNFlﬂt32Bôs
–
uöt32_t
 
a
 )

61 {  ( ( 
a
>>22 & 0x1FF ) =0x1FE ) && (á & 0x003FFFFF ); 
	}
}

65 
comm⁄NaNT
 
so·Êﬂt_NaNFromFlﬂt32Bôs
–
uöt32_t
 );

66 
uöt32_t
 
so·Êﬂt_Êﬂt32BôsFromNaN
–
comm⁄NaNT
 );

67 
uöt32_t
 
so·Êﬂt_¥›NaNFlﬂt32Bôs
( uint32_t, uint32_t );

72 
	#Êﬂt64Bôs_deÁu…NaN
 0xFFF8000000000000

	)

78 *** 
	gCOMMON


79 
	#so·Êﬂt_isNaNFlﬂt64Bôs
–
a
 ) ( 0xFFE0000000000000 < (
uöt64_t
Ë–®)<<1 )

	)

91 
Êag
 
	$Êﬂt64_is_sig«lög_«n
–
Êﬂt64
 
a
 )

95 –––
a
>>51 ) & 0xFFF ) == 0xFFE )

96 && ( 
a
 & 
	`LIT64
( 0x0007FFFFFFFFFFFF ) );

98 
	}
}

106 
comm⁄NaNT
 
	$Êﬂt64ToComm⁄NaN
–
Êﬂt64
 
a
 )

108 
comm⁄NaNT
 
z
;

110 i‡–
	`Êﬂt64_is_sig«lög_«n
–
a
 ) ) 
	`Êﬂt_øi£
–
Êﬂt_Êag_övÆid
 );

111 
z
.
sign
 = 
a
>>63;

112 
z
.
low
 = 0;

113 
z
.
high
 = 
a
<<12;

114  
z
;

116 
	}
}

123 
Êﬂt64
 
	$comm⁄NaNToFlﬂt64
–
comm⁄NaNT
 
a
 )

127 ––(
bôs64
Ë
a
.
sign
 )<<63 )

128 | 
	`LIT64
( 0x7FF8000000000000 )

129 | ( 
a
.
high
>>12 );

131 
	}
}

139 
Êﬂt64
 
	$¥›ag©eFlﬂt64NaN
–
Êﬂt64
 
a
, flﬂt64 
b
 )

141 
Êag
 
aIsNaN
, 
aIsSig«lögNaN
, 
bIsNaN
, 
bIsSig«lögNaN
;

143 
aIsNaN
 = 
	`Êﬂt64_is_«n
–
a
 );

144 
aIsSig«lögNaN
 = 
	`Êﬂt64_is_sig«lög_«n
–
a
 );

145 
bIsNaN
 = 
	`Êﬂt64_is_«n
–
b
 );

146 
bIsSig«lögNaN
 = 
	`Êﬂt64_is_sig«lög_«n
–
b
 );

147 
a
 |
	`LIT64
( 0x0008000000000000 );

148 
b
 |
	`LIT64
( 0x0008000000000000 );

149 i‡–
aIsSig«lögNaN
 | 
bIsSig«lögNaN
 ) 
	`Êﬂt_øi£
–
Êﬂt_Êag_övÆid
 );

150 i‡–
aIsSig«lögNaN
 ) {

151 i‡–
bIsSig«lögNaN
 ) 
ªtu∫L¨gîSignifiˇnd
;

152  
bIsNaN
 ? 
b
 : 
a
;

154 i‡–
aIsNaN
 ) {

155 i‡–
bIsSig«lögNaN
 | ! 
bIsNaN
 )  
a
;

156 
ªtu∫L¨gîSignifiˇnd
:

157 i‡–(
bôs64
Ë–
a
<<1 ) < (bôs64Ë–
b
<<1 ) )  b;

158 i‡–(
bôs64
Ë–
b
<<1 ) < (bôs64Ë–
a
<<1 ) ) á;

159  ( 
a
 < 
b
 ) ?á : b;

162  
b
;

165 
	}
}

167 #ifde‡
FLOATX80


174 
	#Êﬂtx80_deÁu…_«n_high
 0xFFFF

	)

175 
	#Êﬂtx80_deÁu…_«n_low
 
	`LIT64
–0xC000000000000000 )

	)

182 
Êag
 
	$Êﬂtx80_is_«n
–
Êﬂtx80
 
a
 )

185  ( ( 
a
.
high
 & 0x7FFF ) =0x7FFF ) && (
bôs64
Ë–a.
low
<<1 );

187 
	}
}

194 
Êag
 
	$Êﬂtx80_is_sig«lög_«n
–
Êﬂtx80
 
a
 )

196 
bôs64
 
aLow
;

198 
aLow
 = 
a
.
low
 & ~ 
	`LIT64
( 0x4000000000000000 );

200 ––
a
.
high
 & 0x7FFF ) == 0x7FFF )

201 && (
bôs64
Ë–
aLow
<<1 )

202 && ( 
a
.
low
 =
aLow
 );

204 
	}
}

212 
comm⁄NaNT
 
	$Êﬂtx80ToComm⁄NaN
–
Êﬂtx80
 
a
 )

214 
comm⁄NaNT
 
z
;

216 i‡–
	`Êﬂtx80_is_sig«lög_«n
–
a
 ) ) 
	`Êﬂt_øi£
–
Êﬂt_Êag_övÆid
 );

217 
z
.
sign
 = 
a
.
high
>>15;

218 
z
.
low
 = 0;

219 
z
.
high
 = 
a
.
low
<<1;

220  
z
;

222 
	}
}

229 
Êﬂtx80
 
	$comm⁄NaNToFlﬂtx80
–
comm⁄NaNT
 
a
 )

231 
Êﬂtx80
 
z
;

233 
z
.
low
 = 
	`LIT64
–0xC000000000000000 ) | ( 
a
.
high
>>1 );

234 
z
.
high
 = ( ( (
bôs16
Ë
a
.
sign
 )<<15 ) | 0x7FFF;

235  
z
;

237 
	}
}

245 
Êﬂtx80
 
	$¥›ag©eFlﬂtx80NaN
–
Êﬂtx80
 
a
, flﬂtx80 
b
 )

247 
Êag
 
aIsNaN
, 
aIsSig«lögNaN
, 
bIsNaN
, 
bIsSig«lögNaN
;

249 
aIsNaN
 = 
	`Êﬂtx80_is_«n
–
a
 );

250 
aIsSig«lögNaN
 = 
	`Êﬂtx80_is_sig«lög_«n
–
a
 );

251 
bIsNaN
 = 
	`Êﬂtx80_is_«n
–
b
 );

252 
bIsSig«lögNaN
 = 
	`Êﬂtx80_is_sig«lög_«n
–
b
 );

253 
a
.
low
 |
	`LIT64
( 0xC000000000000000 );

254 
b
.
low
 |
	`LIT64
( 0xC000000000000000 );

255 i‡–
aIsSig«lögNaN
 | 
bIsSig«lögNaN
 ) 
	`Êﬂt_øi£
–
Êﬂt_Êag_övÆid
 );

256 i‡–
aIsSig«lögNaN
 ) {

257 i‡–
bIsSig«lögNaN
 ) 
ªtu∫L¨gîSignifiˇnd
;

258  
bIsNaN
 ? 
b
 : 
a
;

260 i‡–
aIsNaN
 ) {

261 i‡–
bIsSig«lögNaN
 | ! 
bIsNaN
 )  
a
;

262 
ªtu∫L¨gîSignifiˇnd
:

263 i‡–
a
.
low
 < 
b
.low )  b;

264 i‡–
b
.
low
 < 
a
.low ) á;

265  ( 
a
.
high
 < 
b
.high ) ?á : b;

268  
b
;

271 
	}
}

275 #ifde‡
FLOAT128


281 
	#Êﬂt128_deÁu…_«n_high
 
	`LIT64
–0xFFFF800000000000 )

	)

282 
	#Êﬂt128_deÁu…_«n_low
 
	`LIT64
–0x0000000000000000 )

	)

289 
Êag
 
	$Êﬂt128_is_«n
–
Êﬂt128
 
a
 )

293 –
	`LIT64
–0xFFFE000000000000 ) <(
bôs64
Ë–
a
.
high
<<1 ) )

294 && ( 
a
.
low
 || (á.
high
 & 
	`LIT64
( 0x0000FFFFFFFFFFFF ) ) );

296 
	}
}

303 
Êag
 
	$Êﬂt128_is_sig«lög_«n
–
Êﬂt128
 
a
 )

307 –––
a
.
high
>>47 ) & 0xFFFF ) == 0xFFFE )

308 && ( 
a
.
low
 || (á.
high
 & 
	`LIT64
( 0x00007FFFFFFFFFFF ) ) );

310 
	}
}

318 
comm⁄NaNT
 
	$Êﬂt128ToComm⁄NaN
–
Êﬂt128
 
a
 )

320 
comm⁄NaNT
 
z
;

322 i‡–
	`Êﬂt128_is_sig«lög_«n
–
a
 ) ) 
	`Êﬂt_øi£
–
Êﬂt_Êag_övÆid
 );

323 
z
.
sign
 = 
a
.
high
>>63;

324 
	`sh‹tShi·128Le·
–
a
.
high
,á.
low
, 16, &
z
.high, &z.low );

325  
z
;

327 
	}
}

334 
Êﬂt128
 
	$comm⁄NaNToFlﬂt128
–
comm⁄NaNT
 
a
 )

336 
Êﬂt128
 
z
;

338 
	`shi·128Right
–
a
.
high
,á.
low
, 16, &
z
.high, &z.low );

339 
z
.
high
 |––(
bôs64
Ë
a
.
sign
 )<<63 ) | 
	`LIT64
( 0x7FFF800000000000 );

340  
z
;

342 
	}
}

350 
Êﬂt128
 
	$¥›ag©eFlﬂt128NaN
–
Êﬂt128
 
a
, flﬂt128 
b
 )

352 
Êag
 
aIsNaN
, 
aIsSig«lögNaN
, 
bIsNaN
, 
bIsSig«lögNaN
;

354 
aIsNaN
 = 
	`Êﬂt128_is_«n
–
a
 );

355 
aIsSig«lögNaN
 = 
	`Êﬂt128_is_sig«lög_«n
–
a
 );

356 
bIsNaN
 = 
	`Êﬂt128_is_«n
–
b
 );

357 
bIsSig«lögNaN
 = 
	`Êﬂt128_is_sig«lög_«n
–
b
 );

358 
a
.
high
 |
	`LIT64
( 0x0000800000000000 );

359 
b
.
high
 |
	`LIT64
( 0x0000800000000000 );

360 i‡–
aIsSig«lögNaN
 | 
bIsSig«lögNaN
 ) 
	`Êﬂt_øi£
–
Êﬂt_Êag_övÆid
 );

361 i‡–
aIsSig«lögNaN
 ) {

362 i‡–
bIsSig«lögNaN
 ) 
ªtu∫L¨gîSignifiˇnd
;

363  
bIsNaN
 ? 
b
 : 
a
;

365 i‡–
aIsNaN
 ) {

366 i‡–
bIsSig«lögNaN
 | ! 
bIsNaN
 )  
a
;

367 
ªtu∫L¨gîSignifiˇnd
:

368 i‡–
	`…128
–
a
.
high
<<1,á.
low
, 
b
.high<<1, b.low ) )  b;

369 i‡–
	`…128
–
b
.
high
<<1, b.
low
, 
a
.high<<1,á.low ) ) á;

370  ( 
a
.
high
 < 
b
.high ) ?á : b;

373  
b
;

376 
	}
}

	@softfloat/8086/platform.h

37 
	#LITTLEENDIAN


	)

	@softfloat/8086/s_commonNaNToF32UI.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"•ecülize.h
"

11 
uöt_Á°32_t
 
	$so·Êﬂt_comm⁄NaNToF32UI
–
comm⁄NaN
 
a
 )

14  (
uöt_Á°32_t
Ë
a
.
sign
<<31 | 0x7FC00000 |á.
v64
>>41;

16 
	}
}

	@softfloat/8086/s_commonNaNToF64UI.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"•ecülize.h
"

11 
uöt_Á°64_t
 
	$so·Êﬂt_comm⁄NaNToF64UI
–
comm⁄NaN
 
a
 )

15 (
uöt_Á°64_t
Ë
a
.
sign
<<63 | 
	`UINT64_C
( 0x7FF8000000000000 )

16 | 
a
.
v64
>>12;

18 
	}
}

	@softfloat/8086/s_f32UIToCommonNaN.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"•ecülize.h
"

5 
	~"so·Êﬂt.h
"

12 
comm⁄NaN
 
	$so·Êﬂt_f32UIToComm⁄NaN
–
uöt_Á°32_t
 
uiA
 )

14 
comm⁄NaN
 
z
;

16 i‡–
	`so·Êﬂt_isSigNaNF32UI
–
uiA
 ) ) {

17 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

19 
z
.
sign
 = 
uiA
>>31;

20 
z
.
v64
 = (
uöt_Á°64_t
Ë
uiA
<<41;

21 
z
.
v0
 = 0;

22  
z
;

24 
	}
}

	@softfloat/8086/s_f64UIToCommonNaN.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"•ecülize.h
"

5 
	~"so·Êﬂt.h
"

12 
comm⁄NaN
 
	$so·Êﬂt_f64UIToComm⁄NaN
–
uöt_Á°64_t
 
uiA
 )

14 
comm⁄NaN
 
z
;

16 i‡–
	`so·Êﬂt_isSigNaNF64UI
–
uiA
 ) ) {

17 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

19 
z
.
sign
 = 
uiA
>>63;

20 
z
.
v64
 = 
uiA
<<12;

21 
z
.
v0
 = 0;

22  
z
;

24 
	}
}

	@softfloat/8086/s_isSigNaNF32UI.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"•ecülize.h
"

7 
boﬁ
 
	$so·Êﬂt_isSigNaNF32UI
–
uöt_Á°32_t
 
ui
 )

10  ( ( 
ui
>>22 & 0x1FF ) == 0x1FE ) && ( ui & 0x003FFFFF );

12 
	}
}

	@softfloat/8086/s_isSigNaNF64UI.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"•ecülize.h
"

7 
boﬁ
 
	$so·Êﬂt_isSigNaNF64UI
–
uöt_Á°64_t
 
ui
 )

11 ––
ui
>>51 & 0xFFF ) == 0xFFE )

12 && ( 
ui
 & 
	`UINT64_C
( 0x0007FFFFFFFFFFFF ) );

14 
	}
}

	@softfloat/8086/s_propagateNaNF32UI.c

4 
	~<°dboﬁ.h
>

5 
	~<°döt.h
>

6 
	~"∂©f‹m.h
"

7 
	~"öã∫Æs.h
"

8 
	~"•ecülize.h
"

9 
	~"so·Êﬂt.h
"

17 
uöt_Á°32_t


18 
	$so·Êﬂt_¥›ag©eNaNF32UI
–
uöt_Á°32_t
 
uiA
, uöt_Á°32_à
uiB
 )

20 
boﬁ
 
isNaNA
, 
isSigNaNA
, 
isNaNB
, 
isSigNaNB
;

21 
uöt_Á°32_t
 
uiMagA
, 
uiMagB
;

25 
isNaNA
 = 
	`isNaNF32UI
–
uiA
 );

26 
isSigNaNA
 = 
	`so·Êﬂt_isSigNaNF32UI
–
uiA
 );

27 
isNaNB
 = 
	`isNaNF32UI
–
uiB
 );

28 
isSigNaNB
 = 
	`so·Êﬂt_isSigNaNF32UI
–
uiB
 );

32 
uiA
 |= 0x00400000;

33 
uiB
 |= 0x00400000;

36 i‡–
isSigNaNA
 | 
isSigNaNB
 ) {

37 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

39 i‡–
isSigNaNA
 ) {

40 i‡–
isSigNaNB
 ) 
ªtu∫L¨gîSignifiˇnd
;

41  
isNaNB
 ? 
uiB
 : 
uiA
;

42 } i‡–
isNaNA
 ) {

43 i‡–
isSigNaNB
 || ! 
isNaNB
 )  
uiA
;

44 
ªtu∫L¨gîSignifiˇnd
:

45 
uiMagA
 = 
uiA
<<1;

46 
uiMagB
 = 
uiB
<<1;

47 i‡–
uiMagA
 < 
uiMagB
 )  
uiB
;

48 i‡–
uiMagB
 < 
uiMagA
 )  
uiA
;

49  ( 
uiA
 < 
uiB
 ) ? uiA : uiB;

51  
uiB
;

54 
	}
}

	@softfloat/8086/s_propagateNaNF64UI.c

4 
	~<°dboﬁ.h
>

5 
	~<°döt.h
>

6 
	~"∂©f‹m.h
"

7 
	~"öã∫Æs.h
"

8 
	~"•ecülize.h
"

9 
	~"so·Êﬂt.h
"

17 
uöt_Á°64_t


18 
	$so·Êﬂt_¥›ag©eNaNF64UI
–
uöt_Á°64_t
 
uiA
, uöt_Á°64_à
uiB
 )

20 
boﬁ
 
isNaNA
, 
isSigNaNA
, 
isNaNB
, 
isSigNaNB
;

21 
uöt_Á°64_t
 
uiMagA
, 
uiMagB
;

25 
isNaNA
 = 
	`isNaNF64UI
–
uiA
 );

26 
isSigNaNA
 = 
	`so·Êﬂt_isSigNaNF64UI
–
uiA
 );

27 
isNaNB
 = 
	`isNaNF64UI
–
uiB
 );

28 
isSigNaNB
 = 
	`so·Êﬂt_isSigNaNF64UI
–
uiB
 );

32 
uiA
 |
	`UINT64_C
( 0x0008000000000000 );

33 
uiB
 |
	`UINT64_C
( 0x0008000000000000 );

36 i‡–
isSigNaNA
 | 
isSigNaNB
 ) {

37 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

39 i‡–
isSigNaNA
 ) {

40 i‡–
isSigNaNB
 ) 
ªtu∫L¨gîSignifiˇnd
;

41  
isNaNB
 ? 
uiB
 : 
uiA
;

42 } i‡–
isNaNA
 ) {

43 i‡–
isSigNaNB
 || ! 
isNaNB
 )  
uiA
;

44 
ªtu∫L¨gîSignifiˇnd
:

45 
uiMagA
 = 
uiA
 & 
	`UINT64_C
( 0x7FFFFFFFFFFFFFFF );

46 
uiMagB
 = 
uiB
 & 
	`UINT64_C
( 0x7FFFFFFFFFFFFFFF );

47 i‡–
uiMagA
 < 
uiMagB
 )  
uiB
;

48 i‡–
uiMagB
 < 
uiMagA
 )  
uiA
;

49  ( 
uiA
 < 
uiB
 ) ? uiA : uiB;

51  
uiB
;

54 
	}
}

	@softfloat/8086/softfloat_raiseFlags.c

35 
	~"∂©f‹m.h
"

36 
	~"so·Êﬂt.h
"

45 
	$so·Êﬂt_øi£Fœgs
–
öt_Á°8_t
 
Êags
 )

48 
so·Êﬂt_ex˚±i⁄Fœgs
 |
Êags
;

50 
	}
}

	@softfloat/8086/softfloat_types.h

2 #i‚de‡
so·Êﬂt_ty≥s_h


3 
	#so·Êﬂt_ty≥s_h


	)

7 
	~<°dboﬁ.h
>

8 
	~<°döt.h
>

10 °ru˘ { 
uöt32_t
 
	mv
; } 
	tÊﬂt32_t
;

11 °ru˘ { 
uöt64_t
 
	mv
; } 
	tÊﬂt64_t
;

12 °ru˘ { 
uöt64_t
 
	mv
; 
uöt16_t
 
	mx
; } 
	tÊﬂtx80_t
;

13 °ru˘ { 
uöt64_t
 
	mv
[ 2 ]; } 
	tÊﬂt128_t
;

	@softfloat/8086/specialize.h

35 
	~<°dboﬁ.h
>

36 
	~<°döt.h
>

40 
	#öô_dëe˘Tööess
 
so·Êﬂt_tööess_a·îRoundög
;

	)

45 
	scomm⁄NaN
 {

46 
boﬁ
 
	msign
;

47 
uöt64_t
 
	mv64
, 
	mv0
;

53 
	#deÁu…NaNF32UI
 0xFFC00000

	)

59 #i‡
deföed
 
INLINE_LEVEL
 && ( 1 <= INLINE_LEVEL )

60 
INLINE
 
boﬁ
 
	$so·Êﬂt_isSigNaNF32UI
–
uöt_Á°32_t
 
ui
 )

61 {  ( ( 
ui
>>22 & 0x1FF ) =0x1FE ) && ( uò& 0x003FFFFF ); 
	}
}

63 
boﬁ
 
so·Êﬂt_isSigNaNF32UI
–
uöt_Á°32_t
 );

68 
comm⁄NaN
 
so·Êﬂt_f32UIToComm⁄NaN
–
uöt_Á°32_t
 );

69 #i‡
deföed
 
INLINE_LEVEL
 && ( 1 <= INLINE_LEVEL )

70 
INLINE
 
uöt_Á°32_t
 
	$so·Êﬂt_comm⁄NaNToF32UI
–
comm⁄NaN
 
a
 )

71 {  (
uöt_Á°32_t
Ë
a
.
sign
<<31 | 0x7FC00000 |á.
v64
>>41; 
	}
}

73 
uöt_Á°32_t
 
so·Êﬂt_comm⁄NaNToF32UI
–
comm⁄NaN
 );

81 
uöt_Á°32_t
 
so·Êﬂt_¥›ag©eNaNF32UI
( uint_fast32_t, uint_fast32_t );

86 
	#deÁu…NaNF64UI
 
	`UINT64_C
(0xFFF8000000000000)

	)

90 #i‡
deföed
 
INLINE_LEVEL
 && ( 1 <= INLINE_LEVEL )

91 
INLINE
 
boﬁ
 
	$so·Êﬂt_isSigNaNF64UI
–
uöt_Á°64_t
 
ui
 )

94 ––
ui
>>51 & 0xFFF ) == 0xFFE )

95 && ( 
ui
 & 
	`UINT64_C
( 0x0007FFFFFFFFFFFF ) );

96 
	}
}

98 
boﬁ
 
so·Êﬂt_isSigNaNF64UI
–
uöt_Á°64_t
 );

104 
comm⁄NaN
 
so·Êﬂt_f64UIToComm⁄NaN
–
uöt_Á°64_t
 );

105 
uöt_Á°64_t
 
so·Êﬂt_comm⁄NaNToF64UI
–
comm⁄NaN
 );

112 
uöt_Á°64_t
 
so·Êﬂt_¥›ag©eNaNF64UI
( uint_fast64_t, uint_fast64_t );

	@softfloat/f32_add.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
Êﬂt32_t
 
	$f32_add
–
Êﬂt32_t
 
a
, flﬂt32_à
b
 )

10 
ui32_f32
 
uA
;

11 
uöt_Á°32_t
 
uiA
;

12 
boﬁ
 
signA
;

13 
ui32_f32
 
uB
;

14 
uöt_Á°32_t
 
uiB
;

15 
boﬁ
 
signB
;

16 
	`Êﬂt32_t
 ( *
magsRoutöe
 )–
uöt_Á°32_t
, uöt_Á°32_t, 
boﬁ
 );

18 
uA
.
f
 = 
a
;

19 
uiA
 = 
uA
.
ui
;

20 
signA
 = 
	`signF32UI
–
uiA
 );

21 
uB
.
f
 = 
b
;

22 
uiB
 = 
uB
.
ui
;

23 
signB
 = 
	`signF32UI
–
uiB
 );

24 
magsRoutöe
 =

25 –
signA
 =
signB
 ) ? 
so·Êﬂt_addMagsF32
 : 
so·Êﬂt_subMagsF32
;

26  
	`magsRoutöe
–
uiA
, 
uiB
, 
signA
 );

28 
	}
}

	@softfloat/f32_classify.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"•ecülize.h
"

7 
	~"so·Êﬂt.h
"

9 
uöt_Á°16_t
 
	$f32_˛assify
–
Êﬂt32_t
 
a
 )

11 
ui32_f32
 
uA
;

12 
uöt_Á°32_t
 
uiA
;

14 
uA
.
f
 = 
a
;

15 
uiA
 = 
uA
.
ui
;

17 
uöt_Á°16_t
 
öfOrNaN
 = 
	`expF32UI
–
uiA
 ) == 0xFF;

18 
uöt_Á°16_t
 
subn‹mÆOrZîo
 = 
	`expF32UI
–
uiA
 ) == 0;

19 
boﬁ
 
sign
 = 
	`signF32UI
–
uiA
 );

22 –
sign
 && 
öfOrNaN
 && 
	`‰acF32UI
–
uiA
 ) == 0 ) << 0 |

23 –
sign
 && !
öfOrNaN
 && !
subn‹mÆOrZîo
 ) << 1 |

24 –
sign
 && 
subn‹mÆOrZîo
 && 
	`‰acF32UI
–
uiA
 ) ) << 2 |

25 –
sign
 && 
subn‹mÆOrZîo
 && 
	`‰acF32UI
–
uiA
 ) == 0 ) << 3 |

26 –!
sign
 && 
öfOrNaN
 && 
	`‰acF32UI
–
uiA
 ) == 0 ) << 7 |

27 –!
sign
 && !
öfOrNaN
 && !
subn‹mÆOrZîo
 ) << 6 |

28 –!
sign
 && 
subn‹mÆOrZîo
 && 
	`‰acF32UI
–
uiA
 ) ) << 5 |

29 –!
sign
 && 
subn‹mÆOrZîo
 && 
	`‰acF32UI
–
uiA
 ) == 0 ) << 4 |

30 –
	`isNaNF32UI
–
uiA
 ) && 
	`so·Êﬂt_isSigNaNF32UI
( uiA )) << 8 |

31 –
	`isNaNF32UI
–
uiA
 ) && !
	`so·Êﬂt_isSigNaNF32UI
( uiA )) << 9;

32 
	}
}

	@softfloat/f32_div.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"•ecülize.h
"

7 
	~"so·Êﬂt.h
"

9 
Êﬂt32_t
 
	$f32_div
–
Êﬂt32_t
 
a
, flﬂt32_à
b
 )

11 
ui32_f32
 
uA
;

12 
uöt_Á°32_t
 
uiA
;

13 
boﬁ
 
signA
;

14 
öt_Á°16_t
 
expA
;

15 
uöt_Á°32_t
 
sigA
;

16 
ui32_f32
 
uB
;

17 
uöt_Á°32_t
 
uiB
;

18 
boﬁ
 
signB
;

19 
öt_Á°16_t
 
expB
;

20 
uöt_Á°32_t
 
sigB
;

21 
boﬁ
 
signZ
;

22 
exp16_sig32
 
n‹mExpSig
;

23 
öt_Á°16_t
 
expZ
;

24 
uöt_Á°32_t
 
sigZ
;

25 
uöt_Á°32_t
 
uiZ
;

26 
ui32_f32
 
uZ
;

28 
uA
.
f
 = 
a
;

29 
uiA
 = 
uA
.
ui
;

30 
signA
 = 
	`signF32UI
–
uiA
 );

31 
expA
 = 
	`expF32UI
–
uiA
 );

32 
sigA
 = 
	`‰acF32UI
–
uiA
 );

33 
uB
.
f
 = 
b
;

34 
uiB
 = 
uB
.
ui
;

35 
signB
 = 
	`signF32UI
–
uiB
 );

36 
expB
 = 
	`expF32UI
–
uiB
 );

37 
sigB
 = 
	`‰acF32UI
–
uiB
 );

38 
signZ
 = 
signA
 ^ 
signB
;

39 i‡–
expA
 == 0xFF ) {

40 i‡–
sigA
 ) 
¥›ag©eNaN
;

41 i‡–
expB
 == 0xFF ) {

42 i‡–
sigB
 ) 
¥›ag©eNaN
;

43 
övÆid
;

45 
öföôy
;

47 i‡–
expB
 == 0xFF ) {

48 i‡–
sigB
 ) 
¥›ag©eNaN
;

49 
zîo
;

51 i‡–! 
expB
 ) {

52 i‡–! 
sigB
 ) {

53 i‡–! ( 
expA
 | 
sigA
 ) ) 
övÆid
;

54 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öföôy
 );

55 
öföôy
;

57 
n‹mExpSig
 = 
	`so·Êﬂt_n‹mSubn‹mÆF32Sig
–
sigB
 );

58 
expB
 = 
n‹mExpSig
.
exp
;

59 
sigB
 = 
n‹mExpSig
.
sig
;

61 i‡–! 
expA
 ) {

62 i‡–! 
sigA
 ) 
zîo
;

63 
n‹mExpSig
 = 
	`so·Êﬂt_n‹mSubn‹mÆF32Sig
–
sigA
 );

64 
expA
 = 
n‹mExpSig
.
exp
;

65 
sigA
 = 
n‹mExpSig
.
sig
;

67 
expZ
 = 
expA
 - 
expB
 + 0x7D;

68 
sigA
 = ( sigA | 0x00800000 )<<7;

69 
sigB
 = ( sigB | 0x00800000 )<<8;

70 i‡–
sigB
 <–
sigA
 + sigA ) ) {

71 ++
expZ
;

72 
sigA
 >>= 1;

74 
sigZ
 = ( (
uöt_Á°64_t
Ë
sigA
<<32 ) / 
sigB
;

75 i‡–! ( 
sigZ
 & 0x3F ) ) {

76 
sigZ
 |–(
uöt_Á°64_t
Ë
sigB
 * sigZ !(uöt_Á°64_tË
sigA
<<32 );

78  
	`so·Êﬂt_roundPackToF32
–
signZ
, 
expZ
, 
sigZ
 );

79 
¥›ag©eNaN
:

80 
uiZ
 = 
	`so·Êﬂt_¥›ag©eNaNF32UI
–
uiA
, 
uiB
 );

81 
uiZ
;

82 
övÆid
:

83 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

84 
uiZ
 = 
deÁu…NaNF32UI
;

85 
uiZ
;

86 
öföôy
:

87 
uiZ
 = 
	`∑ckToF32UI
–
signZ
, 0xFF, 0 );

88 
uiZ
;

89 
zîo
:

90 
uiZ
 = 
	`∑ckToF32UI
–
signZ
, 0, 0 );

91 
uiZ
:

92 
uZ
.
ui
 = 
uiZ
;

93  
uZ
.
f
;

95 
	}
}

	@softfloat/f32_eq.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"•ecülize.h
"

7 
	~"so·Êﬂt.h
"

9 
boﬁ
 
	$f32_eq
–
Êﬂt32_t
 
a
, flﬂt32_à
b
 )

11 
ui32_f32
 
uA
;

12 
uöt_Á°32_t
 
uiA
;

13 
ui32_f32
 
uB
;

14 
uöt_Á°32_t
 
uiB
;

16 
uA
.
f
 = 
a
;

17 
uiA
 = 
uA
.
ui
;

18 
uB
.
f
 = 
b
;

19 
uiB
 = 
uB
.
ui
;

21 ––
	`expF32UI
–
uiA
 ) =0xFF ) && 
	`‰acF32UI
( uiA ) )

22 || ( ( 
	`expF32UI
–
uiB
 ) =0xFF ) && 
	`‰acF32UI
( uiB ) )

25 
	`so·Êﬂt_isSigNaNF32UI
–
uiA
 ) || so·Êﬂt_isSigNaNF32UI–
uiB
 )

27 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

29  
Ál£
;

31  ( 
uiA
 =
uiB
 ) || ! (
uöt32_t
) ( ( uiA | uiB )<<1 );

33 
	}
}

	@softfloat/f32_eq_signaling.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
boﬁ
 
	$f32_eq_sig«lög
–
Êﬂt32_t
 
a
, flﬂt32_à
b
 )

10 
ui32_f32
 
uA
;

11 
uöt_Á°32_t
 
uiA
;

12 
ui32_f32
 
uB
;

13 
uöt_Á°32_t
 
uiB
;

15 
uA
.
f
 = 
a
;

16 
uiA
 = 
uA
.
ui
;

17 
uB
.
f
 = 
b
;

18 
uiB
 = 
uB
.
ui
;

20 ––
	`expF32UI
–
uiA
 ) =0xFF ) && 
	`‰acF32UI
( uiA ) )

21 || ( ( 
	`expF32UI
–
uiB
 ) =0xFF ) && 
	`‰acF32UI
( uiB ) )

23 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

24  
Ál£
;

26  ( 
uiA
 =
uiB
 ) || ! (
uöt32_t
) ( ( uiA | uiB )<<1 );

28 
	}
}

	@softfloat/f32_isSignalingNaN.c

2 
	~<°dboﬁ.h
>

3 
	~"∂©f‹m.h
"

4 
	~"öã∫Æs.h
"

5 
	~"•ecülize.h
"

6 
	~"so·Êﬂt.h
"

8 
boﬁ
 
	$f32_isSig«lögNaN
–
Êﬂt32_t
 
a
 )

10 
ui32_f32
 
uA
;

12 
uA
.
f
 = 
a
;

13  
	`so·Êﬂt_isSigNaNF32UI
–
uA
.
ui
 );

15 
	}
}

	@softfloat/f32_le.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
boﬁ
 
	$f32_À
–
Êﬂt32_t
 
a
, flﬂt32_à
b
 )

10 
ui32_f32
 
uA
;

11 
uöt_Á°32_t
 
uiA
;

12 
ui32_f32
 
uB
;

13 
uöt_Á°32_t
 
uiB
;

14 
boﬁ
 
signA
, 
signB
;

16 
uA
.
f
 = 
a
;

17 
uiA
 = 
uA
.
ui
;

18 
uB
.
f
 = 
b
;

19 
uiB
 = 
uB
.
ui
;

21 ––
	`expF32UI
–
uiA
 ) =0xFF ) && 
	`‰acF32UI
( uiA ) )

22 || ( ( 
	`expF32UI
–
uiB
 ) =0xFF ) && 
	`‰acF32UI
( uiB ) )

24 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

25  
Ál£
;

27 
signA
 = 
	`signF32UI
–
uiA
 );

28 
signB
 = 
	`signF32UI
–
uiB
 );

30 –
signA
 !
signB
 ) ? signA || ! (
uöt32_t
Ë––
uiA
 | 
uiB
 )<<1 )

31 : ( 
uiA
 =
uiB
 ) || ( 
signA
 ^ ( uiA < uiB ) );

33 
	}
}

	@softfloat/f32_le_quiet.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"•ecülize.h
"

7 
	~"so·Êﬂt.h
"

9 
boﬁ
 
	$f32_À_quõt
–
Êﬂt32_t
 
a
, flﬂt32_à
b
 )

11 
ui32_f32
 
uA
;

12 
uöt_Á°32_t
 
uiA
;

13 
ui32_f32
 
uB
;

14 
uöt_Á°32_t
 
uiB
;

15 
boﬁ
 
signA
, 
signB
;

17 
uA
.
f
 = 
a
;

18 
uiA
 = 
uA
.
ui
;

19 
uB
.
f
 = 
b
;

20 
uiB
 = 
uB
.
ui
;

22 ––
	`expF32UI
–
uiA
 ) =0xFF ) && 
	`‰acF32UI
( uiA ) )

23 || ( ( 
	`expF32UI
–
uiB
 ) =0xFF ) && 
	`‰acF32UI
( uiB ) )

26 
	`so·Êﬂt_isSigNaNF32UI
–
uiA
 ) || so·Êﬂt_isSigNaNF32UI–
uiB
 )

28 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

30  
Ál£
;

32 
signA
 = 
	`signF32UI
–
uiA
 );

33 
signB
 = 
	`signF32UI
–
uiB
 );

35 –
signA
 !
signB
 ) ? signA || ! (
uöt32_t
Ë––
uiA
 | 
uiB
 )<<1 )

36 : ( 
uiA
 =
uiB
 ) || ( 
signA
 ^ ( uiA < uiB ) );

38 
	}
}

	@softfloat/f32_lt.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
boﬁ
 
	$f32_…
–
Êﬂt32_t
 
a
, flﬂt32_à
b
 )

10 
ui32_f32
 
uA
;

11 
uöt_Á°32_t
 
uiA
;

12 
ui32_f32
 
uB
;

13 
uöt_Á°32_t
 
uiB
;

14 
boﬁ
 
signA
, 
signB
;

16 
uA
.
f
 = 
a
;

17 
uiA
 = 
uA
.
ui
;

18 
uB
.
f
 = 
b
;

19 
uiB
 = 
uB
.
ui
;

21 ––
	`expF32UI
–
uiA
 ) =0xFF ) && 
	`‰acF32UI
( uiA ) )

22 || ( ( 
	`expF32UI
–
uiB
 ) =0xFF ) && 
	`‰acF32UI
( uiB ) )

24 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

25  
Ál£
;

27 
signA
 = 
	`signF32UI
–
uiA
 );

28 
signB
 = 
	`signF32UI
–
uiB
 );

30 –
signA
 !
signB
 ) ? signA && ( (
uöt32_t
Ë––
uiA
 | 
uiB
 )<<1 ) != 0 )

31 : ( 
uiA
 !
uiB
 ) && ( 
signA
 ^ ( uiA < uiB ) );

33 
	}
}

	@softfloat/f32_lt_quiet.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"•ecülize.h
"

7 
	~"so·Êﬂt.h
"

9 
boﬁ
 
	$f32_…_quõt
–
Êﬂt32_t
 
a
, flﬂt32_à
b
 )

11 
ui32_f32
 
uA
;

12 
uöt_Á°32_t
 
uiA
;

13 
ui32_f32
 
uB
;

14 
uöt_Á°32_t
 
uiB
;

15 
boﬁ
 
signA
, 
signB
;

17 
uA
.
f
 = 
a
;

18 
uiA
 = 
uA
.
ui
;

19 
uB
.
f
 = 
b
;

20 
uiB
 = 
uB
.
ui
;

22 ––
	`expF32UI
–
uiA
 ) =0xFF ) && 
	`‰acF32UI
( uiA ) )

23 || ( ( 
	`expF32UI
–
uiB
 ) =0xFF ) && 
	`‰acF32UI
( uiB ) )

26 
	`so·Êﬂt_isSigNaNF32UI
–
uiA
 ) || so·Êﬂt_isSigNaNF32UI–
uiB
 )

28 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

30  
Ál£
;

32 
signA
 = 
	`signF32UI
–
uiA
 );

33 
signB
 = 
	`signF32UI
–
uiB
 );

35 –
signA
 !
signB
 ) ? signA && ( (
uöt32_t
Ë––
uiA
 | 
uiB
 )<<1 ) != 0 )

36 : ( 
uiA
 !
uiB
 ) && ( 
signA
 ^ ( uiA < uiB ) );

38 
	}
}

	@softfloat/f32_mul.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"•ecülize.h
"

8 
	~"so·Êﬂt.h
"

10 
Êﬂt32_t
 
	$f32_mul
–
Êﬂt32_t
 
a
, flﬂt32_à
b
 )

12 
ui32_f32
 
uA
;

13 
uöt_Á°32_t
 
uiA
;

14 
boﬁ
 
signA
;

15 
öt_Á°16_t
 
expA
;

16 
uöt_Á°32_t
 
sigA
;

17 
ui32_f32
 
uB
;

18 
uöt_Á°32_t
 
uiB
;

19 
boﬁ
 
signB
;

20 
öt_Á°16_t
 
expB
;

21 
uöt_Á°32_t
 
sigB
;

22 
boﬁ
 
signZ
;

23 
uöt_Á°32_t
 
magBôs
;

24 
exp16_sig32
 
n‹mExpSig
;

25 
öt_Á°16_t
 
expZ
;

26 
uöt_Á°32_t
 
sigZ
, 
uiZ
;

27 
ui32_f32
 
uZ
;

29 
uA
.
f
 = 
a
;

30 
uiA
 = 
uA
.
ui
;

31 
signA
 = 
	`signF32UI
–
uiA
 );

32 
expA
 = 
	`expF32UI
–
uiA
 );

33 
sigA
 = 
	`‰acF32UI
–
uiA
 );

34 
uB
.
f
 = 
b
;

35 
uiB
 = 
uB
.
ui
;

36 
signB
 = 
	`signF32UI
–
uiB
 );

37 
expB
 = 
	`expF32UI
–
uiB
 );

38 
sigB
 = 
	`‰acF32UI
–
uiB
 );

39 
signZ
 = 
signA
 ^ 
signB
;

40 i‡–
expA
 == 0xFF ) {

41 i‡–
sigA
 || ( ( 
expB
 =0xFF ) && 
sigB
 ) ) 
¥›ag©eNaN
;

42 
magBôs
 = 
expB
 | 
sigB
;

43 
öfArg
;

45 i‡–
expB
 == 0xFF ) {

46 i‡–
sigB
 ) 
¥›ag©eNaN
;

47 
magBôs
 = 
expA
 | 
sigA
;

48 
öfArg
;

50 i‡–! 
expA
 ) {

51 i‡–! 
sigA
 ) 
zîo
;

52 
n‹mExpSig
 = 
	`so·Êﬂt_n‹mSubn‹mÆF32Sig
–
sigA
 );

53 
expA
 = 
n‹mExpSig
.
exp
;

54 
sigA
 = 
n‹mExpSig
.
sig
;

56 i‡–! 
expB
 ) {

57 i‡–! 
sigB
 ) 
zîo
;

58 
n‹mExpSig
 = 
	`so·Êﬂt_n‹mSubn‹mÆF32Sig
–
sigB
 );

59 
expB
 = 
n‹mExpSig
.
exp
;

60 
sigB
 = 
n‹mExpSig
.
sig
;

62 
expZ
 = 
expA
 + 
expB
 - 0x7F;

63 
sigA
 = ( sigA | 0x00800000 )<<7;

64 
sigB
 = ( sigB | 0x00800000 )<<8;

65 
sigZ
 = 
	`so·Êﬂt_sh‹tShi·64RightJam
–(
uöt_Á°64_t
Ë
sigA
 * 
sigB
, 32 );

66 i‡–
sigZ
 < 0x40000000 ) {

67 --
expZ
;

68 
sigZ
 <<= 1;

70  
	`so·Êﬂt_roundPackToF32
–
signZ
, 
expZ
, 
sigZ
 );

71 
¥›ag©eNaN
:

72 
uiZ
 = 
	`so·Êﬂt_¥›ag©eNaNF32UI
–
uiA
, 
uiB
 );

73 
uiZ
;

74 
öfArg
:

75 i‡–! 
magBôs
 ) {

76 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

77 
uiZ
 = 
deÁu…NaNF32UI
;

79 
uiZ
 = 
	`∑ckToF32UI
–
signZ
, 0xFF, 0 );

81 
uiZ
;

82 
zîo
:

83 
uiZ
 = 
	`∑ckToF32UI
–
signZ
, 0, 0 );

84 
uiZ
:

85 
uZ
.
ui
 = 
uiZ
;

86  
uZ
.
f
;

88 
	}
}

	@softfloat/f32_mulAdd.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"öã∫Æs.h
"

5 
	~"so·Êﬂt.h
"

7 
Êﬂt32_t
 
	$f32_mulAdd
–
Êﬂt32_t
 
a
, flﬂt32_à
b
, flﬂt32_à
c
 )

9 
ui32_f32
 
uA
;

10 
uöt_Á°32_t
 
uiA
;

11 
ui32_f32
 
uB
;

12 
uöt_Á°32_t
 
uiB
;

13 
ui32_f32
 
uC
;

14 
uöt_Á°32_t
 
uiC
;

16 
uA
.
f
 = 
a
;

17 
uiA
 = 
uA
.
ui
;

18 
uB
.
f
 = 
b
;

19 
uiB
 = 
uB
.
ui
;

20 
uC
.
f
 = 
c
;

21 
uiC
 = 
uC
.
ui
;

22  
	`so·Êﬂt_mulAddF32
–0, 
uiA
, 
uiB
, 
uiC
 );

24 
	}
}

	@softfloat/f32_rem.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"•ecülize.h
"

8 
	~"so·Êﬂt.h
"

10 
Êﬂt32_t
 
	$f32_ªm
–
Êﬂt32_t
 
a
, flﬂt32_à
b
 )

12 
ui32_f32
 
uA
;

13 
uöt_Á°32_t
 
uiA
;

14 
boﬁ
 
signA
;

15 
öt_Á°16_t
 
expA
;

16 
uöt_Á°32_t
 
sigA
;

17 
ui32_f32
 
uB
;

18 
uöt_Á°32_t
 
uiB
;

19 
boﬁ
 
signB
;

20 
öt_Á°16_t
 
expB
;

21 
uöt_Á°32_t
 
sigB
;

22 
exp16_sig32
 
n‹mExpSig
;

23 
öt_Á°16_t
 
expDiff
;

24 
uöt_Á°32_t
 
q
;

25 
uöt_Á°64_t
 
sigA64
, 
sigB64
, 
q64
;

26 
uöt_Á°32_t
 
Æã∫©eSigA
;

27 
uöt32_t
 
sigMón
;

28 
boﬁ
 
signZ
;

29 
uöt_Á°32_t
 
uiZ
;

30 
ui32_f32
 
uZ
;

32 
uA
.
f
 = 
a
;

33 
uiA
 = 
uA
.
ui
;

34 
signA
 = 
	`signF32UI
–
uiA
 );

35 
expA
 = 
	`expF32UI
–
uiA
 );

36 
sigA
 = 
	`‰acF32UI
–
uiA
 );

37 
uB
.
f
 = 
b
;

38 
uiB
 = 
uB
.
ui
;

39 
signB
 = 
	`signF32UI
–
uiB
 );

40 
expB
 = 
	`expF32UI
–
uiB
 );

41 
sigB
 = 
	`‰acF32UI
–
uiB
 );

42 i‡–
expA
 == 0xFF ) {

43 i‡–
sigA
 || ( ( 
expB
 =0xFF ) && 
sigB
 ) ) 
¥›ag©eNaN
;

44 
övÆid
;

46 i‡–
expB
 == 0xFF ) {

47 i‡–
sigB
 ) 
¥›ag©eNaN
;

48  
a
;

50 i‡–! 
expB
 ) {

51 i‡–! 
sigB
 ) 
övÆid
;

52 
n‹mExpSig
 = 
	`so·Êﬂt_n‹mSubn‹mÆF32Sig
–
sigB
 );

53 
expB
 = 
n‹mExpSig
.
exp
;

54 
sigB
 = 
n‹mExpSig
.
sig
;

56 i‡–! 
expA
 ) {

57 i‡–! 
sigA
 )  
a
;

58 
n‹mExpSig
 = 
	`so·Êﬂt_n‹mSubn‹mÆF32Sig
–
sigA
 );

59 
expA
 = 
n‹mExpSig
.
exp
;

60 
sigA
 = 
n‹mExpSig
.
sig
;

62 
expDiff
 = 
expA
 - 
expB
;

63 
sigA
 |= 0x00800000;

64 
sigB
 |= 0x00800000;

65 i‡–
expDiff
 < 32 ) {

66 
sigA
 <<= 8;

67 
sigB
 <<= 8;

68 i‡–
expDiff
 < 0 ) {

69 i‡–
expDiff
 < -1 )  
a
;

70 
sigA
 >>= 1;

72 
q
 = ( 
sigB
 <
sigA
 );

73 i‡–
q
 ) 
sigA
 -
sigB
;

74 i‡–0 < 
expDiff
 ) {

75 
q
 = ( (
uöt_Á°64_t
Ë
sigA
<<32 ) / 
sigB
;

76 
q
 >>32 - 
expDiff
;

77 
sigB
 >>= 2;

78 
sigA
 = ( ( sigA>>1 )<<–
expDiff
 - 1 ) ) - 
sigB
 * 
q
;

80 
sigA
 >>= 2;

81 
sigB
 >>= 2;

84 i‡–
sigB
 <
sigA
 ) sigA -= sigB;

85 
sigA64
 = (
uöt_Á°64_t
Ë
sigA
<<40;

86 
sigB64
 = (
uöt_Á°64_t
Ë
sigB
<<40;

87 
expDiff
 -= 64;

88  0 < 
expDiff
 ) {

89 
q64
 = 
	`so·Êﬂt_e°im©eDiv128To64
–
sigA64
, 0, 
sigB64
 );

90 
q64
 = ( 2 < q64 ) ? q64 - 2 : 0;

91 
sigA64
 = - ( ( 
sigB
 * 
q64
 )<<38 );

92 
expDiff
 -= 62;

94 
expDiff
 += 64;

95 
q64
 = 
	`so·Êﬂt_e°im©eDiv128To64
–
sigA64
, 0, 
sigB64
 );

96 
q64
 = ( 2 < q64 ) ? q64 - 2 : 0;

97 
q
 = 
q64
>>–64 - 
expDiff
 );

98 
sigB
 <<= 6;

99 
sigA
 = ( ( 
sigA64
>>33 )<<–
expDiff
 - 1 ) ) - 
sigB
 * 
q
;

102 
Æã∫©eSigA
 = 
sigA
;

103 ++
q
;

104 
sigA
 -
sigB
;

105 }  
sigA
 < 0x80000000 );

106 
sigMón
 = 
sigA
 + 
Æã∫©eSigA
;

107 i‡––0x80000000 <
sigMón
 ) || ( ! sigMó¿&& ( 
q
 & 1 ) ) ) {

108 
sigA
 = 
Æã∫©eSigA
;

110 
signZ
 = ( 0x80000000 <
sigA
 );

111 i‡–
signZ
 ) 
sigA
 = - sigA;

112  
	`so·Êﬂt_n‹mRoundPackToF32
–
signA
 ^ 
signZ
, 
expB
, 
sigA
 );

113 
¥›ag©eNaN
:

114 
uiZ
 = 
	`so·Êﬂt_¥›ag©eNaNF32UI
–
uiA
, 
uiB
 );

115 
uiZ
;

116 
övÆid
:

117 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

118 
uiZ
 = 
deÁu…NaNF32UI
;

119 
uiZ
:

120 
uZ
.
ui
 = 
uiZ
;

121  
uZ
.
f
;

123 
	}
}

	@softfloat/f32_roundToInt.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"•ecülize.h
"

7 
	~"so·Êﬂt.h
"

9 
Êﬂt32_t
 
	$f32_roundToI¡
–
Êﬂt32_t
 
a
, 
öt_Á°8_t
 
roundögMode
, 
boﬁ
 
exa˘
 )

11 
ui32_f32
 
uA
;

12 
uöt_Á°32_t
 
uiA
;

13 
öt_Á°16_t
 
expA
;

14 
uöt_Á°32_t
 
uiZ
;

15 
boﬁ
 
signA
;

16 
uöt_Á°32_t
 
œ°BôMask
, 
roundBôsMask
;

17 
ui32_f32
 
uZ
;

19 
uA
.
f
 = 
a
;

20 
uiA
 = 
uA
.
ui
;

21 
expA
 = 
	`expF32UI
–
uiA
 );

22 i‡–0x96 <
expA
 ) {

23 i‡––
expA
 =0xFF ) && 
	`‰acF32UI
–
uiA
 ) ) {

24 
uiZ
 = 
	`so·Êﬂt_¥›ag©eNaNF32UI
–
uiA
, 0 );

25 
uiZ
;

27  
a
;

29 i‡–
expA
 <= 0x7E ) {

30 i‡–! (
uöt32_t
Ë–
uiA
<<1 ) )  
a
;

31 i‡–
exa˘
 ) 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

32 
signA
 = 
	`signF32UI
–
uiA
 );

33  
roundögMode
 ) {

34 
so·Êﬂt_round_√¨e°_eví
:

35 i‡––
expA
 =0x7E ) && 
	`‰acF32UI
–
uiA
 ) ) {

36 
uiZ
 = 
	`∑ckToF32UI
–
signA
, 0x7F, 0 );

37 
uiZ
;

40 
so·Êﬂt_round_mö
:

41 
uiZ
 = 
signA
 ? 0xBF800000 : 0;

42 
uiZ
;

43 
so·Êﬂt_round_max
:

44 
uiZ
 = 
signA
 ? 0x80000000 : 0x3F800000;

45 
uiZ
;

46 
so·Êﬂt_round_√¨e°_maxMag
:

47 i‡–
expA
 == 0x7E ) {

48 
uiZ
 = 
	`∑ckToF32UI
–
signA
, 0x7F, 0 );

49 
uiZ
;

53 
uiZ
 = 
	`∑ckToF32UI
–
signA
, 0, 0 );

54 
uiZ
;

56 
œ°BôMask
 = (
uöt_Á°32_t
Ë1<<–0x96 - 
expA
 );

57 
roundBôsMask
 = 
œ°BôMask
 - 1;

58 
uiZ
 = 
uiA
;

59 i‡–
roundögMode
 =
so·Êﬂt_round_√¨e°_maxMag
 ) {

60 
uiZ
 +
œ°BôMask
>>1;

61 } i‡–
roundögMode
 =
so·Êﬂt_round_√¨e°_eví
 ) {

62 
uiZ
 +
œ°BôMask
>>1;

63 i‡–! ( 
uiZ
 & 
roundBôsMask
 ) ) uiZ &~ 
œ°BôMask
;

64 } i‡–
roundögMode
 !
so·Êﬂt_round_möMag
 ) {

65 i‡–
	`signF32UI
–
uiZ
 ) ^ ( 
roundögMode
 =
so·Êﬂt_round_max
 ) ) {

66 
uiZ
 +
roundBôsMask
;

69 
uiZ
 &~ 
roundBôsMask
;

70 i‡–
exa˘
 && ( 
uiZ
 !
uiA
 ) ) {

71 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

73 
uiZ
:

74 
uZ
.
ui
 = 
uiZ
;

75  
uZ
.
f
;

77 
	}
}

	@softfloat/f32_sqrt.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"•ecülize.h
"

8 
	~"so·Êﬂt.h
"

10 
Êﬂt32_t
 
	$f32_sqπ
–
Êﬂt32_t
 
a
 )

12 
ui32_f32
 
uA
;

13 
uöt_Á°32_t
 
uiA
;

14 
boﬁ
 
signA
;

15 
öt_Á°16_t
 
expA
;

16 
uöt_Á°32_t
 
sigA
, 
uiZ
;

17 
exp16_sig32
 
n‹mExpSig
;

18 
öt_Á°16_t
 
expZ
;

19 
uöt_Á°32_t
 
sigZ
;

20 
uöt_Á°64_t
 
ãrm
, 
ªm
;

21 
ui32_f32
 
uZ
;

23 
uA
.
f
 = 
a
;

24 
uiA
 = 
uA
.
ui
;

25 
signA
 = 
	`signF32UI
–
uiA
 );

26 
expA
 = 
	`expF32UI
–
uiA
 );

27 
sigA
 = 
	`‰acF32UI
–
uiA
 );

28 i‡–
expA
 == 0xFF ) {

29 i‡–
sigA
 ) {

30 
uiZ
 = 
	`so·Êﬂt_¥›ag©eNaNF32UI
–
uiA
, 0 );

31 
uiZ
;

33 i‡–! 
signA
 )  
a
;

34 
övÆid
;

36 i‡–
signA
 ) {

37 i‡–! ( 
expA
 | 
sigA
 ) )  
a
;

38 
övÆid
;

40 i‡–! 
expA
 ) {

41 i‡–! 
sigA
 )  
a
;

42 
n‹mExpSig
 = 
	`so·Êﬂt_n‹mSubn‹mÆF32Sig
–
sigA
 );

43 
expA
 = 
n‹mExpSig
.
exp
;

44 
sigA
 = 
n‹mExpSig
.
sig
;

46 
expZ
 = ( ( 
expA
 - 0x7F )>>1 ) + 0x7E;

47 
sigA
 = ( sigA | 0x00800000 )<<8;

48 
sigZ
 = 
	`so·Êﬂt_e°im©eSqπ32
–
expA
, 
sigA
 ) + 2;

49 i‡––
sigZ
 & 0x7F ) <= 5 ) {

50 i‡–
sigZ
 < 2 ) {

51 
sigZ
 = 0x7FFFFFFF;

52 
roundPack
;

54 
sigA
 >>
expA
 & 1;

55 
ãrm
 = (
uöt_Á°64_t
Ë
sigZ
 * sigZ;

56 
ªm
 = ( (
uöt_Á°64_t
Ë
sigA
<<32 ) - 
ãrm
;

57  
	`UINT64_C
–0x8000000000000000 ) <
ªm
 ) {

58 --
sigZ
;

59 
ªm
 +–(
uöt_Á°64_t
Ë
sigZ
<<1 ) | 1;

61 
sigZ
 |–
ªm
 != 0 );

63 
sigZ
 = 
	`so·Êﬂt_sh‹tShi·32Right1Jam
( sigZ );

64 
roundPack
:

65  
	`so·Êﬂt_roundPackToF32
–0, 
expZ
, 
sigZ
 );

66 
övÆid
:

67 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

68 
uiZ
 = 
deÁu…NaNF32UI
;

69 
uiZ
:

70 
uZ
.
ui
 = 
uiZ
;

71  
uZ
.
f
;

73 
	}
}

	@softfloat/f32_sub.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
Êﬂt32_t
 
	$f32_sub
–
Êﬂt32_t
 
a
, flﬂt32_à
b
 )

10 
ui32_f32
 
uA
;

11 
uöt_Á°32_t
 
uiA
;

12 
boﬁ
 
signA
;

13 
ui32_f32
 
uB
;

14 
uöt_Á°32_t
 
uiB
;

15 
boﬁ
 
signB
;

16 
	`Êﬂt32_t
 ( *
magsRoutöe
 )–
uöt_Á°32_t
, uöt_Á°32_t, 
boﬁ
 );

18 
uA
.
f
 = 
a
;

19 
uiA
 = 
uA
.
ui
;

20 
signA
 = 
	`signF32UI
–
uiA
 );

21 
uB
.
f
 = 
b
;

22 
uiB
 = 
uB
.
ui
;

23 
signB
 = 
	`signF32UI
–
uiB
 );

24 
magsRoutöe
 =

25 –
signA
 =
signB
 ) ? 
so·Êﬂt_subMagsF32
 : 
so·Êﬂt_addMagsF32
;

26  
	`magsRoutöe
–
uiA
, 
uiB
 ^ 0x80000000, 
signA
 );

28 
	}
}

	@softfloat/f32_to_f64.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"•ecülize.h
"

7 
	~"so·Êﬂt.h
"

9 
Êﬂt64_t
 
	$f32_to_f64
–
Êﬂt32_t
 
a
 )

11 
ui32_f32
 
uA
;

12 
uöt_Á°32_t
 
uiA
;

13 
boﬁ
 
sign
;

14 
öt_Á°16_t
 
exp
;

15 
uöt_Á°32_t
 
sig
;

16 
uöt_Á°64_t
 
uiZ
;

17 
exp16_sig32
 
n‹mExpSig
;

18 
ui64_f64
 
uZ
;

20 
uA
.
f
 = 
a
;

21 
uiA
 = 
uA
.
ui
;

22 
sign
 = 
	`signF32UI
–
uiA
 );

23 
exp
 = 
	`expF32UI
–
uiA
 );

24 
sig
 = 
	`‰acF32UI
–
uiA
 );

25 i‡–
exp
 == 0xFF ) {

26 
uiZ
 =

27 
sig
 ? 
	`so·Êﬂt_comm⁄NaNToF64UI
(

28 
	`so·Êﬂt_f32UIToComm⁄NaN
–
uiA
 ) )

29 : 
	`∑ckToF64UI
–
sign
, 0x7FF, 0 );

30 
uiZ
;

32 i‡–! 
exp
 ) {

33 i‡–! 
sig
 ) {

34 
uiZ
 = 
	`∑ckToF64UI
–
sign
, 0, 0 );

35 
uiZ
;

37 
n‹mExpSig
 = 
	`so·Êﬂt_n‹mSubn‹mÆF32Sig
–
sig
 );

38 
exp
 = 
n‹mExpSig
.exp - 1;

39 
sig
 = 
n‹mExpSig
.sig;

41 
uiZ
 = 
	`∑ckToF64UI
–
sign
, 
exp
 + 0x380, (
uöt_Á°64_t
Ë
sig
<<29 );

42 
uiZ
:

43 
uZ
.
ui
 = 
uiZ
;

44  
uZ
.
f
;

46 
	}
}

	@softfloat/f32_to_i32.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"so·Êﬂt.h
"

9 
öt_Á°32_t
 
	$f32_to_i32
–
Êﬂt32_t
 
a
, 
öt_Á°8_t
 
roundögMode
, 
boﬁ
 
exa˘
 )

11 
ui32_f32
 
uA
;

12 
uöt_Á°32_t
 
uiA
;

13 
boﬁ
 
sign
;

14 
öt_Á°16_t
 
exp
;

15 
uöt_Á°32_t
 
sig
;

16 
uöt_Á°64_t
 
sig64
;

17 
öt_Á°16_t
 
shi·Cou¡
;

19 
uA
.
f
 = 
a
;

20 
uiA
 = 
uA
.
ui
;

21 
sign
 = 
	`signF32UI
–
uiA
 );

22 
exp
 = 
	`expF32UI
–
uiA
 );

23 
sig
 = 
	`‰acF32UI
–
uiA
 );

24 i‡–
exp
 ) 
sig
 |= 0x00800000;

25 
sig64
 = (
uöt_Á°64_t
Ë
sig
<<32;

26 
shi·Cou¡
 = 0xAF - 
exp
;

27 i‡–0 < 
shi·Cou¡
 ) {

28 
sig64
 = 
	`so·Êﬂt_shi·64RightJam
–sig64, 
shi·Cou¡
 );

30  
	`so·Êﬂt_roundPackToI32
–
sign
, 
sig64
, 
roundögMode
, 
exa˘
 );

32 
	}
}

	@softfloat/f32_to_i32_r_minMag.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
öt_Á°32_t
 
	$f32_to_i32_r_möMag
–
Êﬂt32_t
 
a
, 
boﬁ
 
exa˘
 )

10 
ui32_f32
 
uA
;

11 
uöt_Á°32_t
 
uiA
;

12 
öt_Á°16_t
 
exp
;

13 
uöt_Á°32_t
 
sig
;

14 
boﬁ
 
sign
;

15 
öt_Á°16_t
 
shi·Cou¡
;

16 
öt_Á°32_t
 
absZ
;

18 
uA
.
f
 = 
a
;

19 
uiA
 = 
uA
.
ui
;

20 
exp
 = 
	`expF32UI
–
uiA
 );

21 
sig
 = 
	`‰acF32UI
–
uiA
 );

22 i‡–
exp
 < 0x7F ) {

23 i‡–
exa˘
 && ( 
exp
 | 
sig
 ) ) {

24 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

28 
sign
 = 
	`signF32UI
–
uiA
 );

29 
shi·Cou¡
 = 0x9E - 
exp
;

30 i‡–
shi·Cou¡
 <= 0 ) {

31 i‡–
uiA
 !
	`∑ckToF32UI
( 1, 0x9E, 0 ) ) {

32 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

33 i‡–! 
sign
 || ( ( 
exp
 =0xFF ) && 
sig
 ) )  0x7FFFFFFF;

37 
sig
 = ( sig | 0x00800000 )<<8;

38 
absZ
 = 
sig
>>
shi·Cou¡
;

39 i‡–
exa˘
 && (
uöt32_t
Ë–
sig
<<––- 
shi·Cou¡
 ) & 31 ) ) ) {

40 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

42  
sign
 ? - 
absZ
 :ábsZ;

44 
	}
}

	@softfloat/f32_to_i64.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"so·Êﬂt.h
"

9 
öt_Á°64_t
 
	$f32_to_i64
–
Êﬂt32_t
 
a
, 
öt_Á°8_t
 
roundögMode
, 
boﬁ
 
exa˘
 )

11 
ui32_f32
 
uA
;

12 
uöt_Á°32_t
 
uiA
;

13 
boﬁ
 
sign
;

14 
öt_Á°16_t
 
exp
;

15 
uöt_Á°32_t
 
sig
;

16 
öt_Á°16_t
 
shi·Cou¡
;

17 
uöt_Á°64_t
 
sig64
, 
exåa
;

18 
uöt64_exåa
 
sig64Exåa
;

20 
uA
.
f
 = 
a
;

21 
uiA
 = 
uA
.
ui
;

22 
sign
 = 
	`signF32UI
–
uiA
 );

23 
exp
 = 
	`expF32UI
–
uiA
 );

24 
sig
 = 
	`‰acF32UI
–
uiA
 );

25 
shi·Cou¡
 = 0xBE - 
exp
;

26 i‡–
shi·Cou¡
 < 0 ) {

27 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

28 i‡–! 
sign
 ) {

29  
	`INT64_C
( 0x7FFFFFFFFFFFFFFF );

31  - 
	`INT64_C
( 0x7FFFFFFFFFFFFFFF ) - 1;

33 i‡–
exp
 ) 
sig
 |= 0x00800000;

34 
sig64
 = (
uöt_Á°64_t
Ë
sig
<<40;

35 
exåa
 = 0;

36 i‡–
shi·Cou¡
 ) {

37 
sig64Exåa
 = 
	`so·Êﬂt_shi·64ExåaRightJam
–
sig64
, 0, 
shi·Cou¡
 );

38 
sig64
 = 
sig64Exåa
.
v
;

39 
exåa
 = 
sig64Exåa
.extra;

41  
	`so·Êﬂt_roundPackToI64
–
sign
, 
sig64
, 
exåa
, 
roundögMode
, 
exa˘
 );

43 
	}
}

	@softfloat/f32_to_i64_r_minMag.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
öt_Á°64_t
 
	$f32_to_i64_r_möMag
–
Êﬂt32_t
 
a
, 
boﬁ
 
exa˘
 )

10 
ui32_f32
 
uA
;

11 
uöt_Á°32_t
 
uiA
;

12 
öt_Á°16_t
 
exp
;

13 
uöt_Á°32_t
 
sig
;

14 
boﬁ
 
sign
;

15 
öt_Á°16_t
 
shi·Cou¡
;

16 
uöt_Á°64_t
 
sig64
;

17 
öt_Á°64_t
 
absZ
;

19 
uA
.
f
 = 
a
;

20 
uiA
 = 
uA
.
ui
;

21 
exp
 = 
	`expF32UI
–
uiA
 );

22 
sig
 = 
	`‰acF32UI
–
uiA
 );

23 i‡–
exp
 < 0x7F ) {

24 i‡–
exa˘
 && ( 
exp
 | 
sig
 ) ) {

25 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

29 
sign
 = 
	`signF32UI
–
uiA
 );

30 
shi·Cou¡
 = 0xBE - 
exp
;

31 i‡–
shi·Cou¡
 <= 0 ) {

32 i‡–
uiA
 !
	`∑ckToF32UI
( 1, 0xBE, 0 ) ) {

33 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

34 i‡–! 
sign
 || ( ( 
exp
 =0xFF ) && 
sig
 ) ) {

35  
	`INT64_C
( 0x7FFFFFFFFFFFFFFF );

38  - 
	`INT64_C
( 0x7FFFFFFFFFFFFFFF ) - 1;

40 
sig
 |= 0x00800000;

41 
sig64
 = (
uöt_Á°64_t
Ë
sig
<<40;

42 
absZ
 = 
sig64
>>
shi·Cou¡
;

43 
shi·Cou¡
 = 40 - shiftCount;

45 
exa˘
 && ( 
shi·Cou¡
 < 0 ) && (
uöt32_t
Ë–
sig
<<( shiftCount & 31 ) )

47 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

49  
sign
 ? - 
absZ
 :ábsZ;

51 
	}
}

	@softfloat/f32_to_ui32.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"so·Êﬂt.h
"

9 
uöt_Á°32_t
 
	$f32_to_ui32
–
Êﬂt32_t
 
a
, 
öt_Á°8_t
 
roundögMode
, 
boﬁ
 
exa˘
 )

11 
ui32_f32
 
uA
;

12 
uöt_Á°32_t
 
uiA
;

13 
boﬁ
 
sign
;

14 
öt_Á°16_t
 
exp
;

15 
uöt_Á°32_t
 
sig
;

16 
uöt_Á°64_t
 
sig64
;

17 
öt_Á°16_t
 
shi·Cou¡
;

19 
uA
.
f
 = 
a
;

20 
uiA
 = 
uA
.
ui
;

21 
sign
 = 
	`signF32UI
–
uiA
 );

22 
exp
 = 
	`expF32UI
–
uiA
 );

23 
sig
 = 
	`‰acF32UI
–
uiA
 );

24 i‡–
exp
 ) 
sig
 |= 0x00800000;

25 
sig64
 = (
uöt_Á°64_t
Ë
sig
<<32;

26 
shi·Cou¡
 = 0xAF - 
exp
;

27 i‡–0 < 
shi·Cou¡
 ) {

28 
sig64
 = 
	`so·Êﬂt_shi·64RightJam
–sig64, 
shi·Cou¡
 );

30  
	`so·Êﬂt_roundPackToUI32
–
sign
, 
sig64
, 
roundögMode
, 
exa˘
 );

32 
	}
}

	@softfloat/f32_to_ui32_r_minMag.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
uöt_Á°32_t
 
	$f32_to_ui32_r_möMag
–
Êﬂt32_t
 
a
, 
boﬁ
 
exa˘
 )

10 
ui32_f32
 
uA
;

11 
uöt_Á°32_t
 
uiA
;

12 
öt_Á°16_t
 
exp
;

13 
uöt_Á°32_t
 
sig
;

14 
öt_Á°16_t
 
shi·Cou¡
;

15 
uöt_Á°32_t
 
z
;

17 
uA
.
f
 = 
a
;

18 
uiA
 = 
uA
.
ui
;

19 
exp
 = 
	`expF32UI
–
uiA
 );

20 
sig
 = 
	`‰acF32UI
–
uiA
 );

21 i‡–
exp
 < 0x7F ) {

22 i‡–
exa˘
 && ( 
exp
 | 
sig
 ) ) {

23 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

27 i‡–
	`signF32UI
–
uiA
 ) ) 
övÆid
;

28 
shi·Cou¡
 = 0x9E - 
exp
;

29 i‡–
shi·Cou¡
 < 0 ) 
övÆid
;

30 
sig
 = ( sig | 0x00800000 )<<8;

31 
z
 = 
sig
>>
shi·Cou¡
;

32 i‡–
exa˘
 && ( 
sig
 & ( ( (
uöt_Á°32_t
Ë1<<
shi·Cou¡
 ) - 1 ) ) ) {

33 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

35  
z
;

36 
övÆid
:

37 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

40 
	}
}

	@softfloat/f32_to_ui64.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"so·Êﬂt.h
"

9 
uöt_Á°64_t
 
	$f32_to_ui64
–
Êﬂt32_t
 
a
, 
öt_Á°8_t
 
roundögMode
, 
boﬁ
 
exa˘
 )

11 
ui32_f32
 
uA
;

12 
uöt_Á°32_t
 
uiA
;

13 
boﬁ
 
sign
;

14 
öt_Á°16_t
 
exp
;

15 
uöt_Á°32_t
 
sig
;

16 
öt_Á°16_t
 
shi·Cou¡
;

17 
uöt_Á°64_t
 
sig64
, 
exåa
;

18 
uöt64_exåa
 
sig64Exåa
;

20 
uA
.
f
 = 
a
;

21 
uiA
 = 
uA
.
ui
;

22 
sign
 = 
	`signF32UI
–
uiA
 );

23 
exp
 = 
	`expF32UI
–
uiA
 );

24 
sig
 = 
	`‰acF32UI
–
uiA
 );

25 
shi·Cou¡
 = 0xBE - 
exp
;

26 i‡–
shi·Cou¡
 < 0 ) {

27 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

28  
	`UINT64_C
( 0xFFFFFFFFFFFFFFFF );

30 i‡–
exp
 ) 
sig
 |= 0x00800000;

31 
sig64
 = (
uöt_Á°64_t
Ë
sig
<<40;

32 
exåa
 = 0;

33 i‡–
shi·Cou¡
 ) {

34 
sig64Exåa
 = 
	`so·Êﬂt_shi·64ExåaRightJam
–
sig64
, 0, 
shi·Cou¡
 );

35 
sig64
 = 
sig64Exåa
.
v
;

36 
exåa
 = 
sig64Exåa
.extra;

39 
	`so·Êﬂt_roundPackToUI64
–
sign
, 
sig64
, 
exåa
, 
roundögMode
, 
exa˘
 );

41 
	}
}

	@softfloat/f32_to_ui64_r_minMag.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
uöt_Á°64_t
 
	$f32_to_ui64_r_möMag
–
Êﬂt32_t
 
a
, 
boﬁ
 
exa˘
 )

10 
ui32_f32
 
uA
;

11 
uöt_Á°32_t
 
uiA
;

12 
öt_Á°16_t
 
exp
;

13 
uöt_Á°32_t
 
sig
;

14 
öt_Á°16_t
 
shi·Cou¡
;

15 
uöt_Á°64_t
 
sig64
, 
z
;

17 
uA
.
f
 = 
a
;

18 
uiA
 = 
uA
.
ui
;

19 
exp
 = 
	`expF32UI
–
uiA
 );

20 
sig
 = 
	`‰acF32UI
–
uiA
 );

21 i‡–
exp
 < 0x7F ) {

22 i‡–
exa˘
 && ( 
exp
 | 
sig
 ) ) {

23 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

27 i‡–
	`signF32UI
–
uiA
 ) ) 
övÆid
;

28 
shi·Cou¡
 = 0xBE - 
exp
;

29 i‡–
shi·Cou¡
 < 0 ) 
övÆid
;

30 
sig
 |= 0x00800000;

31 
sig64
 = (
uöt_Á°64_t
Ë
sig
<<40;

32 
z
 = 
sig64
>>
shi·Cou¡
;

33 
shi·Cou¡
 = 40 - shiftCount;

35 
exa˘
 && ( 
shi·Cou¡
 < 0 ) && (
uöt32_t
Ë–
sig
<<( shiftCount & 31 ) )

37 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

39  
z
;

40 
övÆid
:

41 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

42  
	`UINT64_C
( 0xFFFFFFFFFFFFFFFF );

44 
	}
}

	@softfloat/f64_add.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
Êﬂt64_t
 
	$f64_add
–
Êﬂt64_t
 
a
, flﬂt64_à
b
 )

10 
ui64_f64
 
uA
;

11 
uöt_Á°64_t
 
uiA
;

12 
boﬁ
 
signA
;

13 
ui64_f64
 
uB
;

14 
uöt_Á°64_t
 
uiB
;

15 
boﬁ
 
signB
;

16 
	`Êﬂt64_t
 ( *
magsRoutöe
 )–
uöt_Á°64_t
, uöt_Á°64_t, 
boﬁ
 );

18 
uA
.
f
 = 
a
;

19 
uiA
 = 
uA
.
ui
;

20 
signA
 = 
	`signF64UI
–
uiA
 );

21 
uB
.
f
 = 
b
;

22 
uiB
 = 
uB
.
ui
;

23 
signB
 = 
	`signF64UI
–
uiB
 );

24 
magsRoutöe
 =

25 –
signA
 =
signB
 ) ? 
so·Êﬂt_addMagsF64
 : 
so·Êﬂt_subMagsF64
;

26  
	`magsRoutöe
–
uiA
, 
uiB
, 
signA
 );

28 
	}
}

	@softfloat/f64_classify.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"•ecülize.h
"

7 
	~"so·Êﬂt.h
"

9 
uöt_Á°16_t
 
	$f64_˛assify
–
Êﬂt64_t
 
a
 )

11 
ui64_f64
 
uA
;

12 
uöt_Á°64_t
 
uiA
;

14 
uA
.
f
 = 
a
;

15 
uiA
 = 
uA
.
ui
;

17 
uöt_Á°16_t
 
öfOrNaN
 = 
	`expF64UI
–
uiA
 ) == 0x7FF;

18 
uöt_Á°16_t
 
subn‹mÆOrZîo
 = 
	`expF64UI
–
uiA
 ) == 0;

19 
boﬁ
 
sign
 = 
	`signF64UI
–
uiA
 );

22 –
sign
 && 
öfOrNaN
 && 
	`‰acF64UI
–
uiA
 ) == 0 ) << 0 |

23 –
sign
 && !
öfOrNaN
 && !
subn‹mÆOrZîo
 ) << 1 |

24 –
sign
 && 
subn‹mÆOrZîo
 && 
	`‰acF64UI
–
uiA
 ) ) << 2 |

25 –
sign
 && 
subn‹mÆOrZîo
 && 
	`‰acF64UI
–
uiA
 ) == 0 ) << 3 |

26 –!
sign
 && 
öfOrNaN
 && 
	`‰acF64UI
–
uiA
 ) == 0 ) << 7 |

27 –!
sign
 && !
öfOrNaN
 && !
subn‹mÆOrZîo
 ) << 6 |

28 –!
sign
 && 
subn‹mÆOrZîo
 && 
	`‰acF64UI
–
uiA
 ) ) << 5 |

29 –!
sign
 && 
subn‹mÆOrZîo
 && 
	`‰acF64UI
–
uiA
 ) == 0 ) << 4 |

30 –
	`isNaNF64UI
–
uiA
 ) && 
	`so·Êﬂt_isSigNaNF64UI
( uiA )) << 8 |

31 –
	`isNaNF64UI
–
uiA
 ) && !
	`so·Êﬂt_isSigNaNF64UI
( uiA )) << 9;

32 
	}
}

	@softfloat/f64_div.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"•ecülize.h
"

8 
	~"so·Êﬂt.h
"

10 
Êﬂt64_t
 
	$f64_div
–
Êﬂt64_t
 
a
, flﬂt64_à
b
 )

12 
ui64_f64
 
uA
;

13 
uöt_Á°64_t
 
uiA
;

14 
boﬁ
 
signA
;

15 
öt_Á°16_t
 
expA
;

16 
uöt_Á°64_t
 
sigA
;

17 
ui64_f64
 
uB
;

18 
uöt_Á°64_t
 
uiB
;

19 
boﬁ
 
signB
;

20 
öt_Á°16_t
 
expB
;

21 
uöt_Á°64_t
 
sigB
;

22 
boﬁ
 
signZ
;

23 
exp16_sig64
 
n‹mExpSig
;

24 
öt_Á°16_t
 
expZ
;

25 
uöt_Á°64_t
 
sigZ
;

26 
uöt128
 
ãrm
, 
ªm
;

27 
uöt_Á°64_t
 
uiZ
;

28 
ui64_f64
 
uZ
;

30 
uA
.
f
 = 
a
;

31 
uiA
 = 
uA
.
ui
;

32 
signA
 = 
	`signF64UI
–
uiA
 );

33 
expA
 = 
	`expF64UI
–
uiA
 );

34 
sigA
 = 
	`‰acF64UI
–
uiA
 );

35 
uB
.
f
 = 
b
;

36 
uiB
 = 
uB
.
ui
;

37 
signB
 = 
	`signF64UI
–
uiB
 );

38 
expB
 = 
	`expF64UI
–
uiB
 );

39 
sigB
 = 
	`‰acF64UI
–
uiB
 );

40 
signZ
 = 
signA
 ^ 
signB
;

41 i‡–
expA
 == 0x7FF ) {

42 i‡–
sigA
 ) 
¥›ag©eNaN
;

43 i‡–
expB
 == 0x7FF ) {

44 i‡–
sigB
 ) 
¥›ag©eNaN
;

45 
övÆid
;

47 
öföôy
;

49 i‡–
expB
 == 0x7FF ) {

50 i‡–
sigB
 ) 
¥›ag©eNaN
;

51 
zîo
;

53 i‡–! 
expB
 ) {

54 i‡–! 
sigB
 ) {

55 i‡–! ( 
expA
 | 
sigA
 ) ) 
övÆid
;

56 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öföôy
 );

57 
öföôy
;

59 
n‹mExpSig
 = 
	`so·Êﬂt_n‹mSubn‹mÆF64Sig
–
sigB
 );

60 
expB
 = 
n‹mExpSig
.
exp
;

61 
sigB
 = 
n‹mExpSig
.
sig
;

63 i‡–! 
expA
 ) {

64 i‡–! 
sigA
 ) 
zîo
;

65 
n‹mExpSig
 = 
	`so·Êﬂt_n‹mSubn‹mÆF64Sig
–
sigA
 );

66 
expA
 = 
n‹mExpSig
.
exp
;

67 
sigA
 = 
n‹mExpSig
.
sig
;

69 
expZ
 = 
expA
 - 
expB
 + 0x3FD;

70 
sigA
 = ( sigA | 
	`UINT64_C
( 0x0010000000000000 ) )<<10;

71 
sigB
 = ( sigB | 
	`UINT64_C
( 0x0010000000000000 ) )<<11;

72 i‡–
sigB
 <–
sigA
 + sigA ) ) {

73 ++
expZ
;

74 
sigA
 >>= 1;

76 
sigZ
 = 
	`so·Êﬂt_e°im©eDiv128To64
–
sigA
, 0, 
sigB
 );

77 i‡––
sigZ
 & 0x1FF ) <= 2 ) {

78 
ãrm
 = 
	`so·Êﬂt_mul64To128
–
sigB
, 
sigZ
 );

79 
ªm
 = 
	`so·Êﬂt_sub128
–
sigA
, 0, 
ãrm
.
v64
,Åîm.
v0
 );

80  
	`UINT64_C
–0x8000000000000000 ) <
ªm
.
v64
 ) {

81 --
sigZ
;

82 
ªm
 = 
	`so·Êﬂt_add128
–ªm.
v64
,Ñem.
v0
, 0, 
sigB
 );

84 
sigZ
 |–
ªm
.
v0
 != 0 );

86  
	`so·Êﬂt_roundPackToF64
–
signZ
, 
expZ
, 
sigZ
 );

87 
¥›ag©eNaN
:

88 
uiZ
 = 
	`so·Êﬂt_¥›ag©eNaNF64UI
–
uiA
, 
uiB
 );

89 
uiZ
;

90 
övÆid
:

91 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

92 
uiZ
 = 
deÁu…NaNF64UI
;

93 
uiZ
;

94 
öföôy
:

95 
uiZ
 = 
	`∑ckToF64UI
–
signZ
, 0x7FF, 0 );

96 
uiZ
;

97 
zîo
:

98 
uiZ
 = 
	`∑ckToF64UI
–
signZ
, 0, 0 );

99 
uiZ
:

100 
uZ
.
ui
 = 
uiZ
;

101  
uZ
.
f
;

103 
	}
}

	@softfloat/f64_eq.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"•ecülize.h
"

7 
	~"so·Êﬂt.h
"

9 
boﬁ
 
	$f64_eq
–
Êﬂt64_t
 
a
, flﬂt64_à
b
 )

11 
ui64_f64
 
uA
;

12 
uöt_Á°64_t
 
uiA
;

13 
ui64_f64
 
uB
;

14 
uöt_Á°64_t
 
uiB
;

16 
uA
.
f
 = 
a
;

17 
uiA
 = 
uA
.
ui
;

18 
uB
.
f
 = 
b
;

19 
uiB
 = 
uB
.
ui
;

21 ––
	`expF64UI
–
uiA
 ) =0x7FF ) && 
	`‰acF64UI
( uiA ) )

22 || ( ( 
	`expF64UI
–
uiB
 ) =0x7FF ) && 
	`‰acF64UI
( uiB ) )

25 
	`so·Êﬂt_isSigNaNF64UI
–
uiA
 ) || so·Êﬂt_isSigNaNF64UI–
uiB
 )

27 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

29  
Ál£
;

32 –
uiA
 =
uiB
 ) || ! ( ( uiA | uiB ) & 
	`UINT64_C
( 0x7FFFFFFFFFFFFFFF ) );

34 
	}
}

	@softfloat/f64_eq_signaling.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
boﬁ
 
	$f64_eq_sig«lög
–
Êﬂt64_t
 
a
, flﬂt64_à
b
 )

10 
ui64_f64
 
uA
;

11 
uöt_Á°64_t
 
uiA
;

12 
ui64_f64
 
uB
;

13 
uöt_Á°64_t
 
uiB
;

15 
uA
.
f
 = 
a
;

16 
uiA
 = 
uA
.
ui
;

17 
uB
.
f
 = 
b
;

18 
uiB
 = 
uB
.
ui
;

20 ––
	`expF64UI
–
uiA
 ) =0x7FF ) && 
	`‰acF64UI
( uiA ) )

21 || ( ( 
	`expF64UI
–
uiB
 ) =0x7FF ) && 
	`‰acF64UI
( uiB ) )

23 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

24  
Ál£
;

27 –
uiA
 =
uiB
 ) || ! ( ( uiA | uiB ) & 
	`UINT64_C
( 0x7FFFFFFFFFFFFFFF ) );

29 
	}
}

	@softfloat/f64_isSignalingNaN.c

2 
	~<°dboﬁ.h
>

3 
	~"∂©f‹m.h
"

4 
	~"öã∫Æs.h
"

5 
	~"•ecülize.h
"

6 
	~"so·Êﬂt.h
"

8 
boﬁ
 
	$f64_isSig«lögNaN
–
Êﬂt64_t
 
a
 )

10 
ui64_f64
 
uA
;

12 
uA
.
f
 = 
a
;

13  
	`so·Êﬂt_isSigNaNF64UI
–
uA
.
ui
 );

15 
	}
}

	@softfloat/f64_le.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
boﬁ
 
	$f64_À
–
Êﬂt64_t
 
a
, flﬂt64_à
b
 )

10 
ui64_f64
 
uA
;

11 
uöt_Á°64_t
 
uiA
;

12 
ui64_f64
 
uB
;

13 
uöt_Á°64_t
 
uiB
;

14 
boﬁ
 
signA
, 
signB
;

16 
uA
.
f
 = 
a
;

17 
uiA
 = 
uA
.
ui
;

18 
uB
.
f
 = 
b
;

19 
uiB
 = 
uB
.
ui
;

21 ––
	`expF64UI
–
uiA
 ) =0x7FF ) && 
	`‰acF64UI
( uiA ) )

22 || ( ( 
	`expF64UI
–
uiB
 ) =0x7FF ) && 
	`‰acF64UI
( uiB ) )

24 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

25  
Ál£
;

27 
signA
 = 
	`signF64UI
–
uiA
 );

28 
signB
 = 
	`signF64UI
–
uiB
 );

30 –
signA
 !
signB
 )

31 ? 
signA
 || ! ( ( 
uiA
 | 
uiB
 ) & 
	`UINT64_C
( 0x7FFFFFFFFFFFFFFF ) )

32 : ( 
uiA
 =
uiB
 ) || ( 
signA
 ^ ( uiA < uiB ) );

34 
	}
}

	@softfloat/f64_le_quiet.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"•ecülize.h
"

7 
	~"so·Êﬂt.h
"

9 
boﬁ
 
	$f64_À_quõt
–
Êﬂt64_t
 
a
, flﬂt64_à
b
 )

11 
ui64_f64
 
uA
;

12 
uöt_Á°64_t
 
uiA
;

13 
ui64_f64
 
uB
;

14 
uöt_Á°64_t
 
uiB
;

15 
boﬁ
 
signA
, 
signB
;

17 
uA
.
f
 = 
a
;

18 
uiA
 = 
uA
.
ui
;

19 
uB
.
f
 = 
b
;

20 
uiB
 = 
uB
.
ui
;

22 ––
	`expF64UI
–
uiA
 ) =0x7FF ) && 
	`‰acF64UI
( uiA ) )

23 || ( ( 
	`expF64UI
–
uiB
 ) =0x7FF ) && 
	`‰acF64UI
( uiB ) )

26 
	`so·Êﬂt_isSigNaNF64UI
–
uiA
 ) || so·Êﬂt_isSigNaNF64UI–
uiB
 )

28 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

30  
Ál£
;

32 
signA
 = 
	`signF64UI
–
uiA
 );

33 
signB
 = 
	`signF64UI
–
uiB
 );

35 –
signA
 !
signB
 )

36 ? 
signA
 || ! ( ( 
uiA
 | 
uiB
 ) & 
	`UINT64_C
( 0x7FFFFFFFFFFFFFFF ) )

37 : ( 
uiA
 =
uiB
 ) || ( 
signA
 ^ ( uiA < uiB ) );

39 
	}
}

	@softfloat/f64_lt.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
boﬁ
 
	$f64_…
–
Êﬂt64_t
 
a
, flﬂt64_à
b
 )

10 
ui64_f64
 
uA
;

11 
uöt_Á°64_t
 
uiA
;

12 
ui64_f64
 
uB
;

13 
uöt_Á°64_t
 
uiB
;

14 
boﬁ
 
signA
, 
signB
;

16 
uA
.
f
 = 
a
;

17 
uiA
 = 
uA
.
ui
;

18 
uB
.
f
 = 
b
;

19 
uiB
 = 
uB
.
ui
;

21 ––
	`expF64UI
–
uiA
 ) =0x7FF ) && 
	`‰acF64UI
( uiA ) )

22 || ( ( 
	`expF64UI
–
uiB
 ) =0x7FF ) && 
	`‰acF64UI
( uiB ) )

24 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

25  
Ál£
;

27 
signA
 = 
	`signF64UI
–
uiA
 );

28 
signB
 = 
	`signF64UI
–
uiB
 );

30 –
signA
 !
signB
 )

31 ? 
signA
 && ( ( 
uiA
 | 
uiB
 ) & 
	`UINT64_C
( 0x7FFFFFFFFFFFFFFF ) )

32 : ( 
uiA
 !
uiB
 ) && ( 
signA
 ^ ( uiA < uiB ) );

34 
	}
}

	@softfloat/f64_lt_quiet.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"•ecülize.h
"

7 
	~"so·Êﬂt.h
"

9 
boﬁ
 
	$f64_…_quõt
–
Êﬂt64_t
 
a
, flﬂt64_à
b
 )

11 
ui64_f64
 
uA
;

12 
uöt_Á°64_t
 
uiA
;

13 
ui64_f64
 
uB
;

14 
uöt_Á°64_t
 
uiB
;

15 
boﬁ
 
signA
, 
signB
;

17 
uA
.
f
 = 
a
;

18 
uiA
 = 
uA
.
ui
;

19 
uB
.
f
 = 
b
;

20 
uiB
 = 
uB
.
ui
;

22 ––
	`expF64UI
–
uiA
 ) =0x7FF ) && 
	`‰acF64UI
( uiA ) )

23 || ( ( 
	`expF64UI
–
uiB
 ) =0x7FF ) && 
	`‰acF64UI
( uiB ) )

26 
	`so·Êﬂt_isSigNaNF64UI
–
uiA
 ) || so·Êﬂt_isSigNaNF64UI–
uiB
 )

28 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

30  
Ál£
;

32 
signA
 = 
	`signF64UI
–
uiA
 );

33 
signB
 = 
	`signF64UI
–
uiB
 );

35 –
signA
 !
signB
 )

36 ? 
signA
 && ( ( 
uiA
 | 
uiB
 ) & 
	`UINT64_C
( 0x7FFFFFFFFFFFFFFF ) )

37 : ( 
uiA
 !
uiB
 ) && ( 
signA
 ^ ( uiA < uiB ) );

39 
	}
}

	@softfloat/f64_mul.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"•ecülize.h
"

8 
	~"so·Êﬂt.h
"

10 
Êﬂt64_t
 
	$f64_mul
–
Êﬂt64_t
 
a
, flﬂt64_à
b
 )

12 
ui64_f64
 
uA
;

13 
uöt_Á°64_t
 
uiA
;

14 
boﬁ
 
signA
;

15 
öt_Á°16_t
 
expA
;

16 
uöt_Á°64_t
 
sigA
;

17 
ui64_f64
 
uB
;

18 
uöt_Á°64_t
 
uiB
;

19 
boﬁ
 
signB
;

20 
öt_Á°16_t
 
expB
;

21 
uöt_Á°64_t
 
sigB
;

22 
boﬁ
 
signZ
;

23 
uöt_Á°64_t
 
magBôs
;

24 
exp16_sig64
 
n‹mExpSig
;

25 
öt_Á°16_t
 
expZ
;

26 
uöt128
 
sigZ128
;

27 
uöt_Á°64_t
 
sigZ
, 
uiZ
;

28 
ui64_f64
 
uZ
;

30 
uA
.
f
 = 
a
;

31 
uiA
 = 
uA
.
ui
;

32 
signA
 = 
	`signF64UI
–
uiA
 );

33 
expA
 = 
	`expF64UI
–
uiA
 );

34 
sigA
 = 
	`‰acF64UI
–
uiA
 );

35 
uB
.
f
 = 
b
;

36 
uiB
 = 
uB
.
ui
;

37 
signB
 = 
	`signF64UI
–
uiB
 );

38 
expB
 = 
	`expF64UI
–
uiB
 );

39 
sigB
 = 
	`‰acF64UI
–
uiB
 );

40 
signZ
 = 
signA
 ^ 
signB
;

41 i‡–
expA
 == 0x7FF ) {

42 i‡–
sigA
 || ( ( 
expB
 =0x7FF ) && 
sigB
 ) ) 
¥›ag©eNaN
;

43 
magBôs
 = 
expB
 | 
sigB
;

44 
öfArg
;

46 i‡–
expB
 == 0x7FF ) {

47 i‡–
sigB
 ) 
¥›ag©eNaN
;

48 
magBôs
 = 
expA
 | 
sigA
;

49 
öfArg
;

51 i‡–! 
expA
 ) {

52 i‡–! 
sigA
 ) 
zîo
;

53 
n‹mExpSig
 = 
	`so·Êﬂt_n‹mSubn‹mÆF64Sig
–
sigA
 );

54 
expA
 = 
n‹mExpSig
.
exp
;

55 
sigA
 = 
n‹mExpSig
.
sig
;

57 i‡–! 
expB
 ) {

58 i‡–! 
sigB
 ) 
zîo
;

59 
n‹mExpSig
 = 
	`so·Êﬂt_n‹mSubn‹mÆF64Sig
–
sigB
 );

60 
expB
 = 
n‹mExpSig
.
exp
;

61 
sigB
 = 
n‹mExpSig
.
sig
;

63 
expZ
 = 
expA
 + 
expB
 - 0x3FF;

64 
sigA
 = ( sigA | 
	`UINT64_C
( 0x0010000000000000 ) )<<10;

65 
sigB
 = ( sigB | 
	`UINT64_C
( 0x0010000000000000 ) )<<11;

66 
sigZ128
 = 
	`so·Êﬂt_mul64To128
–
sigA
, 
sigB
 );

67 
sigZ
 = 
sigZ128
.
v64
 | ( sigZ128.
v0
 != 0 );

68 i‡–
sigZ
 < 
	`UINT64_C
( 0x4000000000000000 ) ) {

69 --
expZ
;

70 
sigZ
 <<= 1;

72  
	`so·Êﬂt_roundPackToF64
–
signZ
, 
expZ
, 
sigZ
 );

73 
¥›ag©eNaN
:

74 
uiZ
 = 
	`so·Êﬂt_¥›ag©eNaNF64UI
–
uiA
, 
uiB
 );

75 
uiZ
;

76 
öfArg
:

77 i‡–! 
magBôs
 ) {

78 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

79 
uiZ
 = 
deÁu…NaNF64UI
;

81 
uiZ
 = 
	`∑ckToF64UI
–
signZ
, 0x7FF, 0 );

83 
uiZ
;

84 
zîo
:

85 
uiZ
 = 
	`∑ckToF64UI
–
signZ
, 0, 0 );

86 
uiZ
:

87 
uZ
.
ui
 = 
uiZ
;

88  
uZ
.
f
;

90 
	}
}

	@softfloat/f64_mulAdd.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"öã∫Æs.h
"

5 
	~"so·Êﬂt.h
"

7 
Êﬂt64_t
 
	$f64_mulAdd
–
Êﬂt64_t
 
a
, flﬂt64_à
b
, flﬂt64_à
c
 )

9 
ui64_f64
 
uA
;

10 
uöt_Á°64_t
 
uiA
;

11 
ui64_f64
 
uB
;

12 
uöt_Á°64_t
 
uiB
;

13 
ui64_f64
 
uC
;

14 
uöt_Á°64_t
 
uiC
;

16 
uA
.
f
 = 
a
;

17 
uiA
 = 
uA
.
ui
;

18 
uB
.
f
 = 
b
;

19 
uiB
 = 
uB
.
ui
;

20 
uC
.
f
 = 
c
;

21 
uiC
 = 
uC
.
ui
;

22  
	`so·Êﬂt_mulAddF64
–0, 
uiA
, 
uiB
, 
uiC
 );

24 
	}
}

	@softfloat/f64_rem.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"•ecülize.h
"

8 
	~"so·Êﬂt.h
"

10 
Êﬂt64_t
 
	$f64_ªm
–
Êﬂt64_t
 
a
, flﬂt64_à
b
 )

12 
ui64_f64
 
uA
;

13 
uöt_Á°64_t
 
uiA
;

14 
boﬁ
 
signA
;

15 
öt_Á°16_t
 
expA
;

16 
uöt_Á°64_t
 
sigA
;

17 
ui64_f64
 
uB
;

18 
uöt_Á°64_t
 
uiB
;

19 
boﬁ
 
signB
;

20 
öt_Á°16_t
 
expB
;

21 
uöt_Á°64_t
 
sigB
;

22 
exp16_sig64
 
n‹mExpSig
;

23 
öt_Á°16_t
 
expDiff
;

24 
uöt_Á°64_t
 
q
, 
Æã∫©eSigA
;

25 
uöt64_t
 
sigMón
;

26 
boﬁ
 
signZ
;

27 
uöt_Á°64_t
 
uiZ
;

28 
ui64_f64
 
uZ
;

30 
uA
.
f
 = 
a
;

31 
uiA
 = 
uA
.
ui
;

32 
signA
 = 
	`signF64UI
–
uiA
 );

33 
expA
 = 
	`expF64UI
–
uiA
 );

34 
sigA
 = 
	`‰acF64UI
–
uiA
 );

35 
uB
.
f
 = 
b
;

36 
uiB
 = 
uB
.
ui
;

37 
signB
 = 
	`signF64UI
–
uiB
 );

38 
expB
 = 
	`expF64UI
–
uiB
 );

39 
sigB
 = 
	`‰acF64UI
–
uiB
 );

40 i‡–
expA
 == 0x7FF ) {

41 i‡–
sigA
 || ( ( 
expB
 =0x7FF ) && 
sigB
 ) ) 
¥›ag©eNaN
;

42 
övÆid
;

44 i‡–
expB
 == 0x7FF ) {

45 i‡–
sigB
 ) 
¥›ag©eNaN
;

46  
a
;

48 i‡–! 
expB
 ) {

49 i‡–! 
sigB
 ) 
övÆid
;

50 
n‹mExpSig
 = 
	`so·Êﬂt_n‹mSubn‹mÆF64Sig
–
sigB
 );

51 
expB
 = 
n‹mExpSig
.
exp
;

52 
sigB
 = 
n‹mExpSig
.
sig
;

54 i‡–! 
expA
 ) {

55 i‡–! 
sigA
 )  
a
;

56 
n‹mExpSig
 = 
	`so·Êﬂt_n‹mSubn‹mÆF64Sig
–
sigA
 );

57 
expA
 = 
n‹mExpSig
.
exp
;

58 
sigA
 = 
n‹mExpSig
.
sig
;

60 
expDiff
 = 
expA
 - 
expB
;

61 
sigA
 = ( sigA | 
	`UINT64_C
( 0x0010000000000000 ) )<<11;

62 
sigB
 = ( sigB | 
	`UINT64_C
( 0x0010000000000000 ) )<<11;

63 i‡–
expDiff
 < 0 ) {

64 i‡–
expDiff
 < -1 )  
a
;

65 
sigA
 >>= 1;

67 
q
 = ( 
sigB
 <
sigA
 );

68 i‡–
q
 ) 
sigA
 -
sigB
;

69 
expDiff
 -= 64;

70  0 < 
expDiff
 ) {

71 
q
 = 
	`so·Êﬂt_e°im©eDiv128To64
–
sigA
, 0, 
sigB
 );

72 
q
 = ( 2 < q ) ? q - 2 : 0;

73 
sigA
 = - ( ( 
sigB
>>2 ) * 
q
 );

74 
expDiff
 -= 62;

76 
expDiff
 += 64;

77 i‡–0 < 
expDiff
 ) {

78 
q
 = 
	`so·Êﬂt_e°im©eDiv128To64
–
sigA
, 0, 
sigB
 );

79 
q
 = ( 2 < q ) ? q - 2 : 0;

80 
q
 >>64 - 
expDiff
;

81 
sigB
 >>= 2;

82 
sigA
 = ( ( sigA>>1 )<<–
expDiff
 - 1 ) ) - 
sigB
 * 
q
;

84 
sigA
 >>= 2;

85 
sigB
 >>= 2;

88 
Æã∫©eSigA
 = 
sigA
;

89 ++
q
;

90 
sigA
 -
sigB
;

91 }  
sigA
 < 
	`UINT64_C
( 0x8000000000000000 ) );

92 
sigMón
 = 
sigA
 + 
Æã∫©eSigA
;

94 –
	`UINT64_C
–0x8000000000000000 ) <
sigMón
 )

95 || ( ! 
sigMón
 && ( 
q
 & 1 ) )

97 
sigA
 = 
Æã∫©eSigA
;

99 
signZ
 = ( 
	`UINT64_C
–0x8000000000000000 ) <
sigA
 );

100 i‡–
signZ
 ) 
sigA
 = - sigA;

101  
	`so·Êﬂt_n‹mRoundPackToF64
–
signA
 ^ 
signZ
, 
expB
, 
sigA
 );

102 
¥›ag©eNaN
:

103 
uiZ
 = 
	`so·Êﬂt_¥›ag©eNaNF64UI
–
uiA
, 
uiB
 );

104 
uiZ
;

105 
övÆid
:

106 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

107 
uiZ
 = 
deÁu…NaNF64UI
;

108 
uiZ
:

109 
uZ
.
ui
 = 
uiZ
;

110  
uZ
.
f
;

112 
	}
}

	@softfloat/f64_roundToInt.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"•ecülize.h
"

7 
	~"so·Êﬂt.h
"

9 
Êﬂt64_t
 
	$f64_roundToI¡
–
Êﬂt64_t
 
a
, 
öt_Á°8_t
 
roundögMode
, 
boﬁ
 
exa˘
 )

11 
ui64_f64
 
uA
;

12 
uöt_Á°64_t
 
uiA
;

13 
öt_Á°16_t
 
expA
;

14 
uöt_Á°64_t
 
uiZ
;

15 
boﬁ
 
signA
;

16 
uöt_Á°64_t
 
œ°BôMask
, 
roundBôsMask
;

17 
ui64_f64
 
uZ
;

19 
uA
.
f
 = 
a
;

20 
uiA
 = 
uA
.
ui
;

21 
expA
 = 
	`expF64UI
–
uiA
 );

22 i‡–0x433 <
expA
 ) {

23 i‡––
expA
 =0x7FF ) && 
	`‰acF64UI
–
uiA
 ) ) {

24 
uiZ
 = 
	`so·Êﬂt_¥›ag©eNaNF64UI
–
uiA
, 0 );

25 
uiZ
;

27  
a
;

29 i‡–
expA
 <= 0x3FE ) {

30 i‡–! ( 
uiA
 & 
	`UINT64_C
–0x7FFFFFFFFFFFFFFF ) ) )  
a
;

31 i‡–
exa˘
 ) 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

32 
signA
 = 
	`signF64UI
–
uiA
 );

33  
roundögMode
 ) {

34 
so·Êﬂt_round_√¨e°_eví
:

35 i‡––
expA
 =0x3FE ) && 
	`‰acF64UI
–
uiA
 ) ) {

36 
uiZ
 = 
	`∑ckToF64UI
–
signA
, 0x3FF, 0 );

37 
uiZ
;

40 
so·Êﬂt_round_mö
:

41 
uiZ
 = 
signA
 ? 
	`UINT64_C
( 0xBFF0000000000000 ) : 0;

42 
uiZ
;

43 
so·Êﬂt_round_max
:

44 
uiZ
 =

45 
signA
 ? 
	`UINT64_C
( 0x8000000000000000 )

46 : 
	`UINT64_C
( 0x3FF0000000000000 );

47 
uiZ
;

48 
so·Êﬂt_round_√¨e°_maxMag
:

49 i‡–
expA
 == 0x3FE ) {

50 
uiZ
 = 
	`∑ckToF64UI
–
signA
, 0x3FF, 0 );

51 
uiZ
;

55 
uiZ
 = 
	`∑ckToF64UI
–
signA
, 0, 0 );

56 
uiZ
;

58 
œ°BôMask
 = (
uöt_Á°64_t
Ë1<<–0x433 - 
expA
 );

59 
roundBôsMask
 = 
œ°BôMask
 - 1;

60 
uiZ
 = 
uiA
;

61 i‡–
roundögMode
 =
so·Êﬂt_round_√¨e°_maxMag
 ) {

62 
uiZ
 +
œ°BôMask
>>1;

63 } i‡–
roundögMode
 =
so·Êﬂt_round_√¨e°_eví
 ) {

64 
uiZ
 +
œ°BôMask
>>1;

65 i‡–! ( 
uiZ
 & 
roundBôsMask
 ) ) uiZ &~ 
œ°BôMask
;

66 } i‡–
roundögMode
 !
so·Êﬂt_round_möMag
 ) {

67 i‡–
	`signF64UI
–
uiZ
 ) ^ ( 
roundögMode
 =
so·Êﬂt_round_max
 ) ) {

68 
uiZ
 +
roundBôsMask
;

71 
uiZ
 &~ 
roundBôsMask
;

72 i‡–
exa˘
 && ( 
uiZ
 !
uiA
 ) ) {

73 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

75 
uiZ
:

76 
uZ
.
ui
 = 
uiZ
;

77  
uZ
.
f
;

79 
	}
}

	@softfloat/f64_sqrt.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"•ecülize.h
"

8 
	~"so·Êﬂt.h
"

10 
Êﬂt64_t
 
	$f64_sqπ
–
Êﬂt64_t
 
a
 )

12 
ui64_f64
 
uA
;

13 
uöt_Á°64_t
 
uiA
;

14 
boﬁ
 
signA
;

15 
öt_Á°16_t
 
expA
;

16 
uöt_Á°64_t
 
sigA
, 
uiZ
;

17 
exp16_sig64
 
n‹mExpSig
;

18 
öt_Á°16_t
 
expZ
;

19 
uöt_Á°32_t
 
sigZ32
;

20 
uöt_Á°64_t
 
sigZ
;

21 
uöt128
 
ãrm
, 
ªm
;

22 
ui64_f64
 
uZ
;

24 
uA
.
f
 = 
a
;

25 
uiA
 = 
uA
.
ui
;

26 
signA
 = 
	`signF64UI
–
uiA
 );

27 
expA
 = 
	`expF64UI
–
uiA
 );

28 
sigA
 = 
	`‰acF64UI
–
uiA
 );

29 i‡–
expA
 == 0x7FF ) {

30 i‡–
sigA
 ) {

31 
uiZ
 = 
	`so·Êﬂt_¥›ag©eNaNF64UI
–
uiA
, 0 );

32 
uiZ
;

34 i‡–! 
signA
 )  
a
;

35 
övÆid
;

37 i‡–
signA
 ) {

38 i‡–! ( 
expA
 | 
sigA
 ) )  
a
;

39 
övÆid
;

41 i‡–! 
expA
 ) {

42 i‡–! 
sigA
 )  
a
;

43 
n‹mExpSig
 = 
	`so·Êﬂt_n‹mSubn‹mÆF64Sig
–
sigA
 );

44 
expA
 = 
n‹mExpSig
.
exp
;

45 
sigA
 = 
n‹mExpSig
.
sig
;

47 
expZ
 = ( ( 
expA
 - 0x3FF )>>1 ) + 0x3FE;

48 
sigA
 |
	`UINT64_C
( 0x0010000000000000 );

49 
sigZ32
 = 
	`so·Êﬂt_e°im©eSqπ32
–
expA
, 
sigA
>>21 );

50 
sigA
 <<9 - ( 
expA
 & 1 );

51 
sigZ
 =

52 
	`so·Êﬂt_e°im©eDiv128To64
–
sigA
, 0, (
uöt_Á°64_t
Ë
sigZ32
<<32 )

53 + ( (
uöt_Á°64_t
Ë
sigZ32
<<30 );

54 i‡––
sigZ
 & 0x1FF ) <= 5 ) {

55 
ãrm
 = 
	`so·Êﬂt_mul64To128
–
sigZ
, sigZ );

56 
ªm
 = 
	`so·Êﬂt_sub128
–
sigA
, 0, 
ãrm
.
v64
,Åîm.
v0
 );

57  
	`UINT64_C
–0x8000000000000000 ) <
ªm
.
v64
 ) {

58 --
sigZ
;

59 
ªm
 =

60 
	`so·Êﬂt_add128
(

61 
ªm
.
v64
,Ñem.
v0
, 
sigZ
>>63, (
uöt64_t
) ( sigZ<<1 ) );

63 
sigZ
 |––
ªm
.
v64
 |Ñem.
v0
 ) != 0 );

65  
	`so·Êﬂt_roundPackToF64
–0, 
expZ
, 
sigZ
 );

66 
övÆid
:

67 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

68 
uiZ
 = 
deÁu…NaNF64UI
;

69 
uiZ
:

70 
uZ
.
ui
 = 
uiZ
;

71  
uZ
.
f
;

73 
	}
}

	@softfloat/f64_sub.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
Êﬂt64_t
 
	$f64_sub
–
Êﬂt64_t
 
a
, flﬂt64_à
b
 )

10 
ui64_f64
 
uA
;

11 
uöt_Á°64_t
 
uiA
;

12 
boﬁ
 
signA
;

13 
ui64_f64
 
uB
;

14 
uöt_Á°64_t
 
uiB
;

15 
boﬁ
 
signB
;

16 
	`Êﬂt64_t
 ( *
magsRoutöe
 )–
uöt_Á°64_t
, uöt_Á°64_t, 
boﬁ
 );

18 
uA
.
f
 = 
a
;

19 
uiA
 = 
uA
.
ui
;

20 
signA
 = 
	`signF64UI
–
uiA
 );

21 
uB
.
f
 = 
b
;

22 
uiB
 = 
uB
.
ui
;

23 
signB
 = 
	`signF64UI
–
uiB
 );

24 
magsRoutöe
 =

25 –
signA
 =
signB
 ) ? 
so·Êﬂt_subMagsF64
 : 
so·Êﬂt_addMagsF64
;

26  
	`magsRoutöe
–
uiA
, 
uiB
, 
signA
 );

28 
	}
}

	@softfloat/f64_to_f32.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"•ecülize.h
"

8 
	~"so·Êﬂt.h
"

10 
Êﬂt32_t
 
	$f64_to_f32
–
Êﬂt64_t
 
a
 )

12 
ui64_f64
 
uA
;

13 
uöt_Á°64_t
 
uiA
;

14 
boﬁ
 
sign
;

15 
öt_Á°16_t
 
exp
;

16 
uöt_Á°64_t
 
sig
;

17 
uöt_Á°32_t
 
uiZ
, 
sig32
;

18 
ui32_f32
 
uZ
;

20 
uA
.
f
 = 
a
;

21 
uiA
 = 
uA
.
ui
;

22 
sign
 = 
	`signF64UI
–
uiA
 );

23 
exp
 = 
	`expF64UI
–
uiA
 );

24 
sig
 = 
	`‰acF64UI
–
uiA
 );

25 i‡–
exp
 == 0x7FF ) {

26 
uiZ
 =

27 
sig
 ? 
	`so·Êﬂt_comm⁄NaNToF32UI
(

28 
	`so·Êﬂt_f64UIToComm⁄NaN
–
uiA
 ) )

29 : 
	`∑ckToF32UI
–
sign
, 0xFF, 0 );

30 
uiZ
;

32 
sig32
 = 
	`so·Êﬂt_sh‹tShi·64RightJam
–
sig
, 22 );

33 i‡–! ( 
exp
 | 
sig32
 ) ) {

34 
uiZ
 = 
	`∑ckToF32UI
–
sign
, 0, 0 );

35 
uiZ
;

37  
	`so·Êﬂt_roundPackToF32
–
sign
, 
exp
 - 0x381, 
sig32
 | 0x40000000 );

38 
uiZ
:

39 
uZ
.
ui
 = 
uiZ
;

40  
uZ
.
f
;

42 
	}
}

	@softfloat/f64_to_i32.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"so·Êﬂt.h
"

9 
öt_Á°32_t
 
	$f64_to_i32
–
Êﬂt64_t
 
a
, 
öt_Á°8_t
 
roundögMode
, 
boﬁ
 
exa˘
 )

11 
ui64_f64
 
uA
;

12 
uöt_Á°64_t
 
uiA
;

13 
boﬁ
 
sign
;

14 
öt_Á°16_t
 
exp
;

15 
uöt_Á°64_t
 
sig
;

16 
öt_Á°16_t
 
shi·Cou¡
;

18 
uA
.
f
 = 
a
;

19 
uiA
 = 
uA
.
ui
;

20 
sign
 = 
	`signF64UI
–
uiA
 );

21 
exp
 = 
	`expF64UI
–
uiA
 );

22 
sig
 = 
	`‰acF64UI
–
uiA
 );

23 i‡–
exp
 ) 
sig
 |
	`UINT64_C
( 0x0010000000000000 );

24 
shi·Cou¡
 = 0x42C - 
exp
;

25 i‡–0 < 
shi·Cou¡
 ) 
sig
 = 
	`so·Êﬂt_shi·64RightJam
( sig, shiftCount );

26  
	`so·Êﬂt_roundPackToI32
–
sign
, 
sig
, 
roundögMode
, 
exa˘
 );

28 
	}
}

	@softfloat/f64_to_i32_r_minMag.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
öt_Á°32_t
 
	$f64_to_i32_r_möMag
–
Êﬂt64_t
 
a
, 
boﬁ
 
exa˘
 )

10 
ui64_f64
 
uA
;

11 
uöt_Á°64_t
 
uiA
;

12 
öt_Á°16_t
 
exp
;

13 
uöt_Á°64_t
 
sig
;

14 
boﬁ
 
sign
;

15 
öt_Á°16_t
 
shi·Cou¡
;

16 
uöt_Á°32_t
 
absZ
;

17 uni⁄ { 
uöt32_t
 
ui
; 
öt32_t
 
i
; } 
uZ
;

18 
öt_Á°32_t
 
z
;

20 
uA
.
f
 = 
a
;

21 
uiA
 = 
uA
.
ui
;

22 
exp
 = 
	`expF64UI
–
uiA
 );

23 
sig
 = 
	`‰acF64UI
–
uiA
 );

24 i‡–
exp
 < 0x3FF ) {

25 i‡–
exa˘
 && ( 
exp
 | 
sig
 ) ) {

26 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

30 
sign
 = 
	`signF64UI
–
uiA
 );

31 i‡–0x41E < 
exp
 ) {

32 i‡––
exp
 =0x7FF ) && 
sig
 ) 
sign
 = 0;

33 
övÆid
;

35 
sig
 |
	`UINT64_C
( 0x0010000000000000 );

36 
shi·Cou¡
 = 0x433 - 
exp
;

37 
absZ
 = 
sig
>>
shi·Cou¡
;

38 
uZ
.
ui
 = 
sign
 ? - 
absZ
 :ábsZ;

39 
z
 = 
uZ
.
i
;

40 i‡––
z
 < 0 ) !
sign
 ) 
övÆid
;

41 i‡–
exa˘
 && ( (
uöt_Á°64_t
Ë
absZ
<<
shi·Cou¡
 !
sig
 ) ) {

42 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

44  
z
;

45 
övÆid
:

46 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

47  
sign
 ? -0x7FFFFFFF - 1 : 0x7FFFFFFF;

49 
	}
}

	@softfloat/f64_to_i64.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"so·Êﬂt.h
"

9 
öt_Á°64_t
 
	$f64_to_i64
–
Êﬂt64_t
 
a
, 
öt_Á°8_t
 
roundögMode
, 
boﬁ
 
exa˘
 )

11 
ui64_f64
 
uA
;

12 
uöt_Á°64_t
 
uiA
;

13 
boﬁ
 
sign
;

14 
öt_Á°16_t
 
exp
;

15 
uöt_Á°64_t
 
sig
;

16 
öt_Á°16_t
 
shi·Cou¡
;

17 
uöt64_exåa
 
sigExåa
;

19 
uA
.
f
 = 
a
;

20 
uiA
 = 
uA
.
ui
;

21 
sign
 = 
	`signF64UI
–
uiA
 );

22 
exp
 = 
	`expF64UI
–
uiA
 );

23 
sig
 = 
	`‰acF64UI
–
uiA
 );

24 i‡–
exp
 ) 
sig
 |
	`UINT64_C
( 0x0010000000000000 );

25 
shi·Cou¡
 = 0x433 - 
exp
;

26 i‡–
shi·Cou¡
 <= 0 ) {

27 i‡–0x43E < 
exp
 ) {

28 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

30 ! 
sign


31 ? 
	`INT64_C
( 0x7FFFFFFFFFFFFFFF )

32 : - 
	`INT64_C
( 0x7FFFFFFFFFFFFFFF ) - 1;

34 
sigExåa
.
v
 = 
sig
<<–- 
shi·Cou¡
 );

35 
sigExåa
.
exåa
 = 0;

37 
sigExåa
 = 
	`so·Êﬂt_shi·64ExåaRightJam
–
sig
, 0, 
shi·Cou¡
 );

40 
	`so·Êﬂt_roundPackToI64
(

41 
sign
, 
sigExåa
.
v
, sigExåa.
exåa
, 
roundögMode
, 
exa˘
 );

43 
	}
}

	@softfloat/f64_to_i64_r_minMag.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
öt_Á°64_t
 
	$f64_to_i64_r_möMag
–
Êﬂt64_t
 
a
, 
boﬁ
 
exa˘
 )

10 
ui64_f64
 
uA
;

11 
uöt_Á°64_t
 
uiA
;

12 
boﬁ
 
sign
;

13 
öt_Á°16_t
 
exp
;

14 
uöt_Á°64_t
 
sig
;

15 
öt_Á°16_t
 
shi·Cou¡
;

16 
öt_Á°64_t
 
absZ
;

18 
uA
.
f
 = 
a
;

19 
uiA
 = 
uA
.
ui
;

20 
sign
 = 
	`signF64UI
–
uiA
 );

21 
exp
 = 
	`expF64UI
–
uiA
 );

22 
sig
 = 
	`‰acF64UI
–
uiA
 );

23 
shi·Cou¡
 = 
exp
 - 0x433;

24 i‡–0 <
shi·Cou¡
 ) {

25 i‡–0x43E <
exp
 ) {

26 i‡–
uiA
 !
	`∑ckToF64UI
( 1, 0x43E, 0 ) ) {

27 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

28 i‡–! 
sign
 || ( ( 
exp
 =0x7FF ) && 
sig
 ) ) {

29  
	`INT64_C
( 0x7FFFFFFFFFFFFFFF );

32  - 
	`INT64_C
( 0x7FFFFFFFFFFFFFFF ) - 1;

34 
sig
 |
	`UINT64_C
( 0x0010000000000000 );

35 
absZ
 = 
sig
<<
shi·Cou¡
;

37 i‡–
exp
 < 0x3FF ) {

38 i‡–
exa˘
 && ( 
exp
 | 
sig
 ) ) {

39 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

43 
sig
 |
	`UINT64_C
( 0x0010000000000000 );

44 
absZ
 = 
sig
>>–- 
shi·Cou¡
 );

45 i‡–
exa˘
 && (
uöt64_t
Ë–
sig
<<–
shi·Cou¡
 & 63 ) ) ) {

46 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

49  
sign
 ? - 
absZ
 :ábsZ;

51 
	}
}

	@softfloat/f64_to_ui32.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"so·Êﬂt.h
"

9 
uöt_Á°32_t
 
	$f64_to_ui32
–
Êﬂt64_t
 
a
, 
öt_Á°8_t
 
roundögMode
, 
boﬁ
 
exa˘
 )

11 
ui64_f64
 
uA
;

12 
uöt_Á°64_t
 
uiA
;

13 
boﬁ
 
sign
;

14 
öt_Á°16_t
 
exp
;

15 
uöt_Á°64_t
 
sig
;

16 
öt_Á°16_t
 
shi·Cou¡
;

18 
uA
.
f
 = 
a
;

19 
uiA
 = 
uA
.
ui
;

20 
sign
 = 
	`signF64UI
–
uiA
 );

21 
exp
 = 
	`expF64UI
–
uiA
 );

22 
sig
 = 
	`‰acF64UI
–
uiA
 );

23 i‡–
exp
 ) 
sig
 |
	`UINT64_C
( 0x0010000000000000 );

24 
shi·Cou¡
 = 0x42C - 
exp
;

25 i‡–0 < 
shi·Cou¡
 ) 
sig
 = 
	`so·Êﬂt_shi·64RightJam
( sig, shiftCount );

26  
	`so·Êﬂt_roundPackToUI32
–
sign
, 
sig
, 
roundögMode
, 
exa˘
 );

28 
	}
}

	@softfloat/f64_to_ui32_r_minMag.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
uöt_Á°32_t
 
	$f64_to_ui32_r_möMag
–
Êﬂt64_t
 
a
, 
boﬁ
 
exa˘
 )

10 
ui64_f64
 
uA
;

11 
uöt_Á°64_t
 
uiA
;

12 
öt_Á°16_t
 
exp
;

13 
uöt_Á°64_t
 
sig
;

14 
öt_Á°16_t
 
shi·Cou¡
;

15 
uöt_Á°32_t
 
z
;

17 
uA
.
f
 = 
a
;

18 
uiA
 = 
uA
.
ui
;

19 
exp
 = 
	`expF64UI
–
uiA
 );

20 
sig
 = 
	`‰acF64UI
–
uiA
 );

21 i‡–
exp
 < 0x3FF ) {

22 i‡–
exa˘
 && ( 
exp
 | 
sig
 ) ) {

23 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

27 i‡–
	`signF64UI
–
uiA
 ) || ( 0x41E < 
exp
 ) ) {

28 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

31 
sig
 |
	`UINT64_C
( 0x0010000000000000 );

32 
shi·Cou¡
 = 0x433 - 
exp
;

33 
z
 = 
sig
>>
shi·Cou¡
;

34 i‡–
exa˘
 && ( (
uöt_Á°64_t
Ë
z
<<
shi·Cou¡
 !
sig
 ) ) {

35 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

37  
z
;

39 
	}
}

	@softfloat/f64_to_ui64.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"so·Êﬂt.h
"

9 
uöt_Á°64_t
 
	$f64_to_ui64
–
Êﬂt64_t
 
a
, 
öt_Á°8_t
 
roundögMode
, 
boﬁ
 
exa˘
 )

11 
ui64_f64
 
uA
;

12 
uöt_Á°64_t
 
uiA
;

13 
boﬁ
 
sign
;

14 
öt_Á°16_t
 
exp
;

15 
uöt_Á°64_t
 
sig
;

16 
öt_Á°16_t
 
shi·Cou¡
;

17 
uöt64_exåa
 
sigExåa
;

19 
uA
.
f
 = 
a
;

20 
uiA
 = 
uA
.
ui
;

21 
sign
 = 
	`signF64UI
–
uiA
 );

22 
exp
 = 
	`expF64UI
–
uiA
 );

23 
sig
 = 
	`‰acF64UI
–
uiA
 );

24 i‡–
exp
 ) 
sig
 |
	`UINT64_C
( 0x0010000000000000 );

25 
shi·Cou¡
 = 0x433 - 
exp
;

26 i‡–
shi·Cou¡
 <= 0 ) {

27 i‡–0x43E < 
exp
 ) {

28 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

29  
	`UINT64_C
( 0xFFFFFFFFFFFFFFFF );

31 
sigExåa
.
v
 = 
sig
<<–- 
shi·Cou¡
 );

32 
sigExåa
.
exåa
 = 0;

34 
sigExåa
 = 
	`so·Êﬂt_shi·64ExåaRightJam
–
sig
, 0, 
shi·Cou¡
 );

37 
	`so·Êﬂt_roundPackToUI64
(

38 
sign
, 
sigExåa
.
v
, sigExåa.
exåa
, 
roundögMode
, 
exa˘
 );

40 
	}
}

	@softfloat/f64_to_ui64_r_minMag.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
uöt_Á°64_t
 
	$f64_to_ui64_r_möMag
–
Êﬂt64_t
 
a
, 
boﬁ
 
exa˘
 )

10 
ui64_f64
 
uA
;

11 
uöt_Á°64_t
 
uiA
;

12 
öt_Á°16_t
 
exp
;

13 
uöt_Á°64_t
 
sig
;

14 
öt_Á°16_t
 
shi·Cou¡
;

15 
uöt_Á°64_t
 
z
;

17 
uA
.
f
 = 
a
;

18 
uiA
 = 
uA
.
ui
;

19 
exp
 = 
	`expF64UI
–
uiA
 );

20 
sig
 = 
	`‰acF64UI
–
uiA
 );

21 i‡–
exp
 < 0x3FF ) {

22 i‡–
exa˘
 && ( 
exp
 | 
sig
 ) ) {

23 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

27 i‡–
	`signF64UI
–
uiA
 ) ) 
övÆid
;

28 
shi·Cou¡
 = 
exp
 - 0x433;

29 i‡–0 <
shi·Cou¡
 ) {

30 i‡–0x43E < 
exp
 ) 
övÆid
;

31 
z
 = ( 
sig
 | 
	`UINT64_C
–0x0010000000000000 ) )<<
shi·Cou¡
;

33 
sig
 |
	`UINT64_C
( 0x0010000000000000 );

34 
z
 = 
sig
>>–- 
shi·Cou¡
 );

35 i‡–
exa˘
 && (
uöt64_t
Ë–
sig
<<–
shi·Cou¡
 & 63 ) ) ) {

36 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

39  
z
;

40 
övÆid
:

41 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

42  
	`UINT64_C
( 0xFFFFFFFFFFFFFFFF );

44 
	}
}

	@softfloat/i32_to_f32.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
Êﬂt32_t
 
	$i32_to_f32
–
öt_Á°32_t
 
a
 )

10 
boﬁ
 
sign
;

11 
ui32_f32
 
uZ
;

13 
sign
 = ( 
a
 < 0 );

14 i‡–! ( 
a
 & 0x7FFFFFFF ) ) {

15 
uZ
.
ui
 = 
sign
 ? 
	`∑ckToF32UI
( 1, 0x9E, 0 ) : 0;

16  
uZ
.
f
;

18  
	`so·Êﬂt_n‹mRoundPackToF32
–
sign
, 0x9C, sig¿? - 
a
 :á );

20 
	}
}

	@softfloat/i32_to_f64.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"so·Êﬂt.h
"

9 
Êﬂt64_t
 
	$i32_to_f64
–
öt_Á°32_t
 
a
 )

11 
uöt_Á°64_t
 
uiZ
;

12 
boﬁ
 
sign
;

13 
uöt_Á°32_t
 
absA
;

14 
shi·Cou¡
;

15 
ui64_f64
 
uZ
;

17 i‡–! 
a
 ) {

18 
uiZ
 = 0;

20 
sign
 = ( 
a
 < 0 );

21 
absA
 = 
sign
 ? - 
a
 :á;

22 
shi·Cou¡
 = 
	`so·Êﬂt_cou¡LódögZîos32
–
absA
 ) + 21;

23 
uiZ
 =

24 
	`∑ckToF64UI
(

25 
sign
, 0x432 - 
shi·Cou¡
, (
uöt_Á°64_t
Ë
absA
<<shiftCount );

27 
uZ
.
ui
 = 
uiZ
;

28  
uZ
.
f
;

30 
	}
}

	@softfloat/i64_to_f32.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"so·Êﬂt.h
"

9 
Êﬂt32_t
 
	$i64_to_f32
–
öt_Á°64_t
 
a
 )

11 
boﬁ
 
sign
;

12 
uöt_Á°64_t
 
absA
;

13 
shi·Cou¡
;

14 
ui32_f32
 
u
;

15 
uöt_Á°32_t
 
sig
;

17 
sign
 = ( 
a
 < 0 );

18 
absA
 = 
sign
 ? - (
uöt_Á°64_t
Ë
a
 :á;

19 
shi·Cou¡
 = 
	`so·Êﬂt_cou¡LódögZîos64
–
absA
 ) - 40;

20 i‡–0 <
shi·Cou¡
 ) {

21 
u
.
ui
 =

22 
a
 ? 
	`∑ckToF32UI
(

23 
sign
, 0x95 - 
shi·Cou¡
, (
uöt_Á°32_t
Ë
absA
<<shiftCount )

25  
u
.
f
;

27 
shi·Cou¡
 += 7;

28 
sig
 =

29 –
shi·Cou¡
 < 0 )

30 ? 
	`so·Êﬂt_sh‹tShi·64RightJam
–
absA
, - 
shi·Cou¡
 )

31 : (
uöt_Á°32_t
Ë
absA
<<
shi·Cou¡
;

32  
	`so·Êﬂt_roundPackToF32
–
sign
, 0x9C - 
shi·Cou¡
, 
sig
 );

35 
	}
}

	@softfloat/i64_to_f64.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
Êﬂt64_t
 
	$i64_to_f64
–
öt_Á°64_t
 
a
 )

10 
boﬁ
 
sign
;

11 
ui64_f64
 
uZ
;

13 
sign
 = ( 
a
 < 0 );

14 i‡–! ( 
a
 & 
	`UINT64_C
( 0x7FFFFFFFFFFFFFFF ) ) ) {

15 
uZ
.
ui
 = 
sign
 ? 
	`∑ckToF64UI
( 1, 0x43E, 0 ) : 0;

16  
uZ
.
f
;

18  
	`so·Êﬂt_n‹mRoundPackToF64
–
sign
, 0x43C, sig¿? - 
a
 :á );

20 
	}
}

	@softfloat/internals.h

4 
	~"so·Êﬂt_ty≥s.h
"

6 
	uui32_f32
 { 
uöt32_t
 
	mui
; 
Êﬂt32_t
 
	mf
; };

7 
	uui64_f64
 { 
uöt64_t
 
	mui
; 
Êﬂt64_t
 
	mf
; };

8 #ifde‡
LITTLEENDIAN


9 
	uui128_f128
 { 
uöt64_t
 
	mui0
, 
	mui64
; 
Êﬂt128_t
 
	mf
; };

11 
	uui128_f128
 { 
uöt64_t
 
	mui64
, 
	mui0
; 
Êﬂt128_t
 
	mf
; };

14 
uöt_Á°32_t


15 
so·Êﬂt_roundPackToUI32
–
boﬁ
, 
uöt_Á°64_t
, 
öt_Á°8_t
, bool );

16 
uöt_Á°64_t


17 
so·Êﬂt_roundPackToUI64
(

18 
boﬁ
, 
uöt_Á°64_t
, uöt_Á°64_t, 
öt_Á°8_t
, bool );

29 
öt_Á°32_t


30 
so·Êﬂt_roundPackToI32
–
boﬁ
, 
uöt_Á°64_t
, 
öt_Á°8_t
, bool );

42 
öt_Á°64_t


43 
so·Êﬂt_roundPackToI64
(

44 
boﬁ
, 
uöt_Á°64_t
, uöt_Á°64_t, 
öt_Á°8_t
, bool );

49 
	#signF32UI
–
a
 ) ((
boﬁ
)((
uöt32_t
)◊)>>31))

	)

53 
	#expF32UI
–
a
 ) ((
öt_Á°16_t
)(◊)>>23)&0xFF)

	)

57 
	#‰acF32UI
–
a
 ) (◊)&0x007FFFFF)

	)

68 
	#∑ckToF32UI
–
sign
, 
exp
, 
sig
 ) (((
uöt32_t
)(sign)<<31)+((uöt32_t)”xp)<<23)+(sig))

	)

76 
	sexp16_sig32
 { 
öt_Á°16_t
 
	mexp
; 
uöt_Á°32_t
 
	msig
; };

77 
exp16_sig32
 
so·Êﬂt_n‹mSubn‹mÆF32Sig
–
uöt_Á°32_t
 );

100 
Êﬂt32_t
 
so·Êﬂt_roundPackToF32
–
boﬁ
, 
öt_Á°16_t
, 
uöt_Á°32_t
 );

109 
Êﬂt32_t
 
so·Êﬂt_n‹mRoundPackToF32
–
boﬁ
, 
öt_Á°16_t
, 
uöt_Á°32_t
 );

118 
Êﬂt32_t
 
so·Êﬂt_addMagsF32
–
uöt_Á°32_t
, uöt_Á°32_t, 
boﬁ
 );

126 
Êﬂt32_t
 
so·Êﬂt_subMagsF32
–
uöt_Á°32_t
, uöt_Á°32_t, 
boﬁ
 );

131 
	#signF64UI
–
a
 ) ((
boﬁ
)((
uöt64_t
)◊)>>63))

	)

135 
	#expF64UI
–
a
 ) ((
öt_Á°16_t
)(◊)>>52)&0x7FF)

	)

139 
	#‰acF64UI
–
a
 ) (◊)&
	`UINT64_C
(0x000FFFFFFFFFFFFF))

	)

150 
	#∑ckToF64UI
–
sign
, 
exp
, 
sig
 ) (((
uöt64_t
)(sign)<<63)+((uöt64_t)”xp)<<52)+(sig))

	)

158 
	sexp16_sig64
 { 
öt_Á°16_t
 
	mexp
; 
uöt_Á°64_t
 
	msig
; };

159 
exp16_sig64
 
so·Êﬂt_n‹mSubn‹mÆF64Sig
–
uöt_Á°64_t
 );

182 
Êﬂt64_t
 
so·Êﬂt_roundPackToF64
–
boﬁ
, 
öt_Á°16_t
, 
uöt_Á°64_t
 );

191 
Êﬂt64_t
 
so·Êﬂt_n‹mRoundPackToF64
–
boﬁ
, 
öt_Á°16_t
, 
uöt_Á°64_t
 );

200 
Êﬂt64_t
 
so·Êﬂt_addMagsF64
–
uöt_Á°64_t
, uöt_Á°64_t, 
boﬁ
 );

208 
Êﬂt64_t
 
so·Êﬂt_subMagsF64
–
uöt_Á°64_t
, uöt_Á°64_t, 
boﬁ
 );

	@softfloat/platform.h

37 
	#LITTLEENDIAN


	)

39 #i‚de‡
UINT64_C


40 
	#UINT64_C
(
x
Ë(x ## 
ULL
)

	)

41 
	#INT64_C
(
x
Ë(x ## 
LL
)

	)

	@softfloat/primitives.h

35 
	~<°dboﬁ.h
>

36 
	~<°döt.h
>

41 #ifde‡
LITTLEENDIAN


42 
	suötx80
 { 
uöt64_t
 
	mv0
; 
uöt16_t
 
	mv64
; };

43 
	suöt128
 { 
uöt64_t
 
	mv0
, 
	mv64
; };

44 
	suöt192
 { 
uöt64_t
 
	mv0
, 
	mv64
, 
	mv128
; };

45 
	suöt256
 { 
uöt64_t
 
	mv0
, 
	mv64
, 
	mv128
, 
	mv192
; };

47 
	suötx80
 { 
uöt16_t
 
	mv64
; 
uöt64_t
 
	mv0
; };

48 
	suöt128
 { 
uöt64_t
 
	mv64
, 
	mv0
; };

49 
	suöt192
 { 
uöt64_t
 
	mv128
, 
	mv64
, 
	mv0
; };

50 
	suöt256
 { 
uöt64_t
 
	mv256
, 
	mv128
, 
	mv64
, 
	mv0
; };

53 
	suöt64_exåa
 { 
uöt64_t
 
	mv
, 
	mexåa
; };

54 
	suöt128_exåa
 { 
uöt64_t
 
	mv64
; uöt64_à
	mv0
; uöt64_à
	mexåa
; };

65 #i‡
deföed
 
INLINE_LEVEL
 && ( 1 <= INLINE_LEVEL )

66 
INLINE
 
boﬁ


67 
	$so·Êﬂt_eq128
–
uöt64_t
 
a64
, uöt64_à
a0
, uöt64_à
b64
, uöt64_à
b0
 )

68 {  ( 
a64
 =
b64
 ) && ( 
a0
 =
b0
 ); 
	}
}

70 
boﬁ
 
so·Êﬂt_eq128
–
uöt64_t
, uint64_t, uint64_t, uint64_t );

78 #i‡
deföed
 
INLINE_LEVEL
 && ( 1 <= INLINE_LEVEL )

79 
INLINE
 
boﬁ


80 
	$so·Êﬂt_À128
–
uöt64_t
 
a64
, uöt64_à
a0
, uöt64_à
b64
, uöt64_à
b0
 )

81 {  ( 
a64
 < 
b64
 ) || ( (á64 =b64 ) && ( 
a0
 <
b0
 ) ); 
	}
}

83 
boﬁ
 
so·Êﬂt_À128
–
uöt64_t
, uint64_t, uint64_t, uint64_t );

91 #i‡
deföed
 
INLINE_LEVEL
 && ( 1 <= INLINE_LEVEL )

92 
INLINE
 
boﬁ


93 
	$so·Êﬂt_…128
–
uöt64_t
 
a64
, uöt64_à
a0
, uöt64_à
b64
, uöt64_à
b0
 )

94 {  ( 
a64
 < 
b64
 ) || ( (á64 =b64 ) && ( 
a0
 < 
b0
 ) ); 
	}
}

96 
boﬁ
 
so·Êﬂt_…128
–
uöt64_t
, uint64_t, uint64_t, uint64_t );

105 #i‡
deföed
 
INLINE_LEVEL
 && ( 2 <= INLINE_LEVEL )

106 
INLINE
 
uöt128


107 
	$so·Êﬂt_sh‹tShi·128Le·
–
uöt64_t
 
a64
, uöt64_à
a0
, 
cou¡
 )

109 
uöt128
 
z
;

110 
z
.
v64
 = 
a64
<<
cou¡
 | 
a0
>>( ( - count ) & 63 );

111 
z
.
v0
 = 
a0
<<
cou¡
;

112  
z
;

113 
	}
}

115 
uöt128
 
so·Êﬂt_sh‹tShi·128Le·
–
uöt64_t
, uint64_t, );

125 #i‡
deföed
 
INLINE_LEVEL
 && ( 3 <= INLINE_LEVEL )

126 
INLINE
 
uöt192


127 
	$so·Êﬂt_sh‹tShi·192Le·
(

128 
uöt64_t
 
a128
, uöt64_à
a64
, uöt64_à
a0
, 
cou¡
 )

130 
√gCou¡
 = - 
cou¡
;

131 
uöt192
 
z
;

132 
z
.
v128
 = 
a128
<<
cou¡
 | 
a64
>>–
√gCou¡
 & 63 );

133 
z
.
v64
 = 
a64
<<
cou¡
 | 
a0
>>–
√gCou¡
 & 63 );

134 
z
.
v0
 = 
a0
<<
cou¡
;

135  
z
;

136 
	}
}

138 
uöt192


139 
so·Êﬂt_sh‹tShi·192Le·
–
uöt64_t
, uint64_t, uint64_t, );

150 #i‡
deföed
 
INLINE_LEVEL
 && ( 2 <= INLINE_LEVEL )

151 
INLINE
 
uöt32_t
 
	$so·Êﬂt_shi·32RightJam
–
uöt32_t
 
a
, 
cou¡
 )

154 –
cou¡
 < 32 )

155 ? 
a
>>
cou¡
 | ( (
uöt32_t
) (á<<( ( - count ) & 31 ) ) != 0 )

156 : ( 
a
 != 0 );

157 
	}
}

159 
uöt32_t
 
so·Êﬂt_shi·32RightJam
( uint32_t, );

165 #i‡
deföed
 
INLINE


166 
INLINE
 
uöt32_t
 
	$so·Êﬂt_sh‹tShi·32Right1Jam
–
uöt32_t
 
a
 )

167 {  
a
>>1 | (á & 1 ); 
	}
}

169 
uöt32_t
 
so·Êﬂt_sh‹tShi·32Right1Jam
( uint32_t );

180 #i‡
deföed
 
INLINE_LEVEL
 && ( 3 <= INLINE_LEVEL )

181 
INLINE
 
uöt64_t
 
	$so·Êﬂt_shi·64RightJam
–
uöt64_t
 
a
, 
cou¡
 )

184 –
cou¡
 < 64 )

185 ? 
a
>>
cou¡
 | ( (
uöt64_t
) (á<<( ( - count ) & 63 ) ) != 0 )

186 : ( 
a
 != 0 );

187 
	}
}

189 
uöt64_t
 
so·Êﬂt_shi·64RightJam
( uint64_t, );

195 #i‡
deföed
 
INLINE_LEVEL
 && ( 2 <= INLINE_LEVEL )

196 
INLINE
 
uöt64_t


197 
	$so·Êﬂt_sh‹tShi·64RightJam
–
uöt64_t
 
a
, 
cou¡
 )

198 {  
a
>>
cou¡
 | ( (á & ( ( (
uöt64_t
Ë1<<cou¡ ) - 1 ) ) !0 ); 
	}
}

200 
uöt64_t
 
so·Êﬂt_sh‹tShi·64RightJam
( uint64_t, );

219 #i‡
deföed
 
INLINE_LEVEL
 && ( 3 <= INLINE_LEVEL )

220 
INLINE
 
uöt64_exåa


221 
	$so·Êﬂt_shi·64ExåaRightJam
(

222 
uöt64_t
 
a
, uöt64_à
exåa
, 
cou¡
 )

224 
uöt64_exåa
 
z
;

225 i‡–
cou¡
 < 64 ) {

226 
z
.
v
 = 
a
>>
cou¡
;

227 
z
.
exåa
 = 
a
<<––- 
cou¡
 ) & 63 );

229 
z
.
v
 = 0;

230 
z
.
exåa
 = ( 
cou¡
 =64 ) ? 
a
 : (á != 0 );

232 
z
.
exåa
 |= (Éxtra != 0 );

233  
z
;

234 
	}
}

236 
uöt64_exåa


237 
so·Êﬂt_shi·64ExåaRightJam
–
uöt64_t
, uint64_t, );

243 #i‡
deföed
 
INLINE_LEVEL
 && ( 2 <= INLINE_LEVEL )

244 
INLINE
 
uöt64_exåa


245 
	$so·Êﬂt_sh‹tShi·64ExåaRightJam
(

246 
uöt64_t
 
a
, uöt64_à
exåa
, 
cou¡
 )

248 
uöt64_exåa
 
z
;

249 
z
.
v
 = 
a
>>
cou¡
;

250 
z
.
exåa
 = 
a
<<––- 
cou¡
 ) & 63 ) | (Éxtra != 0 );

251  
z
;

252 
	}
}

254 
uöt64_exåa


255 
so·Êﬂt_sh‹tShi·64ExåaRightJam
–
uöt64_t
, uint64_t, );

268 #i‡
deföed
 
INLINE_LEVEL
 && ( 2 <= INLINE_LEVEL )

269 
INLINE
 
uöt128


270 
	$so·Êﬂt_sh‹tShi·128Right
–
uöt64_t
 
a64
, uöt64_à
a0
, 
cou¡
 )

272 
uöt128
 
z
;

273 
z
.
v64
 = 
a64
>>
cou¡
;

274 
z
.
v0
 = 
a64
<<––- 
cou¡
 ) & 63 ) | 
a0
>>count;

275  
z
;

276 
	}
}

278 
uöt128


279 
so·Êﬂt_sh‹tShi·128Right
–
uöt64_t
, uint64_t, );

292 #i‡
deföed
 
INLINE_LEVEL
 && ( 4 <= INLINE_LEVEL )

293 
INLINE
 
uöt128


294 
	$so·Êﬂt_shi·128RightJam
–
uöt64_t
 
a64
, uöt64_à
a0
, 
cou¡
 )

296 
√gCou¡
;

297 
uöt128
 
z
;

298 i‡–
cou¡
 < 64 ) {

299 
√gCou¡
 = - 
cou¡
;

300 
z
.
v64
 = 
a64
>>–
cou¡
 & 63 );

301 
z
.
v0
 =

302 
a64
<<–
√gCou¡
 & 63 ) | 
a0
>>
cou¡


303 | ( (
uöt64_t
Ë–
a0
<<–
√gCou¡
 & 63 ) ) != 0 );

305 
z
.
v64
 = 0;

306 
z
.
v0
 =

307 –
cou¡
 < 128 )

308 ? 
a64
>>–
cou¡
 & 63 )

309 | ( ( ( 
a64
 & ( ( (
uöt64_t
Ë1<<–
cou¡
 & 63 ) ) - 1 ) )

310 | 
a0
 )

312 : ( ( 
a64
 | 
a0
 ) != 0 );

314  
z
;

315 
	}
}

317 
uöt128


318 
so·Êﬂt_shi·128RightJam
–
uöt64_t
, uint64_t, );

339 #i‡
deföed
 
INLINE_LEVEL
 && ( 5 <= INLINE_LEVEL )

340 
INLINE
 
uöt128_exåa


341 
	$so·Êﬂt_shi·128ExåaRightJam
(

342 
uöt64_t
 
a64
, uöt64_à
a0
, uöt64_à
exåa
, 
cou¡
 )

344 
√gCou¡
 = - 
cou¡
;

345 
uöt128_exåa
 
z
;

346 i‡–
cou¡
 < 64 ) {

347 
z
.
v64
 = 
a64
>>
cou¡
;

348 
z
.
v0
 = 
a64
<<–
√gCou¡
 & 63 ) | 
a0
>>
cou¡
;

349 
z
.
exåa
 = 
a0
<<–
√gCou¡
 & 63 );

351 
z
.
v64
 = 0;

352 i‡–
cou¡
 == 64 ) {

353 
z
.
v0
 = 
a64
;

354 
z
.
exåa
 = 
a0
;

356 
exåa
 |
a0
;

357 i‡–
cou¡
 < 128 ) {

358 
z
.
v0
 = 
a64
>>–
cou¡
 & 63 );

359 
z
.
exåa
 = 
a64
<<–
√gCou¡
 & 63 );

361 
z
.
v0
 = 0;

362 
z
.
exåa
 = ( 
cou¡
 =128 ) ? 
a64
 : (á64 != 0 );

366 
z
.
exåa
 |= (Éxtra != 0 );

367  
z
;

368 
	}
}

370 
uöt128_exåa


371 
so·Êﬂt_shi·128ExåaRightJam
–
uöt64_t
, uint64_t, uint64_t, );

377 #i‡
deföed
 
INLINE_LEVEL
 && ( 3 <= INLINE_LEVEL )

378 
INLINE
 
uöt128_exåa


379 
	$so·Êﬂt_sh‹tShi·128ExåaRightJam
(

380 
uöt64_t
 
a64
, uöt64_à
a0
, uöt64_à
exåa
, 
cou¡
 )

382 
√gCou¡
 = - 
cou¡
;

383 
uöt128_exåa
 
z
;

384 
z
.
v64
 = 
a64
>>
cou¡
;

385 
z
.
v0
 = 
a64
<<–
√gCou¡
 & 63 ) | 
a0
>>
cou¡
;

386 
z
.
exåa
 = 
a0
<<–
√gCou¡
 & 63 ) | (Éxtra != 0 );

387  
z
;

388 
	}
}

390 
uöt128_exåa


391 
so·Êﬂt_sh‹tShi·128ExåaRightJam
(

392 
uöt64_t
, uint64_t, uint64_t, );

395 c⁄° 
uöt8_t
 
so·Êﬂt_cou¡LódögZîos8
[ 256 ];

401 #i‡
deföed
 
INLINE_LEVEL
 && ( 2 <= INLINE_LEVEL )

402 
INLINE
 
	$so·Êﬂt_cou¡LódögZîos32
–
uöt32_t
 
a
 )

404 
cou¡
 = 0;

405 i‡–
a
 < 0x10000 ) {

406 
cou¡
 = 16;

407 
a
 <<= 16;

409 i‡–
a
 < 0x1000000 ) {

410 
cou¡
 += 8;

411 
a
 <<= 8;

413 
cou¡
 +
so·Êﬂt_cou¡LódögZîos8
[ 
a
>>24 ];

414  
cou¡
;

415 
	}
}

417 
so·Êﬂt_cou¡LódögZîos32
–
uöt32_t
 );

424 #i‡
deföed
 
INLINE_LEVEL
 && ( 4 <= INLINE_LEVEL )

425 
INLINE
 
	$so·Êﬂt_cou¡LódögZîos64
–
uöt64_t
 
a
 )

427 
cou¡
 = 32;

428 
uöt32_t
 
a32
 = 
a
;

429 i‡–
	`UINT64_C
–0x100000000 ) <
a
 ) {

430 
cou¡
 = 0;

431 
a32
 = 
a
>>32;

436 i‡–
a32
 < 0x10000 ) {

437 
cou¡
 += 16;

438 
a32
 <<= 16;

440 i‡–
a32
 < 0x1000000 ) {

441 
cou¡
 += 8;

442 
a32
 <<= 8;

444 
cou¡
 +
so·Êﬂt_cou¡LódögZîos8
[ 
a32
>>24 ];

445  
cou¡
;

446 
	}
}

448 
so·Êﬂt_cou¡LódögZîos64
–
uöt64_t
 );

457 #i‡
deföed
 
INLINE_LEVEL
 && ( 2 <= INLINE_LEVEL )

458 
INLINE
 
uöt128


459 
	$so·Êﬂt_add128
–
uöt64_t
 
a64
, uöt64_à
a0
, uöt64_à
b64
, uöt64_à
b0
 )

461 
uöt128
 
z
;

462 
z
.
v0
 = 
a0
 + 
b0
;

463 
z
.
v64
 = 
a64
 + 
b64
;

464 
z
.
v64
 +–z.
v0
 < 
a0
 );

465  
z
;

466 
	}
}

468 
uöt128
 
so·Êﬂt_add128
–
uöt64_t
, uint64_t, uint64_t, uint64_t );

478 #i‡
deföed
 
INLINE_LEVEL
 && ( 3 <= INLINE_LEVEL )

479 
INLINE
 
uöt192


480 
	$so·Êﬂt_add192
(

481 
uöt64_t
 
a128
,

482 
uöt64_t
 
a64
,

483 
uöt64_t
 
a0
,

484 
uöt64_t
 
b128
,

485 
uöt64_t
 
b64
,

486 
uöt64_t
 
b0


489 
uöt192
 
z
;

490 
ˇºy64
, 
ˇºy128
;

491 
z
.
v0
 = 
a0
 + 
b0
;

492 
ˇºy64
 = ( 
z
.
v0
 < 
a0
 );

493 
z
.
v64
 = 
a64
 + 
b64
;

494 
ˇºy128
 = ( 
z
.
v64
 < 
a64
 );

495 
z
.
v128
 = 
a128
 + 
b128
;

496 
z
.
v64
 +
ˇºy64
;

497 
ˇºy128
 +–
z
.
v64
 < 
ˇºy64
 );

498 
z
.
v128
 +
ˇºy128
;

499  
z
;

500 
	}
}

502 
uöt192


503 
so·Êﬂt_add192
(

504 
uöt64_t
, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t );

514 #i‡
deföed
 
INLINE_LEVEL
 && ( 2 <= INLINE_LEVEL )

515 
INLINE
 
uöt128


516 
	$so·Êﬂt_sub128
–
uöt64_t
 
a64
, uöt64_à
a0
, uöt64_à
b64
, uöt64_à
b0
 )

518 
uöt128
 
z
;

519 
z
.
v0
 = 
a0
 - 
b0
;

520 
z
.
v64
 = 
a64
 - 
b64
;

521 
z
.
v64
 -–
a0
 < 
b0
 );

522  
z
;

523 
	}
}

525 
uöt128
 
so·Êﬂt_sub128
–
uöt64_t
, uint64_t, uint64_t, uint64_t );

535 #i‡
deföed
 
INLINE_LEVEL
 && ( 3 <= INLINE_LEVEL )

536 
INLINE
 
uöt192


537 
	$so·Êﬂt_sub192
(

538 
uöt64_t
 
a128
,

539 
uöt64_t
 
a64
,

540 
uöt64_t
 
a0
,

541 
uöt64_t
 
b128
,

542 
uöt64_t
 
b64
,

543 
uöt64_t
 
b0


546 
uöt192
 
z
;

547 
b‹row64
, 
b‹row128
;

548 
z
.
v0
 = 
a0
 - 
b0
;

549 
b‹row64
 = ( 
a0
 < 
b0
 );

550 
z
.
v64
 = 
a64
 - 
b64
;

551 
b‹row128
 = ( 
a64
 < 
b64
 );

552 
z
.
v128
 = 
a128
 - 
b128
;

553 
b‹row128
 +–
z
.
v64
 < 
b‹row64
 );

554 
z
.
v64
 -
b‹row64
;

555 
z
.
v128
 -
b‹row128
;

556  
z
;

557 
	}
}

559 
uöt192


560 
so·Êﬂt_sub192
(

561 
uöt64_t
, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t );

569 #i‡
deföed
 
INLINE_LEVEL
 && ( 4 <= INLINE_LEVEL )

570 
INLINE
 
uöt128
 
	$so·Êﬂt_mul64To128
–
uöt64_t
 
a
, uöt64_à
b
 )

572 
uöt32_t
 
a32
 = 
a
>>32;

573 
uöt32_t
 
a0
 = 
a
;

574 
uöt32_t
 
b32
 = 
b
>>32;

575 
uöt32_t
 
b0
 = 
b
;

576 
uöt128
 
z
;

577 
uöt64_t
 
mid1
, 
mid2
, 
mid
;

578 
z
.
v0
 = (
uöt64_t
Ë
a0
 * 
b0
;

579 
mid1
 = (
uöt64_t
Ë
a32
 * 
b0
;

580 
mid2
 = (
uöt64_t
Ë
a0
 * 
b32
;

581 
z
.
v64
 = (
uöt64_t
Ë
a32
 * 
b32
;

582 
mid
 = 
mid1
 + 
mid2
;

583 
z
.
v64
 +–(
uöt64_t
Ë–
mid
 < 
mid1
 ) )<<32 | mid>>32;

584 
mid
 <<= 32;

585 
z
.
v0
 +
mid
;

586 
z
.
v64
 +–z.
v0
 < 
mid
 );

587  
z
;

588 
	}
}

590 
uöt128
 
so·Êﬂt_mul64To128
–
uöt64_t
, uint64_t );

599 
uöt192
 
so·Êﬂt_mul128By64To192
–
uöt64_t
, uint64_t, uint64_t );

606 
uöt256
 
so·Êﬂt_mul128To256
–
uöt64_t
, uint64_t, uint64_t, uint64_t );

616 
uöt64_t
 
so·Êﬂt_e°im©eDiv128To64
( uint64_t, uint64_t, uint64_t );

627 
uöt32_t
 
so·Êﬂt_e°im©eSqπ32
( , uint32_t );

	@softfloat/s_add128.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 
uöt128


7 
	$so·Êﬂt_add128
–
uöt64_t
 
a64
, uöt64_à
a0
, uöt64_à
b64
, uöt64_à
b0
 )

9 
uöt128
 
z
;

11 
z
.
v0
 = 
a0
 + 
b0
;

12 
z
.
v64
 = 
a64
 + 
b64
;

13 
z
.
v64
 +–z.
v0
 < 
a0
 );

14  
z
;

16 
	}
}

	@softfloat/s_add192.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 
uöt192


7 
	$so·Êﬂt_add192
(

8 
uöt64_t
 
a128
,

9 
uöt64_t
 
a64
,

10 
uöt64_t
 
a0
,

11 
uöt64_t
 
b128
,

12 
uöt64_t
 
b64
,

13 
uöt64_t
 
b0


16 
uöt192
 
z
;

17 
ˇºy64
, 
ˇºy128
;

19 
z
.
v0
 = 
a0
 + 
b0
;

20 
ˇºy64
 = ( 
z
.
v0
 < 
a0
 );

21 
z
.
v64
 = 
a64
 + 
b64
;

22 
ˇºy128
 = ( 
z
.
v64
 < 
a64
 );

23 
z
.
v128
 = 
a128
 + 
b128
;

24 
z
.
v64
 +
ˇºy64
;

25 
ˇºy128
 +–
z
.
v64
 < 
ˇºy64
 );

26 
z
.
v128
 +
ˇºy128
;

27  
z
;

29 
	}
}

	@softfloat/s_addMagsF32.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"•ecülize.h
"

9 
Êﬂt32_t


10 
	$so·Êﬂt_addMagsF32
–
uöt_Á°32_t
 
uiA
, uöt_Á°32_à
uiB
, 
boﬁ
 
signZ
 )

12 
öt_Á°16_t
 
expA
;

13 
uöt_Á°32_t
 
sigA
;

14 
öt_Á°16_t
 
expB
;

15 
uöt_Á°32_t
 
sigB
;

16 
öt_Á°16_t
 
expDiff
;

17 
uöt_Á°32_t
 
uiZ
;

18 
öt_Á°16_t
 
expZ
;

19 
uöt_Á°32_t
 
sigZ
;

20 
ui32_f32
 
uZ
;

22 
expA
 = 
	`expF32UI
–
uiA
 );

23 
sigA
 = 
	`‰acF32UI
–
uiA
 );

24 
expB
 = 
	`expF32UI
–
uiB
 );

25 
sigB
 = 
	`‰acF32UI
–
uiB
 );

26 
expDiff
 = 
expA
 - 
expB
;

27 
sigA
 <<= 6;

28 
sigB
 <<= 6;

29 i‡–! 
expDiff
 ) {

30 i‡–
expA
 == 0xFF ) {

31 i‡–
sigA
 | 
sigB
 ) 
¥›ag©eNaN
;

32 
uiZ
 = 
uiA
;

33 
uiZ
;

35 i‡–! 
expA
 ) {

36 
uiZ
 = 
	`∑ckToF32UI
–
signZ
, 0, ( 
uiA
 + 
uiB
 ) & 0x7FFFFFFF );

37 
uiZ
;

39 
expZ
 = 
expA
;

40 
sigZ
 = 0x40000000 + 
sigA
 + 
sigB
;

42 i‡–
expDiff
 < 0 ) {

43 i‡–
expB
 == 0xFF ) {

44 i‡–
sigB
 ) 
¥›ag©eNaN
;

45 
uiZ
 = 
	`∑ckToF32UI
–
signZ
, 0xFF, 0 );

46 
uiZ
;

48 
expZ
 = 
expB
;

49 
sigA
 +
expA
 ? 0x20000000 : sigA;

50 
sigA
 = 
	`so·Êﬂt_shi·32RightJam
–sigA, - 
expDiff
 );

52 i‡–
expA
 == 0xFF ) {

53 i‡–
sigA
 ) 
¥›ag©eNaN
;

54 
uiZ
 = 
uiA
;

55 
uiZ
;

57 
expZ
 = 
expA
;

58 
sigB
 +
expB
 ? 0x20000000 : sigB;

59 
sigB
 = 
	`so·Êﬂt_shi·32RightJam
–sigB, 
expDiff
 );

61 
sigZ
 = 0x20000000 + 
sigA
 + 
sigB
;

62 i‡–
sigZ
 < 0x40000000 ) {

63 --
expZ
;

64 
sigZ
 <<= 1;

67  
	`so·Êﬂt_roundPackToF32
–
signZ
, 
expZ
, 
sigZ
 );

68 
¥›ag©eNaN
:

69 
uiZ
 = 
	`so·Êﬂt_¥›ag©eNaNF32UI
–
uiA
, 
uiB
 );

70 
uiZ
:

71 
uZ
.
ui
 = 
uiZ
;

72  
uZ
.
f
;

74 
	}
}

	@softfloat/s_addMagsF64.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"•ecülize.h
"

9 
Êﬂt64_t


10 
	$so·Êﬂt_addMagsF64
–
uöt_Á°64_t
 
uiA
, uöt_Á°64_à
uiB
, 
boﬁ
 
signZ
 )

12 
öt_Á°16_t
 
expA
;

13 
uöt_Á°64_t
 
sigA
;

14 
öt_Á°16_t
 
expB
;

15 
uöt_Á°64_t
 
sigB
;

16 
öt_Á°16_t
 
expDiff
;

17 
uöt_Á°64_t
 
uiZ
;

18 
öt_Á°16_t
 
expZ
;

19 
uöt_Á°64_t
 
sigZ
;

20 
ui64_f64
 
uZ
;

22 
expA
 = 
	`expF64UI
–
uiA
 );

23 
sigA
 = 
	`‰acF64UI
–
uiA
 );

24 
expB
 = 
	`expF64UI
–
uiB
 );

25 
sigB
 = 
	`‰acF64UI
–
uiB
 );

26 
expDiff
 = 
expA
 - 
expB
;

27 
sigA
 <<= 9;

28 
sigB
 <<= 9;

29 i‡–! 
expDiff
 ) {

30 i‡–
expA
 == 0x7FF ) {

31 i‡–
sigA
 | 
sigB
 ) 
¥›ag©eNaN
;

32 
uiZ
 = 
uiA
;

33 
uiZ
;

35 i‡–! 
expA
 ) {

36 
uiZ
 =

37 
	`∑ckToF64UI
(

38 
signZ
, 0, ( 
uiA
 + 
uiB
 ) & 
	`UINT64_C
( 0x7FFFFFFFFFFFFFFF ) );

39 
uiZ
;

41 
expZ
 = 
expA
;

42 
sigZ
 = 
	`UINT64_C
–0x4000000000000000 ) + 
sigA
 + 
sigB
;

44 i‡–
expDiff
 < 0 ) {

45 i‡–
expB
 == 0x7FF ) {

46 i‡–
sigB
 ) 
¥›ag©eNaN
;

47 
uiZ
 = 
	`∑ckToF64UI
–
signZ
, 0x7FF, 0 );

48 
uiZ
;

50 
expZ
 = 
expB
;

51 
sigA
 +
expA
 ? 
	`UINT64_C
( 0x2000000000000000 ) : sigA;

52 
sigA
 = 
	`so·Êﬂt_shi·64RightJam
–sigA, - 
expDiff
 );

54 i‡–
expA
 == 0x7FF ) {

55 i‡–
sigA
 ) 
¥›ag©eNaN
;

56 
uiZ
 = 
uiA
;

57 
uiZ
;

59 
expZ
 = 
expA
;

60 
sigB
 +
expB
 ? 
	`UINT64_C
( 0x2000000000000000 ) : sigB;

61 
sigB
 = 
	`so·Êﬂt_shi·64RightJam
–sigB, 
expDiff
 );

63 
sigZ
 = 
	`UINT64_C
–0x2000000000000000 ) + 
sigA
 + 
sigB
;

64 i‡–
sigZ
 < 
	`UINT64_C
( 0x4000000000000000 ) ) {

65 --
expZ
;

66 
sigZ
 <<= 1;

69  
	`so·Êﬂt_roundPackToF64
–
signZ
, 
expZ
, 
sigZ
 );

70 
¥›ag©eNaN
:

71 
uiZ
 = 
	`so·Êﬂt_¥›ag©eNaNF64UI
–
uiA
, 
uiB
 );

72 
uiZ
:

73 
uZ
.
ui
 = 
uiZ
;

74  
uZ
.
f
;

76 
	}
}

	@softfloat/s_commonNaNToF32UI.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"•ecülize.h
"

11 
uöt_Á°32_t
 
	$so·Êﬂt_comm⁄NaNToF32UI
–
comm⁄NaN
 
a
 )

14  (
uöt_Á°32_t
Ë
a
.
sign
<<31 | 0x7FFFFFFF;

16 
	}
}

	@softfloat/s_commonNaNToF64UI.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"•ecülize.h
"

11 
uöt_Á°64_t
 
	$so·Êﬂt_comm⁄NaNToF64UI
–
comm⁄NaN
 
a
 )

15 (
uöt_Á°64_t
Ë
a
.
sign
<<63 | 
	`UINT64_C
( 0x7FFFFFFFFFFFFFFF );

17 
	}
}

	@softfloat/s_countLeadingZeros32.c

2 
	~<°döt.h
>

3 
	~"¥imôives.h
"

5 
	$so·Êﬂt_cou¡LódögZîos32
–
uöt32_t
 
a
 )

7 
cou¡
;

9 
cou¡
 = 0;

10 i‡–
a
 < 0x10000 ) {

11 
cou¡
 = 16;

12 
a
 <<= 16;

14 i‡–
a
 < 0x1000000 ) {

15 
cou¡
 += 8;

16 
a
 <<= 8;

18 
cou¡
 +
so·Êﬂt_cou¡LódögZîos8
[ 
a
>>24 ];

19  
cou¡
;

21 
	}
}

	@softfloat/s_countLeadingZeros64.c

2 
	~<°döt.h
>

3 
	~"¥imôives.h
"

4 
	~"∂©f‹m.h
"

6 
	$so·Êﬂt_cou¡LódögZîos64
–
uöt64_t
 
a
 )

8 
cou¡
;

9 
uöt32_t
 
a32
;

11 
cou¡
 = 32;

12 
a32
 = 
a
;

13 i‡–
	`UINT64_C
–0x100000000 ) <
a
 ) {

14 
cou¡
 = 0;

15 
a32
 = 
a
>>32;

20 i‡–
a32
 < 0x10000 ) {

21 
cou¡
 += 16;

22 
a32
 <<= 16;

24 i‡–
a32
 < 0x1000000 ) {

25 
cou¡
 += 8;

26 
a32
 <<= 8;

28 
cou¡
 +
so·Êﬂt_cou¡LódögZîos8
[ 
a32
>>24 ];

29  
cou¡
;

31 
	}
}

	@softfloat/s_countLeadingZeros8.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 c⁄° 
uöt8_t
 
	gso·Êﬂt_cou¡LódögZîos8
[ 256 ] = {

	@softfloat/s_eq128.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

7 
boﬁ
 
	$so·Êﬂt_eq128
–
uöt64_t
 
a64
, uöt64_à
a0
, uöt64_à
b64
, uöt64_à
b0
 )

10  ( 
a64
 =
b64
 ) && ( 
a0
 =
b0
 );

12 
	}
}

	@softfloat/s_estimateDiv128To64.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 
uöt64_t
 
	$so·Êﬂt_e°im©eDiv128To64
–
uöt64_t
 
a64
, uöt64_à
a0
, uöt64_à
b
 )

8 
uöt32_t
 
b32
;

9 
uöt64_t
 
z
;

10 
uöt128
 
ãrm
, 
ªm
;

11 
uöt64_t
 
ªm32
;

13 i‡–
b
 <
a64
 )  
	`UINT64_C
( 0xFFFFFFFFFFFFFFFF );

14 
b32
 = 
b
>>32;

15 
z
 = ( (
uöt64_t
Ë
b32
<<32 <
a64
 ) ? 
	`UINT64_C
( 0xFFFFFFFF00000000 )

16 : ( 
a64
 / 
b32
 )<<32;

17 
ãrm
 = 
	`so·Êﬂt_mul64To128
–
b
, 
z
 );

18 
ªm
 = 
	`so·Êﬂt_sub128
–
a64
, 
a0
, 
ãrm
.
v64
,Åîm.
v0
 );

19  
	`UINT64_C
–0x8000000000000000 ) <
ªm
.
v64
 ) {

20 
z
 -
	`UINT64_C
( 0x100000000 );

21 
ªm
 = 
	`so·Êﬂt_add128
–ªm.
v64
,Ñem.
v0
, 
b32
, (
uöt64_t
Ë–
b
<<32 ) );

23 
ªm32
 = ( 
ªm
.
v64
<<32 ) | (Ñem.
v0
>>32 );

24 
z
 |–(
uöt64_t
Ë
b32
<<32 <
ªm32
 ) ? 0xFFFFFFFF :Ñem32 / b32;

25  
z
;

27 
	}
}

	@softfloat/s_estimateSqrt32.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 
uöt32_t
 
	$so·Êﬂt_e°im©eSqπ32
–
expA
, 
uöt32_t
 
a
 )

8 c⁄° 
uöt16_t
 
sqπOddAdju°míts
[] = {

12 c⁄° 
uöt16_t
 
sqπEvíAdju°míts
[] = {

16 
ödex
;

17 
uöt32_t
 
z
;

18 uni⁄ { 
uöt32_t
 
ui
; 
öt32_t
 
i
; } 
u32
;

20 
ödex
 = ( 
a
>>27 ) & 15;

21 i‡–
expA
 & 1 ) {

22 
z
 = 0x4000 + ( 
a
>>17 ) - 
sqπOddAdju°míts
[ 
ödex
 ];

23 
z
 = ( ( 
a
 / z )<<14 ) + ( z<<15 );

24 
a
 >>= 1;

26 
z
 = 0x8000 + ( 
a
>>17 ) - 
sqπEvíAdju°míts
[ 
ödex
 ];

27 
z
 = 
a
 / z + z;

28 
z
 = ( 0x20000 <= z ) ? 0xFFFF8000 : z<<15;

29 i‡–
z
 <
a
 ) {

30 
u32
.
ui
 = 
a
;

31  
u32
.
i
>>1;

34  (
uöt32_t
Ë––(
uöt64_t
Ë
a
<<31 ) / 
z
 ) + ( z>>1 );

36 
	}
}

	@softfloat/s_f32UIToCommonNaN.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"•ecülize.h
"

5 
	~"so·Êﬂt.h
"

12 
comm⁄NaN
 
	$so·Êﬂt_f32UIToComm⁄NaN
–
uöt_Á°32_t
 
uiA
 )

14 
comm⁄NaN
 
z
;

16 i‡–
	`so·Êﬂt_isSigNaNF32UI
–
uiA
 ) ) {

17 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

19 
z
.
sign
 = 
uiA
>>31;

20 
z
.
v64
 = (
uöt_Á°64_t
) 0x7FFFF <<41;

21 
z
.
v0
 = 0;

22  
z
;

24 
	}
}

	@softfloat/s_f64UIToCommonNaN.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"•ecülize.h
"

5 
	~"so·Êﬂt.h
"

12 
comm⁄NaN
 
	$so·Êﬂt_f64UIToComm⁄NaN
–
uöt_Á°64_t
 
uiA
 )

14 
comm⁄NaN
 
z
;

16 i‡–
	`so·Êﬂt_isSigNaNF64UI
–
uiA
 ) ) {

17 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

19 
z
.
sign
 = 
uiA
>>63;

20 
z
.
v64
 = (
uöt_Á°64_t
) 0xFFFFFFFFFFFFF <<12;

21 
z
.
v0
 = 0;

22  
z
;

24 
	}
}

	@softfloat/s_isSigNaNF32UI.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"•ecülize.h
"

7 
boﬁ
 
	$so·Êﬂt_isSigNaNF32UI
–
uöt_Á°32_t
 
ui
 )

10  ( ( 
ui
>>22 & 0x1FF ) == 0x1FE ) && ( ui & 0x003FFFFF );

12 
	}
}

	@softfloat/s_isSigNaNF64UI.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"•ecülize.h
"

7 
boﬁ
 
	$so·Êﬂt_isSigNaNF64UI
–
uöt_Á°64_t
 
ui
 )

11 ––
ui
>>51 & 0xFFF ) == 0xFFE )

12 && ( 
ui
 & 
	`UINT64_C
( 0x0007FFFFFFFFFFFF ) );

14 
	}
}

	@softfloat/s_le128.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

7 
boﬁ
 
	$so·Êﬂt_À128
–
uöt64_t
 
a64
, uöt64_à
a0
, uöt64_à
b64
, uöt64_à
b0
 )

10  ( 
a64
 < 
b64
 ) || ( (á64 =b64 ) && ( 
a0
 <
b0
 ) );

12 
	}
}

	@softfloat/s_lt128.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

7 
boﬁ
 
	$so·Êﬂt_…128
–
uöt64_t
 
a64
, uöt64_à
a0
, uöt64_à
b64
, uöt64_à
b0
 )

10  ( 
a64
 < 
b64
 ) || ( (á64 =b64 ) && ( 
a0
 < 
b0
 ) );

12 
	}
}

	@softfloat/s_mul128By64To192.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 
uöt192


7 
	$so·Êﬂt_mul128By64To192
–
uöt64_t
 
a64
, uöt64_à
a0
, uöt64_à
b
 )

9 
uöt128
 
p0
, 
p64
;

10 
uöt192
 
z
;

12 
p0
 = 
	`so·Êﬂt_mul64To128
–
a0
, 
b
 );

13 
z
.
v0
 = 
p0
.v0;

14 
p64
 = 
	`so·Êﬂt_mul64To128
–
a64
, 
b
 );

15 
z
.
v64
 = 
p64
.
v0
 + 
p0
.v64;

16 
z
.
v128
 = 
p64
.
v64
 + ( z.v64 <Ö64.
v0
 );

17  
z
;

19 
	}
}

	@softfloat/s_mul128To256.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 
uöt256


7 
	$so·Êﬂt_mul128To256
–
uöt64_t
 
a64
, uöt64_à
a0
, uöt64_à
b64
, uöt64_à
b0
 )

9 
uöt128
 
p0
, 
p64
, 
p128
;

10 
uöt256
 
z
;

12 
p0
 = 
	`so·Êﬂt_mul64To128
–
a0
, 
b0
 );

13 
z
.
v0
 = 
p0
.v0;

14 
p64
 = 
	`so·Êﬂt_mul64To128
–
a64
, 
b0
 );

15 
z
.
v64
 = 
p64
.
v0
 + 
p0
.v64;

16 
z
.
v128
 = 
p64
.
v64
 + ( z.v64 <Ö64.
v0
 );

17 
p128
 = 
	`so·Êﬂt_mul64To128
–
a64
, 
b64
 );

18 
z
.
v128
 +
p128
.
v0
;

19 
z
.
v192
 = 
p128
.
v64
 + ( z.
v128
 <Ö128.
v0
 );

20 
p64
 = 
	`so·Êﬂt_mul64To128
–
a0
, 
b64
 );

21 
z
.
v64
 +
p64
.
v0
;

22 
p64
.
v64
 +–
z
.v64 <Ö64.
v0
 );

23 
z
.
v128
 +
p64
.
v64
;

24 
z
.
v192
 +–z.
v128
 < 
p64
.
v64
 );

25  
z
;

27 
	}
}

	@softfloat/s_mul64To128.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 
uöt128
 
	$so·Êﬂt_mul64To128
–
uöt64_t
 
a
, uöt64_à
b
 )

8 
uöt32_t
 
a32
, 
a0
, 
b32
, 
b0
;

9 
uöt128
 
z
;

10 
uöt64_t
 
mid1
, 
mid2
, 
mid
;

12 
a32
 = 
a
>>32;

13 
a0
 = 
a
;

14 
b32
 = 
b
>>32;

15 
b0
 = 
b
;

16 
z
.
v0
 = (
uöt64_t
Ë
a0
 * 
b0
;

17 
mid1
 = (
uöt64_t
Ë
a32
 * 
b0
;

18 
mid2
 = (
uöt64_t
Ë
a0
 * 
b32
;

19 
z
.
v64
 = (
uöt64_t
Ë
a32
 * 
b32
;

20 
mid
 = 
mid1
 + 
mid2
;

21 
z
.
v64
 +–(
uöt64_t
Ë–
mid
 < 
mid1
 ) )<<32 | mid>>32;

22 
mid
 <<= 32;

23 
z
.
v0
 +
mid
;

24 
z
.
v64
 +–z.
v0
 < 
mid
 );

25  
z
;

27 
	}
}

	@softfloat/s_mulAddF32.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"•ecülize.h
"

8 
	~"so·Êﬂt.h
"

10 
Êﬂt32_t


11 
	$so·Êﬂt_mulAddF32
(

12 
›
, 
uöt_Á°32_t
 
uiA
, uöt_Á°32_à
uiB
, uöt_Á°32_à
uiC
 )

14 
boﬁ
 
signA
;

15 
öt_Á°16_t
 
expA
;

16 
uöt_Á°32_t
 
sigA
;

17 
boﬁ
 
signB
;

18 
öt_Á°16_t
 
expB
;

19 
uöt_Á°32_t
 
sigB
;

20 
boﬁ
 
signC
;

21 
öt_Á°16_t
 
expC
;

22 
uöt_Á°32_t
 
sigC
;

23 
boﬁ
 
signProd
;

24 
uöt_Á°32_t
 
magBôs
, 
uiZ
;

25 
exp16_sig32
 
n‹mExpSig
;

26 
öt_Á°16_t
 
expProd
;

27 
uöt_Á°64_t
 
sigProd
;

28 
boﬁ
 
signZ
;

29 
öt_Á°16_t
 
expZ
;

30 
uöt_Á°32_t
 
sigZ
;

31 
öt_Á°16_t
 
expDiff
;

32 
uöt_Á°64_t
 
sigZ64
, 
sigC64
;

33 
shi·Cou¡
;

34 
ui32_f32
 
uZ
;

36 
signA
 = 
	`signF32UI
–
uiA
 );

37 
expA
 = 
	`expF32UI
–
uiA
 );

38 
sigA
 = 
	`‰acF32UI
–
uiA
 );

39 
signB
 = 
	`signF32UI
–
uiB
 );

40 
expB
 = 
	`expF32UI
–
uiB
 );

41 
sigB
 = 
	`‰acF32UI
–
uiB
 );

42 
signC
 = 
	`signF32UI
–
uiC
 ) ^ ( 
›
 =
so·Êﬂt_mulAdd_subC
 );

43 
expC
 = 
	`expF32UI
–
uiC
 );

44 
sigC
 = 
	`‰acF32UI
–
uiC
 );

45 
signProd
 = 
signA
 ^ 
signB
 ^ ( 
›
 =
so·Êﬂt_mulAdd_subProd
 );

46 i‡–
expA
 == 0xFF ) {

47 i‡–
sigA
 || ( ( 
expB
 =0xFF ) && 
sigB
 ) ) 
¥›ag©eNaN_ABC
;

48 
magBôs
 = 
expB
 | 
sigB
;

49 
öfProdArg
;

51 i‡–
expB
 == 0xFF ) {

52 i‡–
sigB
 ) 
¥›ag©eNaN_ABC
;

53 
magBôs
 = 
expA
 | 
sigA
;

54 
öfProdArg
;

56 i‡–
expC
 == 0xFF ) {

57 i‡–
sigC
 ) {

58 
uiZ
 = 0;

59 
¥›ag©eNaN_ZC
;

61 
uiZ
 = 
uiC
;

62 
uiZ
;

64 i‡–! 
expA
 ) {

65 i‡–! 
sigA
 ) 
zîoProd
;

66 
n‹mExpSig
 = 
	`so·Êﬂt_n‹mSubn‹mÆF32Sig
–
sigA
 );

67 
expA
 = 
n‹mExpSig
.
exp
;

68 
sigA
 = 
n‹mExpSig
.
sig
;

70 i‡–! 
expB
 ) {

71 i‡–! 
sigB
 ) 
zîoProd
;

72 
n‹mExpSig
 = 
	`so·Êﬂt_n‹mSubn‹mÆF32Sig
–
sigB
 );

73 
expB
 = 
n‹mExpSig
.
exp
;

74 
sigB
 = 
n‹mExpSig
.
sig
;

76 
expProd
 = 
expA
 + 
expB
 - 0x7E;

77 
sigA
 = ( sigA | 0x00800000 )<<7;

78 
sigB
 = ( sigB | 0x00800000 )<<7;

79 
sigProd
 = (
uöt_Á°64_t
Ë
sigA
 * 
sigB
;

80 i‡–
sigProd
 < 
	`UINT64_C
( 0x2000000000000000 ) ) {

81 --
expProd
;

82 
sigProd
 <<= 1;

84 
signZ
 = 
signProd
;

85 i‡–! 
expC
 ) {

86 i‡–! 
sigC
 ) {

87 
expZ
 = 
expProd
 - 1;

88 
sigZ
 = 
	`so·Êﬂt_sh‹tShi·64RightJam
–
sigProd
, 31 );

89 
roundPack
;

91 
n‹mExpSig
 = 
	`so·Êﬂt_n‹mSubn‹mÆF32Sig
–
sigC
 );

92 
expC
 = 
n‹mExpSig
.
exp
;

93 
sigC
 = 
n‹mExpSig
.
sig
;

95 
sigC
 = ( sigC | 0x00800000 )<<6;

96 
expDiff
 = 
expProd
 - 
expC
;

97 i‡–
signProd
 =
signC
 ) {

98 i‡–
expDiff
 <= 0 ) {

99 
expZ
 = 
expC
;

100 
sigZ
 = 
sigC
 + 
	`so·Êﬂt_shi·64RightJam
–
sigProd
, 32 - 
expDiff
 );

102 
expZ
 = 
expProd
;

103 
sigZ64
 =

104 
sigProd


105 + 
	`so·Êﬂt_shi·64RightJam
(

106 (
uöt_Á°64_t
Ë
sigC
<<32, 
expDiff
 );

107 
sigZ
 = 
	`so·Êﬂt_sh‹tShi·64RightJam
–
sigZ64
, 32 );

109 i‡–
sigZ
 < 0x40000000 ) {

110 --
expZ
;

111 
sigZ
 <<= 1;

115 
sigC64
 = (
uöt_Á°64_t
Ë
sigC
<<32;

116 i‡–
expDiff
 < 0 ) {

117 
signZ
 = 
signC
;

118 
expZ
 = 
expC
;

119 
sigZ64
 = 
sigC64
 - 
	`so·Êﬂt_shi·64RightJam
–
sigProd
, - 
expDiff
 );

120 } i‡–! 
expDiff
 ) {

121 
expZ
 = 
expProd
;

122 
sigZ64
 = 
sigProd
 - 
sigC64
;

123 i‡–! 
sigZ64
 ) 
com∂ëeC™˚Œ©i⁄
;

124 i‡–
sigZ64
 & 
	`UINT64_C
( 0x8000000000000000 ) ) {

125 
signZ
 ^= 1;

126 
sigZ64
 = - sigZ64;

129 
expZ
 = 
expProd
;

130 
sigZ64
 = 
sigProd
 - 
	`so·Êﬂt_shi·64RightJam
–
sigC64
, 
expDiff
 );

132 
shi·Cou¡
 = 
	`so·Êﬂt_cou¡LódögZîos64
–
sigZ64
 ) - 1;

133 
expZ
 -
shi·Cou¡
;

134 
shi·Cou¡
 -= 32;

135 i‡–
shi·Cou¡
 < 0 ) {

136 
sigZ
 = 
	`so·Êﬂt_sh‹tShi·64RightJam
–
sigZ64
, - 
shi·Cou¡
 );

138 
sigZ
 = (
uöt_Á°32_t
Ë
sigZ64
<<
shi·Cou¡
;

141 
roundPack
:

142  
	`so·Êﬂt_roundPackToF32
–
signZ
, 
expZ
, 
sigZ
 );

143 
¥›ag©eNaN_ABC
:

144 
uiZ
 = 
	`so·Êﬂt_¥›ag©eNaNF32UI
–
uiA
, 
uiB
 );

145 
¥›ag©eNaN_ZC
;

146 
öfProdArg
:

147 i‡–
magBôs
 ) {

148 
uiZ
 = 
	`∑ckToF32UI
–
signProd
, 0xFF, 0 );

149 i‡–
expC
 !0xFF ) 
uiZ
;

150 i‡–
sigC
 ) 
¥›ag©eNaN_ZC
;

151 i‡–
signProd
 =
signC
 ) 
uiZ
;

153 
övÆid
:

154 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

155 
uiZ
 = 
deÁu…NaNF32UI
;

156 
¥›ag©eNaN_ZC
:

157 
uiZ
 = 
	`so·Êﬂt_¥›ag©eNaNF32UI
–uiZ, 
uiC
 );

158 
uiZ
;

159 
zîoProd
:

160 
uiZ
 = 
uiC
;

161 i‡–! ( 
expC
 | 
sigC
 ) && ( 
signProd
 !
signC
 ) ) {

162 
com∂ëeC™˚Œ©i⁄
:

163 
uiZ
 =

164 
	`∑ckToF32UI
–
so·Êﬂt_roundögMode
 =
so·Êﬂt_round_mö
, 0, 0 );

166 
uiZ
:

167 
uZ
.
ui
 = 
uiZ
;

168  
uZ
.
f
;

170 
	}
}

	@softfloat/s_mulAddF64.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"•ecülize.h
"

8 
	~"so·Êﬂt.h
"

10 
Êﬂt64_t


11 
	$so·Êﬂt_mulAddF64
(

12 
›
, 
uöt_Á°64_t
 
uiA
, uöt_Á°64_à
uiB
, uöt_Á°64_à
uiC
 )

14 
boﬁ
 
signA
;

15 
öt_Á°16_t
 
expA
;

16 
uöt_Á°64_t
 
sigA
;

17 
boﬁ
 
signB
;

18 
öt_Á°16_t
 
expB
;

19 
uöt_Á°64_t
 
sigB
;

20 
boﬁ
 
signC
;

21 
öt_Á°16_t
 
expC
;

22 
uöt_Á°64_t
 
sigC
;

23 
boﬁ
 
signProd
;

24 
uöt_Á°64_t
 
magBôs
, 
uiZ
;

25 
exp16_sig64
 
n‹mExpSig
;

26 
öt_Á°16_t
 
expProd
;

27 
uöt128
 
sigProd
;

28 
boﬁ
 
signZ
;

29 
öt_Á°16_t
 
expZ
;

30 
uöt_Á°64_t
 
sigZ
;

31 
öt_Á°16_t
 
expDiff
;

32 
uöt128
 
sigC128
, 
sigZ128
;

33 
shi·Cou¡
;

34 
ui64_f64
 
uZ
;

36 
signA
 = 
	`signF64UI
–
uiA
 );

37 
expA
 = 
	`expF64UI
–
uiA
 );

38 
sigA
 = 
	`‰acF64UI
–
uiA
 );

39 
signB
 = 
	`signF64UI
–
uiB
 );

40 
expB
 = 
	`expF64UI
–
uiB
 );

41 
sigB
 = 
	`‰acF64UI
–
uiB
 );

42 
signC
 = 
	`signF64UI
–
uiC
 ) ^ (–
›
 & 
so·Êﬂt_mulAdd_subC
 ) != 0);

43 
expC
 = 
	`expF64UI
–
uiC
 );

44 
sigC
 = 
	`‰acF64UI
–
uiC
 );

45 
signProd
 = 
signA
 ^ 
signB
 ^ ( ( 
›
 & 
so·Êﬂt_mulAdd_subProd
 ) != 0);

46 i‡–
expA
 == 0x7FF ) {

47 i‡–
sigA
 || ( ( 
expB
 =0x7FF ) && 
sigB
 ) ) 
¥›ag©eNaN_ABC
;

48 
magBôs
 = 
expB
 | 
sigB
;

49 
öfProdArg
;

51 i‡–
expB
 == 0x7FF ) {

52 i‡–
sigB
 ) 
¥›ag©eNaN_ABC
;

53 
magBôs
 = 
expA
 | 
sigA
;

54 
öfProdArg
;

56 i‡–
expC
 == 0x7FF ) {

57 i‡–
sigC
 ) {

58 
uiZ
 = 0;

59 
¥›ag©eNaN_ZC
;

61 
uiZ
 = 
uiC
;

62 
uiZ
;

64 i‡–! 
expA
 ) {

65 i‡–! 
sigA
 ) 
zîoProd
;

66 
n‹mExpSig
 = 
	`so·Êﬂt_n‹mSubn‹mÆF64Sig
–
sigA
 );

67 
expA
 = 
n‹mExpSig
.
exp
;

68 
sigA
 = 
n‹mExpSig
.
sig
;

70 i‡–! 
expB
 ) {

71 i‡–! 
sigB
 ) 
zîoProd
;

72 
n‹mExpSig
 = 
	`so·Êﬂt_n‹mSubn‹mÆF64Sig
–
sigB
 );

73 
expB
 = 
n‹mExpSig
.
exp
;

74 
sigB
 = 
n‹mExpSig
.
sig
;

76 
expProd
 = 
expA
 + 
expB
 - 0x3FE;

77 
sigA
 = ( sigA | 
	`UINT64_C
( 0x0010000000000000 ) )<<10;

78 
sigB
 = ( sigB | 
	`UINT64_C
( 0x0010000000000000 ) )<<10;

79 
sigProd
 = 
	`so·Êﬂt_mul64To128
–
sigA
, 
sigB
 );

80 i‡–
sigProd
.
v64
 < 
	`UINT64_C
( 0x2000000000000000 ) ) {

81 --
expProd
;

82 
sigProd
 = 
	`so·Êﬂt_sh‹tShi·128Le·
–sigProd.
v64
, sigProd.
v0
, 1 );

84 
signZ
 = 
signProd
;

85 i‡–! 
expC
 ) {

86 i‡–! 
sigC
 ) {

87 
expZ
 = 
expProd
 - 1;

88 
sigZ
 = 
sigProd
.
v64
<<1 | ( sigProd.
v0
 != 0 );

89 
roundPack
;

91 
n‹mExpSig
 = 
	`so·Êﬂt_n‹mSubn‹mÆF64Sig
–
sigC
 );

92 
expC
 = 
n‹mExpSig
.
exp
;

93 
sigC
 = 
n‹mExpSig
.
sig
;

95 
sigC
 = ( sigC | 
	`UINT64_C
( 0x0010000000000000 ) )<<9;

96 
expDiff
 = 
expProd
 - 
expC
;

97 i‡–
signProd
 =
signC
 ) {

98 i‡–
expDiff
 <= 0 ) {

99 
expZ
 = 
expC
;

100 i‡–
expDiff
 ) {

101 
sigProd
.
v64
 =

102 
	`so·Êﬂt_shi·64RightJam
–
sigProd
.
v64
, - 
expDiff
 );

104 
sigZ
 = ( 
sigC
 + 
sigProd
.
v64
 ) | ( sigProd.
v0
 != 0 );

106 
expZ
 = 
expProd
;

107 
sigC128
 = 
	`so·Êﬂt_shi·128RightJam
–
sigC
, 0, 
expDiff
 );

108 
sigZ128
 =

109 
	`so·Êﬂt_add128
(

110 
sigProd
.
v64
, sigProd.
v0
, 
sigC128
.v64, sigC128.v0 );

111 
sigZ
 = 
sigZ128
.
v64
 | ( sigZ128.
v0
 != 0 );

113 i‡–
sigZ
 < 
	`UINT64_C
( 0x4000000000000000 ) ) {

114 --
expZ
;

115 
sigZ
 <<= 1;

119 i‡–
expDiff
 < 0 ) {

120 
signZ
 = 
signC
;

121 
expZ
 = 
expC
;

122 
sigProd
 =

123 
	`so·Êﬂt_shi·128RightJam
(

124 
sigProd
.
v64
, sigProd.
v0
, - 
expDiff
 );

125 
sigZ128
 = 
	`so·Êﬂt_sub128
–
sigC
, 0, 
sigProd
.
v64
, sigProd.
v0
 );

126 } i‡–! 
expDiff
 ) {

127 
expZ
 = 
expProd
;

128 
sigZ128
 = 
	`so·Êﬂt_sub128
–
sigProd
.
v64
, sigProd.
v0
, 
sigC
, 0 );

129 i‡–! ( 
sigZ128
.
v64
 | sigZ128.
v0
 ) ) 
com∂ëeC™˚Œ©i⁄
;

130 i‡–
sigZ128
.
v64
 & 
	`UINT64_C
( 0x8000000000000000 ) ) {

131 
signZ
 ^= 1;

132 
sigZ128
 = 
	`so·Êﬂt_sub128
–0, 0, sigZ128.
v64
, sigZ128.
v0
 );

135 
expZ
 = 
expProd
;

136 
sigC128
 = 
	`so·Êﬂt_shi·128RightJam
–
sigC
, 0, 
expDiff
 );

137 
sigZ128
 =

138 
	`so·Êﬂt_sub128
(

139 
sigProd
.
v64
, sigProd.
v0
, 
sigC128
.v64, sigC128.v0 );

141 i‡–! 
sigZ128
.
v64
 ) {

142 
expZ
 -= 64;

143 
sigZ128
.
v64
 = sigZ128.
v0
;

144 
sigZ128
.
v0
 = 0;

146 
shi·Cou¡
 = 
	`so·Êﬂt_cou¡LódögZîos64
–
sigZ128
.
v64
 ) - 1;

147 
expZ
 -
shi·Cou¡
;

148 i‡–
shi·Cou¡
 < 0 ) {

149 
sigZ
 = 
	`so·Êﬂt_sh‹tShi·64RightJam
–
sigZ128
.
v64
, - 
shi·Cou¡
 );

151 
sigZ128
 =

152 
	`so·Êﬂt_sh‹tShi·128Le·
(

153 
sigZ128
.
v64
, sigZ128.
v0
, 
shi·Cou¡
 );

154 
sigZ
 = 
sigZ128
.
v64
;

156 
sigZ
 |–
sigZ128
.
v0
 != 0 );

158 
roundPack
:

159  
	`so·Êﬂt_roundPackToF64
–
signZ
, 
expZ
, 
sigZ
 );

160 
¥›ag©eNaN_ABC
:

161 
uiZ
 = 
	`so·Êﬂt_¥›ag©eNaNF64UI
–
uiA
, 
uiB
 );

162 
¥›ag©eNaN_ZC
;

163 
öfProdArg
:

164 i‡–
magBôs
 ) {

165 
uiZ
 = 
	`∑ckToF64UI
–
signProd
, 0x7FF, 0 );

166 i‡–
expC
 !0x7FF ) 
uiZ
;

167 i‡–
sigC
 ) 
¥›ag©eNaN_ZC
;

168 i‡–
signProd
 =
signC
 ) 
uiZ
;

170 
övÆid
:

171 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

172 
uiZ
 = 
deÁu…NaNF64UI
;

173 
¥›ag©eNaN_ZC
:

174 
uiZ
 = 
	`so·Êﬂt_¥›ag©eNaNF64UI
–uiZ, 
uiC
 );

175 
uiZ
;

176 
zîoProd
:

177 
uiZ
 = 
uiC
;

178 i‡–! ( 
expC
 | 
sigC
 ) && ( 
signProd
 !
signC
 ) ) {

179 
com∂ëeC™˚Œ©i⁄
:

180 
uiZ
 =

181 
	`∑ckToF64UI
–
so·Êﬂt_roundögMode
 =
so·Êﬂt_round_mö
, 0, 0 );

183 
uiZ
:

184 
uZ
.
ui
 = 
uiZ
;

185  
uZ
.
f
;

187 
	}
}

	@softfloat/s_normRoundPackToF32.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

8 
Êﬂt32_t


9 
	$so·Êﬂt_n‹mRoundPackToF32
–
boﬁ
 
sign
, 
öt_Á°16_t
 
exp
, 
uöt_Á°32_t
 
sig
 )

11 
shi·Cou¡
;

12 
ui32_f32
 
uZ
;

14 
shi·Cou¡
 = 
	`so·Êﬂt_cou¡LódögZîos32
–
sig
 ) - 1;

15 
exp
 -
shi·Cou¡
;

16 i‡––7 <
shi·Cou¡
 ) && ( (
uöt16_t
Ë
exp
 < 0xFD ) ) {

17 
uZ
.
ui
 = 
	`∑ckToF32UI
–
sign
, 
sig
 ? 
exp
 : 0, sig<<–
shi·Cou¡
 - 7 ) );

18  
uZ
.
f
;

20  
	`so·Êﬂt_roundPackToF32
–
sign
, 
exp
, 
sig
<<
shi·Cou¡
 );

23 
	}
}

	@softfloat/s_normRoundPackToF64.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

8 
Êﬂt64_t


9 
	$so·Êﬂt_n‹mRoundPackToF64
–
boﬁ
 
sign
, 
öt_Á°16_t
 
exp
, 
uöt_Á°64_t
 
sig
 )

11 
shi·Cou¡
;

12 
ui64_f64
 
uZ
;

14 
shi·Cou¡
 = 
	`so·Êﬂt_cou¡LódögZîos64
–
sig
 ) - 1;

15 
exp
 -
shi·Cou¡
;

16 i‡––10 <
shi·Cou¡
 ) && ( (
uöt16_t
Ë
exp
 < 0x7FD ) ) {

17 
uZ
.
ui
 = 
	`∑ckToF64UI
–
sign
, 
sig
 ? 
exp
 : 0, sig<<–
shi·Cou¡
 - 10 ) );

18  
uZ
.
f
;

20  
	`so·Êﬂt_roundPackToF64
–
sign
, 
exp
, 
sig
<<
shi·Cou¡
 );

23 
	}
}

	@softfloat/s_normSubnormalF32Sig.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

5 
	~"öã∫Æs.h
"

7 
exp16_sig32
 
	$so·Êﬂt_n‹mSubn‹mÆF32Sig
–
uöt_Á°32_t
 
sig
 )

9 
shi·Cou¡
;

10 
exp16_sig32
 
z
;

12 
shi·Cou¡
 = 
	`so·Êﬂt_cou¡LódögZîos32
–
sig
 ) - 8;

13 
z
.
exp
 = 1 - 
shi·Cou¡
;

14 
z
.
sig
 = sig<<
shi·Cou¡
;

15  
z
;

17 
	}
}

	@softfloat/s_normSubnormalF64Sig.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

5 
	~"öã∫Æs.h
"

7 
exp16_sig64
 
	$so·Êﬂt_n‹mSubn‹mÆF64Sig
–
uöt_Á°64_t
 
sig
 )

9 
shi·Cou¡
;

10 
exp16_sig64
 
z
;

12 
shi·Cou¡
 = 
	`so·Êﬂt_cou¡LódögZîos64
–
sig
 ) - 11;

13 
z
.
exp
 = 1 - 
shi·Cou¡
;

14 
z
.
sig
 = sig<<
shi·Cou¡
;

15  
z
;

17 
	}
}

	@softfloat/s_propagateNaNF32UI.c

4 
	~<°dboﬁ.h
>

5 
	~<°döt.h
>

6 
	~"∂©f‹m.h
"

7 
	~"öã∫Æs.h
"

8 
	~"•ecülize.h
"

9 
	~"so·Êﬂt.h
"

17 
uöt_Á°32_t


18 
	$so·Êﬂt_¥›ag©eNaNF32UI
–
uöt_Á°32_t
 
uiA
, uöt_Á°32_à
uiB
 )

20 i‡–
	`so·Êﬂt_isSigNaNF32UI
–
uiA
 ) | so·Êﬂt_isSigNaNF32UI–
uiB
 ) ) {

21 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

23  
deÁu…NaNF32UI
;

24 
	}
}

	@softfloat/s_propagateNaNF64UI.c

4 
	~<°dboﬁ.h
>

5 
	~<°döt.h
>

6 
	~"∂©f‹m.h
"

7 
	~"öã∫Æs.h
"

8 
	~"•ecülize.h
"

9 
	~"so·Êﬂt.h
"

17 
uöt_Á°64_t


18 
	$so·Êﬂt_¥›ag©eNaNF64UI
–
uöt_Á°64_t
 
uiA
, uöt_Á°64_à
uiB
 )

20 i‡–
	`so·Êﬂt_isSigNaNF64UI
–
uiA
 ) | so·Êﬂt_isSigNaNF64UI–
uiB
 ) ) {

21 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

23  
deÁu…NaNF64UI
;

24 
	}
}

	@softfloat/s_roundPackToF32.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"so·Êﬂt.h
"

9 
Êﬂt32_t


10 
	$so·Êﬂt_roundPackToF32
–
boﬁ
 
sign
, 
öt_Á°16_t
 
exp
, 
uöt_Á°32_t
 
sig
 )

12 
roundögMode
;

13 
boﬁ
 
roundNóª°Eví
;

14 
roundIn¸emít
, 
roundBôs
;

15 
boﬁ
 
isTöy
;

16 
uöt_Á°32_t
 
uiZ
;

17 
ui32_f32
 
uZ
;

19 
roundögMode
 = 
so·Êﬂt_roundögMode
;

20 
roundNóª°Eví
 = ( 
roundögMode
 =
so·Êﬂt_round_√¨e°_eví
 );

21 
roundIn¸emít
 = 0x40;

23 ! 
roundNóª°Eví


24 && ( 
roundögMode
 !
so·Êﬂt_round_√¨e°_maxMag
 )

26 
roundIn¸emít
 =

27 –
roundögMode
 =
so·Êﬂt_round_möMag
 )

28 || ( 
roundögMode


29 =–
sign
 ? 
so·Êﬂt_round_max
 : 
so·Êﬂt_round_mö
 ) )

33 
roundBôs
 = 
sig
 & 0x7F;

34 i‡–0xFD <(
uöt16_t
Ë
exp
 ) {

35 i‡–
exp
 < 0 ) {

36 
isTöy
 =

37 –
so·Êﬂt_dëe˘Tööess


38 =
so·Êﬂt_tööess_bef‹eRoundög
 )

39 || ( 
exp
 < -1 )

40 || ( 
sig
 + 
roundIn¸emít
 < 0x80000000 );

41 
sig
 = 
	`so·Êﬂt_shi·32RightJam
–sig, - 
exp
 );

42 
exp
 = 0;

43 
roundBôs
 = 
sig
 & 0x7F;

44 i‡–
isTöy
 && 
roundBôs
 ) {

45 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_undîÊow
 );

48 –0xFD < 
exp
 ) || ( 0x80000000 <
sig
 + 
roundIn¸emít
 )

50 
	`so·Êﬂt_øi£Fœgs
(

51 
so·Êﬂt_Êag_ovîÊow
 | 
so·Êﬂt_Êag_öexa˘
 );

52 
uiZ
 = 
	`∑ckToF32UI
–
sign
, 0xFF, 0 ) - ! 
roundIn¸emít
;

53 
uiZ
;

56 i‡–
roundBôs
 ) 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

57 
sig
 = ( sig + 
roundIn¸emít
 )>>7;

58 
sig
 &~ ( ! ( 
roundBôs
 ^ 0x40 ) & 
roundNóª°Eví
 );

59 
uiZ
 = 
	`∑ckToF32UI
–
sign
, 
sig
 ? 
exp
 : 0, sig );

60 
uiZ
:

61 
uZ
.
ui
 = 
uiZ
;

62  
uZ
.
f
;

64 
	}
}

	@softfloat/s_roundPackToF64.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"so·Êﬂt.h
"

9 
Êﬂt64_t


10 
	$so·Êﬂt_roundPackToF64
–
boﬁ
 
sign
, 
öt_Á°16_t
 
exp
, 
uöt_Á°64_t
 
sig
 )

12 
roundögMode
;

13 
boﬁ
 
roundNóª°Eví
;

14 
roundIn¸emít
, 
roundBôs
;

15 
boﬁ
 
isTöy
;

16 
uöt_Á°64_t
 
uiZ
;

17 
ui64_f64
 
uZ
;

19 
roundögMode
 = 
so·Êﬂt_roundögMode
;

20 
roundNóª°Eví
 = ( 
roundögMode
 =
so·Êﬂt_round_√¨e°_eví
 );

21 
roundIn¸emít
 = 0x200;

23 ! 
roundNóª°Eví


24 && ( 
roundögMode
 !
so·Êﬂt_round_√¨e°_maxMag
 )

26 
roundIn¸emít
 =

27 –
roundögMode
 =
so·Êﬂt_round_möMag
 )

28 || ( 
roundögMode


29 =–
sign
 ? 
so·Êﬂt_round_max
 : 
so·Êﬂt_round_mö
 ) )

33 
roundBôs
 = 
sig
 & 0x3FF;

34 i‡–0x7FD <(
uöt16_t
Ë
exp
 ) {

35 i‡–
exp
 < 0 ) {

36 
isTöy
 =

37 –
so·Êﬂt_dëe˘Tööess


38 =
so·Êﬂt_tööess_bef‹eRoundög
 )

39 || ( 
exp
 < -1 )

40 || ( 
sig
 + 
roundIn¸emít
 < 
	`UINT64_C
( 0x8000000000000000 ) );

41 
sig
 = 
	`so·Êﬂt_shi·64RightJam
–sig, - 
exp
 );

42 
exp
 = 0;

43 
roundBôs
 = 
sig
 & 0x3FF;

44 i‡–
isTöy
 && 
roundBôs
 ) {

45 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_undîÊow
 );

48 –0x7FD < 
exp
 )

49 || ( 
	`UINT64_C
–0x8000000000000000 ) <
sig
 + 
roundIn¸emít
 )

51 
	`so·Êﬂt_øi£Fœgs
(

52 
so·Êﬂt_Êag_ovîÊow
 | 
so·Êﬂt_Êag_öexa˘
 );

53 
uiZ
 = 
	`∑ckToF64UI
–
sign
, 0x7FF, 0 ) - ! 
roundIn¸emít
;

54 
uiZ
;

57 i‡–
roundBôs
 ) 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

58 
sig
 = ( sig + 
roundIn¸emít
 )>>10;

59 
sig
 &~ ( ! ( 
roundBôs
 ^ 0x200 ) & 
roundNóª°Eví
 );

60 
uiZ
 = 
	`∑ckToF64UI
–
sign
, 
sig
 ? 
exp
 : 0, sig );

61 
uiZ
:

62 
uZ
.
ui
 = 
uiZ
;

63  
uZ
.
f
;

65 
	}
}

	@softfloat/s_roundPackToI32.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
öt_Á°32_t


9 
	$so·Êﬂt_roundPackToI32
(

10 
boﬁ
 
sign
, 
uöt_Á°64_t
 
sig
, 
öt_Á°8_t
 
roundögMode
, boﬁ 
exa˘
 )

12 
boﬁ
 
roundNóª°Eví
;

13 
roundIn¸emít
, 
roundBôs
;

14 
uöt_Á°32_t
 
sig32
;

15 uni⁄ { 
uöt32_t
 
ui
; 
öt32_t
 
i
; } 
uZ
;

16 
öt_Á°32_t
 
z
;

18 
roundNóª°Eví
 = ( 
roundögMode
 =
so·Êﬂt_round_√¨e°_eví
 );

19 
roundIn¸emít
 = 0x40;

21 ! 
roundNóª°Eví


22 && ( 
roundögMode
 !
so·Êﬂt_round_√¨e°_maxMag
 )

24 
roundIn¸emít
 =

25 –
roundögMode
 =
so·Êﬂt_round_möMag
 )

26 || ( 
roundögMode


27 =–
sign
 ? 
so·Êﬂt_round_max
 : 
so·Êﬂt_round_mö
 ) )

31 
roundBôs
 = 
sig
 & 0x7F;

32 
sig
 +
roundIn¸emít
;

33 i‡–
sig
 & 
	`UINT64_C
–0xFFFFFF8000000000 ) ) 
övÆid
;

34 
sig32
 = 
sig
>>7;

35 
sig32
 &~ ( ! ( 
roundBôs
 ^ 0x40 ) & 
roundNóª°Eví
 );

36 
uZ
.
ui
 = 
sign
 ? - 
sig32
 : sig32;

37 
z
 = 
uZ
.
i
;

38 i‡–
z
 && ( ( z < 0 ) ^ 
sign
 ) ) 
övÆid
;

39 i‡–
exa˘
 && 
roundBôs
 ) {

40 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

42  
z
;

43 
övÆid
:

44 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

45  
sign
 ? -0x7FFFFFFF - 1 : 0x7FFFFFFF;

47 
	}
}

	@softfloat/s_roundPackToI64.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
öt_Á°64_t


9 
	$so·Êﬂt_roundPackToI64
(

10 
boﬁ
 
sign
,

11 
uöt_Á°64_t
 
sig64
,

12 
uöt_Á°64_t
 
sig0
,

13 
öt_Á°8_t
 
roundögMode
,

14 
boﬁ
 
exa˘


17 
boﬁ
 
roundNóª°Eví
, 
ö¸emít
;

18 uni⁄ { 
uöt64_t
 
ui
; 
öt64_t
 
i
; } 
uZ
;

19 
öt_Á°64_t
 
z
;

21 
roundNóª°Eví
 = ( 
roundögMode
 =
so·Êﬂt_round_√¨e°_eví
 );

22 
ö¸emít
 = ( 
	`UINT64_C
–0x8000000000000000 ) <
sig0
 );

24 ! 
roundNóª°Eví


25 && ( 
roundögMode
 !
so·Êﬂt_round_√¨e°_maxMag
 )

27 
ö¸emít
 =

28 –
roundögMode
 !
so·Êﬂt_round_möMag
 )

29 && ( 
roundögMode


30 =–
sign
 ? 
so·Êﬂt_round_mö
 : 
so·Êﬂt_round_max
 ) )

31 && 
sig0
;

33 i‡–
ö¸emít
 ) {

34 ++
sig64
;

35 i‡–! 
sig64
 ) 
övÆid
;

36 
sig64
 &=

37 ~ ( ! ( 
sig0
 & 
	`UINT64_C
( 0x7FFFFFFFFFFFFFFF ) )

38 & 
roundNóª°Eví
 );

40 
uZ
.
ui
 = 
sign
 ? - 
sig64
 : sig64;

41 
z
 = 
uZ
.
i
;

42 i‡–
z
 && ( ( z < 0 ) ^ 
sign
 ) ) 
övÆid
;

43 i‡–
exa˘
 && 
sig0
 ) 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

44  
z
;

45 
övÆid
:

46 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

48 
sign
 ? - 
	`INT64_C
( 0x7FFFFFFFFFFFFFFF ) - 1

49 : 
	`INT64_C
( 0x7FFFFFFFFFFFFFFF );

51 
	}
}

	@softfloat/s_roundPackToUI32.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
uöt_Á°32_t


9 
	$so·Êﬂt_roundPackToUI32
(

10 
boﬁ
 
sign
, 
uöt_Á°64_t
 
sig
, 
öt_Á°8_t
 
roundögMode
, boﬁ 
exa˘
 )

12 
boﬁ
 
roundNóª°Eví
;

13 
roundIn¸emít
, 
roundBôs
;

14 
uöt_Á°32_t
 
z
;

16 
roundNóª°Eví
 = ( 
roundögMode
 =
so·Êﬂt_round_√¨e°_eví
 );

17 
roundIn¸emít
 = 0x40;

19 ! 
roundNóª°Eví


20 && ( 
roundögMode
 !
so·Êﬂt_round_√¨e°_maxMag
 )

22 
roundIn¸emít
 =

23 –
roundögMode
 =
so·Êﬂt_round_möMag
 )

24 || ( 
roundögMode


25 =–
sign
 ? 
so·Êﬂt_round_max
 : 
so·Êﬂt_round_mö
 ) )

29 
roundBôs
 = 
sig
 & 0x7F;

30 
sig
 +
roundIn¸emít
;

31 i‡–
sig
 & 
	`UINT64_C
–0xFFFFFF8000000000 ) ) 
övÆid
;

32 
z
 = 
sig
>>7;

33 
z
 &~ ( ! ( 
roundBôs
 ^ 0x40 ) & 
roundNóª°Eví
 );

34 i‡–
sign
 && 
z
 ) 
övÆid
;

35 i‡–
exa˘
 && 
roundBôs
 ) {

36 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

38  
z
;

39 
övÆid
:

40 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

43 
	}
}

	@softfloat/s_roundPackToUI64.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
uöt_Á°64_t


9 
	$so·Êﬂt_roundPackToUI64
(

10 
boﬁ
 
sign
,

11 
uöt_Á°64_t
 
sig64
,

12 
uöt_Á°64_t
 
sig0
,

13 
öt_Á°8_t
 
roundögMode
,

14 
boﬁ
 
exa˘


17 
boﬁ
 
roundNóª°Eví
, 
ö¸emít
;

19 
roundNóª°Eví
 = ( 
roundögMode
 =
so·Êﬂt_round_√¨e°_eví
 );

20 
ö¸emít
 = ( 
	`UINT64_C
–0x8000000000000000 ) <
sig0
 );

22 ! 
roundNóª°Eví


23 && ( 
roundögMode
 !
so·Êﬂt_round_√¨e°_maxMag
 )

25 
ö¸emít
 =

26 –
roundögMode
 !
so·Êﬂt_round_möMag
 )

27 && ( 
roundögMode


28 =–
sign
 ? 
so·Êﬂt_round_mö
 : 
so·Êﬂt_round_max
 ) )

29 && 
sig0
;

31 i‡–
ö¸emít
 ) {

32 ++
sig64
;

33 i‡–! 
sig64
 ) 
övÆid
;

34 
sig64
 &=

35 ~ ( ! ( 
sig0
 & 
	`UINT64_C
( 0x7FFFFFFFFFFFFFFF ) )

36 & 
roundNóª°Eví
 );

38 i‡–
sign
 && 
sig64
 ) 
övÆid
;

39 i‡–
exa˘
 && 
sig0
 ) 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_öexa˘
 );

40  
sig64
;

41 
övÆid
:

42 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

43  
	`UINT64_C
( 0xFFFFFFFFFFFFFFFF );

45 
	}
}

	@softfloat/s_shift128ExtraRightJam.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 
uöt128_exåa


7 
	$so·Êﬂt_shi·128ExåaRightJam
(

8 
uöt64_t
 
a64
, uöt64_à
a0
, uöt64_à
exåa
, 
cou¡
 )

10 
√gCou¡
;

11 
uöt128_exåa
 
z
;

13 
√gCou¡
 = - 
cou¡
;

14 i‡–
cou¡
 < 64 ) {

15 
z
.
v64
 = 
a64
>>
cou¡
;

16 
z
.
v0
 = 
a64
<<–
√gCou¡
 & 63 ) | 
a0
>>
cou¡
;

17 
z
.
exåa
 = 
a0
<<–
√gCou¡
 & 63 );

19 
z
.
v64
 = 0;

20 i‡–
cou¡
 == 64 ) {

21 
z
.
v0
 = 
a64
;

22 
z
.
exåa
 = 
a0
;

24 
exåa
 |
a0
;

25 i‡–
cou¡
 < 128 ) {

26 
z
.
v0
 = 
a64
>>–
cou¡
 & 63 );

27 
z
.
exåa
 = 
a64
<<–
√gCou¡
 & 63 );

29 
z
.
v0
 = 0;

30 
z
.
exåa
 = ( 
cou¡
 =128 ) ? 
a64
 : (á64 != 0 );

34 
z
.
exåa
 |= (Éxtra != 0 );

35  
z
;

37 
	}
}

	@softfloat/s_shift128RightJam.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 
uöt128


7 
	$so·Êﬂt_shi·128RightJam
–
uöt64_t
 
a64
, uöt64_à
a0
, 
cou¡
 )

9 
√gCou¡
;

10 
uöt128
 
z
;

12 i‡–
cou¡
 < 64 ) {

13 
√gCou¡
 = - 
cou¡
;

14 
z
.
v64
 = 
a64
>>–
cou¡
 & 63 );

15 
z
.
v0
 =

16 
a64
<<–
√gCou¡
 & 63 ) | 
a0
>>
cou¡


17 | ( (
uöt64_t
Ë–
a0
<<–
√gCou¡
 & 63 ) ) != 0 );

19 
z
.
v64
 = 0;

20 
z
.
v0
 =

21 –
cou¡
 < 128 )

22 ? 
a64
>>–
cou¡
 & 63 )

23 | ( ( ( 
a64
 & ( ( (
uöt64_t
Ë1<<–
cou¡
 & 63 ) ) - 1 ) )

24 | 
a0
 )

26 : ( ( 
a64
 | 
a0
 ) != 0 );

28  
z
;

30 
	}
}

	@softfloat/s_shift32RightJam.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 
uöt32_t
 
	$so·Êﬂt_shi·32RightJam
–
uöt32_t
 
a
, 
cou¡
 )

10 –
cou¡
 < 32 )

11 ? 
a
>>
cou¡
 | ( (
uöt32_t
) (á<<( ( - count ) & 31 ) ) != 0 )

12 : ( 
a
 != 0 );

14 
	}
}

	@softfloat/s_shift64ExtraRightJam.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 
uöt64_exåa


7 
	$so·Êﬂt_shi·64ExåaRightJam
(

8 
uöt64_t
 
a
, uöt64_à
exåa
, 
cou¡
 )

10 
uöt64_exåa
 
z
;

12 i‡–
cou¡
 < 64 ) {

13 
z
.
v
 = 
a
>>
cou¡
;

14 
z
.
exåa
 = 
a
<<––- 
cou¡
 ) & 63 );

16 
z
.
v
 = 0;

17 
z
.
exåa
 = ( 
cou¡
 =64 ) ? 
a
 : (á != 0 );

19 
z
.
exåa
 |= (Éxtra != 0 );

20  
z
;

22 
	}
}

	@softfloat/s_shift64RightJam.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 
uöt64_t
 
	$so·Êﬂt_shi·64RightJam
–
uöt64_t
 
a
, 
cou¡
 )

10 –
cou¡
 < 64 )

11 ? 
a
>>
cou¡
 | ( (
uöt64_t
) (á<<( ( - count ) & 63 ) ) != 0 )

12 : ( 
a
 != 0 );

14 
	}
}

	@softfloat/s_shortShift128ExtraRightJam.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 
uöt128_exåa


7 
	$so·Êﬂt_sh‹tShi·128ExåaRightJam
(

8 
uöt64_t
 
a64
, uöt64_à
a0
, uöt64_à
exåa
, 
cou¡
 )

10 
√gCou¡
;

11 
uöt128_exåa
 
z
;

13 
√gCou¡
 = - 
cou¡
;

14 
z
.
v64
 = 
a64
>>
cou¡
;

15 
z
.
v0
 = 
a64
<<–
√gCou¡
 & 63 ) | 
a0
>>
cou¡
;

16 
z
.
exåa
 = 
a0
<<–
√gCou¡
 & 63 ) | (Éxtra != 0 );

17  
z
;

19 
	}
}

	@softfloat/s_shortShift128Left.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 
uöt128


7 
	$so·Êﬂt_sh‹tShi·128Le·
–
uöt64_t
 
a64
, uöt64_à
a0
, 
cou¡
 )

9 
uöt128
 
z
;

11 
z
.
v64
 = 
a64
<<
cou¡
 | 
a0
>>( ( - count ) & 63 );

12 
z
.
v0
 = 
a0
<<
cou¡
;

13  
z
;

15 
	}
}

	@softfloat/s_shortShift128Right.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 
uöt128


7 
	$so·Êﬂt_sh‹tShi·128Right
–
uöt64_t
 
a64
, uöt64_à
a0
, 
cou¡
 )

9 
uöt128
 
z
;

11 
z
.
v64
 = 
a64
>>
cou¡
;

12 
z
.
v0
 = 
a64
<<––- 
cou¡
 ) & 63 ) | 
a0
>>count;

13  
z
;

15 
	}
}

	@softfloat/s_shortShift192Left.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 
uöt192


7 
	$so·Êﬂt_sh‹tShi·192Le·
(

8 
uöt64_t
 
a128
, uöt64_à
a64
, uöt64_à
a0
, 
cou¡
 )

10 
√gCou¡
;

11 
uöt192
 
z
;

13 
√gCou¡
 = - 
cou¡
;

14 
z
.
v128
 = 
a128
<<
cou¡
 | 
a64
>>–
√gCou¡
 & 63 );

15 
z
.
v64
 = 
a64
<<
cou¡
 | 
a0
>>–
√gCou¡
 & 63 );

16 
z
.
v0
 = 
a0
<<
cou¡
;

17  
z
;

19 
	}
}

	@softfloat/s_shortShift32Right1Jam.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 
uöt32_t
 
	$so·Êﬂt_sh‹tShi·32Right1Jam
–
uöt32_t
 
a
 )

9  
a
>>1 | (á & 1 );

11 
	}
}

	@softfloat/s_shortShift64ExtraRightJam.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 
uöt64_exåa


7 
	$so·Êﬂt_sh‹tShi·64ExåaRightJam
(

8 
uöt64_t
 
a
, uöt64_à
exåa
, 
cou¡
 )

10 
uöt64_exåa
 
z
;

12 
z
.
v
 = 
a
>>
cou¡
;

13 
z
.
exåa
 = 
a
<<––- 
cou¡
 ) & 63 ) | (Éxtra != 0 );

14  
z
;

16 
	}
}

	@softfloat/s_shortShift64RightJam.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 
uöt64_t
 
	$so·Êﬂt_sh‹tShi·64RightJam
–
uöt64_t
 
a
, 
cou¡
 )

9  
a
>>
cou¡
 | ( (á & ( ( (
uöt64_t
) 1<<count ) - 1 ) ) != 0 );

11 
	}
}

	@softfloat/s_sub128.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 
uöt128


7 
	$so·Êﬂt_sub128
–
uöt64_t
 
a64
, uöt64_à
a0
, uöt64_à
b64
, uöt64_à
b0
 )

9 
uöt128
 
z
;

11 
z
.
v0
 = 
a0
 - 
b0
;

12 
z
.
v64
 = 
a64
 - 
b64
;

13 
z
.
v64
 -–
a0
 < 
b0
 );

14  
z
;

16 
	}
}

	@softfloat/s_sub192.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

6 
uöt192


7 
	$so·Êﬂt_sub192
(

8 
uöt64_t
 
a128
,

9 
uöt64_t
 
a64
,

10 
uöt64_t
 
a0
,

11 
uöt64_t
 
b128
,

12 
uöt64_t
 
b64
,

13 
uöt64_t
 
b0


16 
uöt192
 
z
;

17 
b‹row64
, 
b‹row128
;

19 
z
.
v0
 = 
a0
 - 
b0
;

20 
b‹row64
 = ( 
a0
 < 
b0
 );

21 
z
.
v64
 = 
a64
 - 
b64
;

22 
b‹row128
 = ( 
a64
 < 
b64
 );

23 
z
.
v128
 = 
a128
 - 
b128
;

24 
b‹row128
 +–
z
.
v64
 < 
b‹row64
 );

25 
z
.
v64
 -
b‹row64
;

26 
z
.
v128
 -
b‹row128
;

27  
z
;

29 
	}
}

	@softfloat/s_subMagsF32.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"•ecülize.h
"

8 
	~"so·Êﬂt.h
"

10 
Êﬂt32_t


11 
	$so·Êﬂt_subMagsF32
–
uöt_Á°32_t
 
uiA
, uöt_Á°32_à
uiB
, 
boﬁ
 
signZ
 )

13 
öt_Á°16_t
 
expA
;

14 
uöt_Á°32_t
 
sigA
;

15 
öt_Á°16_t
 
expB
;

16 
uöt_Á°32_t
 
sigB
;

17 
öt_Á°16_t
 
expDiff
;

18 
uöt_Á°32_t
 
uiZ
;

19 
öt_Á°16_t
 
expZ
;

20 
uöt_Á°32_t
 
sigZ
;

21 
ui32_f32
 
uZ
;

23 
expA
 = 
	`expF32UI
–
uiA
 );

24 
sigA
 = 
	`‰acF32UI
–
uiA
 );

25 
expB
 = 
	`expF32UI
–
uiB
 );

26 
sigB
 = 
	`‰acF32UI
–
uiB
 );

27 
expDiff
 = 
expA
 - 
expB
;

28 
sigA
 <<= 7;

29 
sigB
 <<= 7;

30 i‡–0 < 
expDiff
 ) 
expABiggî
;

31 i‡–
expDiff
 < 0 ) 
expBBiggî
;

32 i‡–
expA
 == 0xFF ) {

33 i‡–
sigA
 | 
sigB
 ) 
¥›ag©eNaN
;

34 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

35 
uiZ
 = 
deÁu…NaNF32UI
;

36 
uiZ
;

38 i‡–! 
expA
 ) {

39 
expA
 = 1;

40 
expB
 = 1;

42 i‡–
sigB
 < 
sigA
 ) 
aBiggî
;

43 i‡–
sigA
 < 
sigB
 ) 
bBiggî
;

44 
uiZ
 = 
	`∑ckToF32UI
–
so·Êﬂt_roundögMode
 =
so·Êﬂt_round_mö
, 0, 0 );

45 
uiZ
;

46 
expBBiggî
:

47 i‡–
expB
 == 0xFF ) {

48 i‡–
sigB
 ) 
¥›ag©eNaN
;

49 
uiZ
 = 
	`∑ckToF32UI
–
signZ
 ^ 1, 0xFF, 0 );

50 
uiZ
;

52 
sigA
 +
expA
 ? 0x40000000 : sigA;

53 
sigA
 = 
	`so·Êﬂt_shi·32RightJam
–sigA, - 
expDiff
 );

54 
sigB
 |= 0x40000000;

55 
bBiggî
:

56 
signZ
 ^= 1;

57 
expZ
 = 
expB
;

58 
sigZ
 = 
sigB
 - 
sigA
;

59 
n‹mRoundPack
;

60 
expABiggî
:

61 i‡–
expA
 == 0xFF ) {

62 i‡–
sigA
 ) 
¥›ag©eNaN
;

63 
uiZ
 = 
uiA
;

64 
uiZ
;

66 
sigB
 +
expB
 ? 0x40000000 : sigB;

67 
sigB
 = 
	`so·Êﬂt_shi·32RightJam
–sigB, 
expDiff
 );

68 
sigA
 |= 0x40000000;

69 
aBiggî
:

70 
expZ
 = 
expA
;

71 
sigZ
 = 
sigA
 - 
sigB
;

72 
n‹mRoundPack
:

73  
	`so·Êﬂt_n‹mRoundPackToF32
–
signZ
, 
expZ
 - 1, 
sigZ
 );

74 
¥›ag©eNaN
:

75 
uiZ
 = 
	`so·Êﬂt_¥›ag©eNaNF32UI
–
uiA
, 
uiB
 );

76 
uiZ
:

77 
uZ
.
ui
 = 
uiZ
;

78  
uZ
.
f
;

80 
	}
}

	@softfloat/s_subMagsF64.c

2 
	~<°dboﬁ.h
>

3 
	~<°döt.h
>

4 
	~"∂©f‹m.h
"

5 
	~"¥imôives.h
"

6 
	~"öã∫Æs.h
"

7 
	~"•ecülize.h
"

8 
	~"so·Êﬂt.h
"

10 
Êﬂt64_t


11 
	$so·Êﬂt_subMagsF64
–
uöt_Á°64_t
 
uiA
, uöt_Á°64_à
uiB
, 
boﬁ
 
signZ
 )

13 
öt_Á°16_t
 
expA
;

14 
uöt_Á°64_t
 
sigA
;

15 
öt_Á°16_t
 
expB
;

16 
uöt_Á°64_t
 
sigB
;

17 
öt_Á°16_t
 
expDiff
;

18 
uöt_Á°64_t
 
uiZ
;

19 
öt_Á°16_t
 
expZ
;

20 
uöt_Á°64_t
 
sigZ
;

21 
ui64_f64
 
uZ
;

23 
expA
 = 
	`expF64UI
–
uiA
 );

24 
sigA
 = 
	`‰acF64UI
–
uiA
 );

25 
expB
 = 
	`expF64UI
–
uiB
 );

26 
sigB
 = 
	`‰acF64UI
–
uiB
 );

27 
expDiff
 = 
expA
 - 
expB
;

28 
sigA
 <<= 10;

29 
sigB
 <<= 10;

30 i‡–0 < 
expDiff
 ) 
expABiggî
;

31 i‡–
expDiff
 < 0 ) 
expBBiggî
;

32 i‡–
expA
 == 0x7FF ) {

33 i‡–
sigA
 | 
sigB
 ) 
¥›ag©eNaN
;

34 
	`so·Êﬂt_øi£Fœgs
–
so·Êﬂt_Êag_övÆid
 );

35 
uiZ
 = 
deÁu…NaNF64UI
;

36 
uiZ
;

38 i‡–! 
expA
 ) {

39 
expA
 = 1;

40 
expB
 = 1;

42 i‡–
sigB
 < 
sigA
 ) 
aBiggî
;

43 i‡–
sigA
 < 
sigB
 ) 
bBiggî
;

44 
uiZ
 = 
	`∑ckToF64UI
–
so·Êﬂt_roundögMode
 =
so·Êﬂt_round_mö
, 0, 0 );

45 
uiZ
;

46 
expBBiggî
:

47 i‡–
expB
 == 0x7FF ) {

48 i‡–
sigB
 ) 
¥›ag©eNaN
;

49 
uiZ
 = 
	`∑ckToF64UI
–
signZ
 ^ 1, 0x7FF, 0 );

50 
uiZ
;

52 
sigA
 +
expA
 ? 
	`UINT64_C
( 0x4000000000000000 ) : sigA;

53 
sigA
 = 
	`so·Êﬂt_shi·64RightJam
–sigA, - 
expDiff
 );

54 
sigB
 |
	`UINT64_C
( 0x4000000000000000 );

55 
bBiggî
:

56 
signZ
 ^= 1;

57 
expZ
 = 
expB
;

58 
sigZ
 = 
sigB
 - 
sigA
;

59 
n‹mRoundPack
;

60 
expABiggî
:

61 i‡–
expA
 == 0x7FF ) {

62 i‡–
sigA
 ) 
¥›ag©eNaN
;

63 
uiZ
 = 
uiA
;

64 
uiZ
;

66 
sigB
 +
expB
 ? 
	`UINT64_C
( 0x4000000000000000 ) : sigB;

67 
sigB
 = 
	`so·Êﬂt_shi·64RightJam
–sigB, 
expDiff
 );

68 
sigA
 |
	`UINT64_C
( 0x4000000000000000 );

69 
aBiggî
:

70 
expZ
 = 
expA
;

71 
sigZ
 = 
sigA
 - 
sigB
;

72 
n‹mRoundPack
:

73  
	`so·Êﬂt_n‹mRoundPackToF64
–
signZ
, 
expZ
 - 1, 
sigZ
 );

74 
¥›ag©eNaN
:

75 
uiZ
 = 
	`so·Êﬂt_¥›ag©eNaNF64UI
–
uiA
, 
uiB
 );

76 
uiZ
:

77 
uZ
.
ui
 = 
uiZ
;

78  
uZ
.
f
;

80 
	}
}

	@softfloat/softfloat.h

2 #i‚de‡
so·Êﬂt_h


3 
	#so·Êﬂt_h


	)

5 #ifde‡
__˝lu•lus


42 
	~"so·Êﬂt_ty≥s.h
"

48 
so·Êﬂt_tööess_bef‹eRoundög
 = 0,

49 
so·Êﬂt_tööess_a·îRoundög
 = 1

56 
so·Êﬂt_round_√¨e°_eví
 = 0,

57 
so·Êﬂt_round_möMag
 = 1,

58 
so·Êﬂt_round_mö
 = 2,

59 
so·Êﬂt_round_max
 = 3,

60 
so·Êﬂt_round_√¨e°_maxMag
 = 4

66 
öt_Á°8_t
 
so·Êﬂt_ex˚±i⁄Fœgs
;

68 
	gso·Êﬂt_Êag_öexa˘
 = 1,

69 
	gso·Êﬂt_Êag_undîÊow
 = 2,

70 
	gso·Êﬂt_Êag_ovîÊow
 = 4,

71 
	gso·Êﬂt_Êag_öföôy
 = 8,

72 
	gso·Êﬂt_Êag_övÆid
 = 16

78 
Êﬂt32_t
 
ui32_to_f32
–
uöt_Á°32_t
 );

79 
Êﬂt64_t
 
ui32_to_f64
–
uöt_Á°32_t
 );

80 
Êﬂtx80_t
 
ui32_to_fx80
–
uöt_Á°32_t
 );

81 
Êﬂt128_t
 
ui32_to_f128
–
uöt_Á°32_t
 );

82 
Êﬂt32_t
 
ui64_to_f32
–
uöt_Á°64_t
 );

83 
Êﬂt64_t
 
ui64_to_f64
–
uöt_Á°64_t
 );

84 
Êﬂtx80_t
 
ui64_to_fx80
–
uöt_Á°64_t
 );

85 
Êﬂt128_t
 
ui64_to_f128
–
uöt_Á°64_t
 );

86 
Êﬂt32_t
 
i32_to_f32
–
öt_Á°32_t
 );

87 
Êﬂt64_t
 
i32_to_f64
–
öt_Á°32_t
 );

88 
Êﬂtx80_t
 
i32_to_fx80
–
öt_Á°32_t
 );

89 
Êﬂt128_t
 
i32_to_f128
–
öt_Á°32_t
 );

90 
Êﬂt32_t
 
i64_to_f32
–
öt_Á°64_t
 );

91 
Êﬂt64_t
 
i64_to_f64
–
öt_Á°64_t
 );

92 
Êﬂtx80_t
 
i64_to_fx80
–
öt_Á°64_t
 );

93 
Êﬂt128_t
 
i64_to_f128
–
öt_Á°64_t
 );

98 
uöt_Á°32_t
 
f32_to_ui32
–
Êﬂt32_t
, 
öt_Á°8_t
, 
boﬁ
 );

99 
uöt_Á°64_t
 
f32_to_ui64
–
Êﬂt32_t
, 
öt_Á°8_t
, 
boﬁ
 );

100 
öt_Á°32_t
 
f32_to_i32
–
Êﬂt32_t
, 
öt_Á°8_t
, 
boﬁ
 );

101 
öt_Á°64_t
 
f32_to_i64
–
Êﬂt32_t
, 
öt_Á°8_t
, 
boﬁ
 );

102 
uöt_Á°32_t
 
f32_to_ui32_r_möMag
–
Êﬂt32_t
, 
boﬁ
 );

103 
uöt_Á°64_t
 
f32_to_ui64_r_möMag
–
Êﬂt32_t
, 
boﬁ
 );

104 
öt_Á°32_t
 
f32_to_i32_r_möMag
–
Êﬂt32_t
, 
boﬁ
 );

105 
öt_Á°64_t
 
f32_to_i64_r_möMag
–
Êﬂt32_t
, 
boﬁ
 );

106 
Êﬂt64_t
 
f32_to_f64
–
Êﬂt32_t
 );

107 
Êﬂtx80_t
 
f32_to_fx80
–
Êﬂt32_t
 );

108 
Êﬂt128_t
 
f32_to_f128
–
Êﬂt32_t
 );

109 
Êﬂt32_t
 
f32_roundToI¡
–Êﬂt32_t, 
öt_Á°8_t
, 
boﬁ
 );

110 
Êﬂt32_t
 
f32_add
( float32_t, float32_t );

111 
Êﬂt32_t
 
f32_sub
( float32_t, float32_t );

112 
Êﬂt32_t
 
f32_mul
( float32_t, float32_t );

113 
Êﬂt32_t
 
f32_mulAdd
( float32_t, float32_t, float32_t );

114 
Êﬂt32_t
 
f32_div
( float32_t, float32_t );

115 
Êﬂt32_t
 
f32_ªm
( float32_t, float32_t );

116 
Êﬂt32_t
 
f32_sqπ
( float32_t );

117 
boﬁ
 
f32_eq
–
Êﬂt32_t
, float32_t );

118 
boﬁ
 
f32_À
–
Êﬂt32_t
, float32_t );

119 
boﬁ
 
f32_…
–
Êﬂt32_t
, float32_t );

120 
boﬁ
 
f32_eq_sig«lög
–
Êﬂt32_t
, float32_t );

121 
boﬁ
 
f32_À_quõt
–
Êﬂt32_t
, float32_t );

122 
boﬁ
 
f32_…_quõt
–
Êﬂt32_t
, float32_t );

123 
boﬁ
 
f32_isSig«lögNaN
–
Êﬂt32_t
 );

124 
uöt_Á°16_t
 
f32_˛assify
–
Êﬂt32_t
 
a
 );

129 
uöt_Á°32_t
 
f64_to_ui32
–
Êﬂt64_t
, 
öt_Á°8_t
, 
boﬁ
 );

130 
uöt_Á°64_t
 
f64_to_ui64
–
Êﬂt64_t
, 
öt_Á°8_t
, 
boﬁ
 );

131 
öt_Á°32_t
 
f64_to_i32
–
Êﬂt64_t
, 
öt_Á°8_t
, 
boﬁ
 );

132 
öt_Á°64_t
 
f64_to_i64
–
Êﬂt64_t
, 
öt_Á°8_t
, 
boﬁ
 );

133 
uöt_Á°32_t
 
f64_to_ui32_r_möMag
–
Êﬂt64_t
, 
boﬁ
 );

134 
uöt_Á°64_t
 
f64_to_ui64_r_möMag
–
Êﬂt64_t
, 
boﬁ
 );

135 
öt_Á°32_t
 
f64_to_i32_r_möMag
–
Êﬂt64_t
, 
boﬁ
 );

136 
öt_Á°64_t
 
f64_to_i64_r_möMag
–
Êﬂt64_t
, 
boﬁ
 );

137 
Êﬂt32_t
 
f64_to_f32
–
Êﬂt64_t
 );

138 
Êﬂtx80_t
 
f64_to_fx80
–
Êﬂt64_t
 );

139 
Êﬂt128_t
 
f64_to_f128
–
Êﬂt64_t
 );

140 
Êﬂt64_t
 
f64_roundToI¡
–Êﬂt64_t, 
öt_Á°8_t
, 
boﬁ
 );

141 
Êﬂt64_t
 
f64_add
( float64_t, float64_t );

142 
Êﬂt64_t
 
f64_sub
( float64_t, float64_t );

143 
Êﬂt64_t
 
f64_mul
( float64_t, float64_t );

144 
Êﬂt64_t
 
f64_mulAdd
( float64_t, float64_t, float64_t );

145 
Êﬂt64_t
 
f64_div
( float64_t, float64_t );

146 
Êﬂt64_t
 
f64_ªm
( float64_t, float64_t );

147 
Êﬂt64_t
 
f64_sqπ
( float64_t );

148 
boﬁ
 
f64_eq
–
Êﬂt64_t
, float64_t );

149 
boﬁ
 
f64_À
–
Êﬂt64_t
, float64_t );

150 
boﬁ
 
f64_…
–
Êﬂt64_t
, float64_t );

151 
boﬁ
 
f64_eq_sig«lög
–
Êﬂt64_t
, float64_t );

152 
boﬁ
 
f64_À_quõt
–
Êﬂt64_t
, float64_t );

153 
boﬁ
 
f64_…_quõt
–
Êﬂt64_t
, float64_t );

154 
boﬁ
 
f64_isSig«lögNaN
–
Êﬂt64_t
 );

155 
uöt_Á°16_t
 
f64_˛assify
–
Êﬂt64_t
 
a
 );

161 
öt_Á°8_t
 
Êﬂtx80_roundögPªcisi⁄
;

166 
uöt_Á°32_t
 
fx80_to_ui32
–
Êﬂtx80_t
, 
öt_Á°8_t
, 
boﬁ
 );

167 
uöt_Á°64_t
 
fx80_to_ui64
–
Êﬂtx80_t
, 
öt_Á°8_t
, 
boﬁ
 );

168 
öt_Á°32_t
 
fx80_to_i32
–
Êﬂtx80_t
, 
öt_Á°8_t
, 
boﬁ
 );

169 
öt_Á°64_t
 
fx80_to_i64
–
Êﬂtx80_t
, 
öt_Á°8_t
, 
boﬁ
 );

170 
uöt_Á°32_t
 
fx80_to_ui32_r_möMag
–
Êﬂtx80_t
, 
boﬁ
 );

171 
uöt_Á°64_t
 
fx80_to_ui64_r_möMag
–
Êﬂtx80_t
, 
boﬁ
 );

172 
öt_Á°32_t
 
fx80_to_i32_r_möMag
–
Êﬂtx80_t
, 
boﬁ
 );

173 
öt_Á°64_t
 
fx80_to_i64_r_möMag
–
Êﬂtx80_t
, 
boﬁ
 );

174 
Êﬂt32_t
 
fx80_to_f32
–
Êﬂtx80_t
 );

175 
Êﬂt64_t
 
fx80_to_f64
–
Êﬂtx80_t
 );

176 
Êﬂt128_t
 
fx80_to_f128
–
Êﬂtx80_t
 );

177 
Êﬂtx80_t
 
fx80_roundToI¡
–Êﬂtx80_t, 
öt_Á°8_t
, 
boﬁ
 );

178 
Êﬂtx80_t
 
fx80_add
( floatx80_t, floatx80_t );

179 
Êﬂtx80_t
 
fx80_sub
( floatx80_t, floatx80_t );

180 
Êﬂtx80_t
 
fx80_mul
( floatx80_t, floatx80_t );

181 
Êﬂtx80_t
 
fx80_mulAdd
( floatx80_t, floatx80_t, floatx80_t );

182 
Êﬂtx80_t
 
fx80_div
( floatx80_t, floatx80_t );

183 
Êﬂtx80_t
 
fx80_ªm
( floatx80_t, floatx80_t );

184 
Êﬂtx80_t
 
fx80_sqπ
( floatx80_t );

185 
boﬁ
 
fx80_eq
–
Êﬂtx80_t
, floatx80_t );

186 
boﬁ
 
fx80_À
–
Êﬂtx80_t
, floatx80_t );

187 
boﬁ
 
fx80_…
–
Êﬂtx80_t
, floatx80_t );

188 
boﬁ
 
fx80_eq_sig«lög
–
Êﬂtx80_t
, floatx80_t );

189 
boﬁ
 
fx80_À_quõt
–
Êﬂtx80_t
, floatx80_t );

190 
boﬁ
 
fx80_…_quõt
–
Êﬂtx80_t
, floatx80_t );

191 
boﬁ
 
fx80_isSig«lögNaN
–
Êﬂtx80_t
 );

196 
uöt_Á°32_t
 
f128_to_ui32
–
Êﬂt128_t
, 
öt_Á°8_t
, 
boﬁ
 );

197 
uöt_Á°64_t
 
f128_to_ui64
–
Êﬂt128_t
, 
öt_Á°8_t
, 
boﬁ
 );

198 
öt_Á°32_t
 
f128_to_i32
–
Êﬂt128_t
, 
öt_Á°8_t
, 
boﬁ
 );

199 
öt_Á°64_t
 
f128_to_i64
–
Êﬂt128_t
, 
öt_Á°8_t
, 
boﬁ
 );

200 
uöt_Á°32_t
 
f128_to_ui32_r_möMag
–
Êﬂt128_t
, 
boﬁ
 );

201 
uöt_Á°64_t
 
f128_to_ui64_r_möMag
–
Êﬂt128_t
, 
boﬁ
 );

202 
öt_Á°32_t
 
f128_to_i32_r_möMag
–
Êﬂt128_t
, 
boﬁ
 );

203 
öt_Á°64_t
 
f128_to_i64_r_möMag
–
Êﬂt128_t
, 
boﬁ
 );

204 
Êﬂt32_t
 
f128_to_f32
–
Êﬂt128_t
 );

205 
Êﬂt64_t
 
f128_to_f64
–
Êﬂt128_t
 );

206 
Êﬂtx80_t
 
f128_to_fx80
–
Êﬂt128_t
 );

207 
Êﬂt128_t
 
f128_roundToI¡
–Êﬂt128_t, 
öt_Á°8_t
, 
boﬁ
 );

208 
Êﬂt128_t
 
f128_add
( float128_t, float128_t );

209 
Êﬂt128_t
 
f128_sub
( float128_t, float128_t );

210 
Êﬂt128_t
 
f128_mul
( float128_t, float128_t );

211 
Êﬂt128_t
 
f128_mulAdd
( float128_t, float128_t, float128_t );

212 
Êﬂt128_t
 
f128_div
( float128_t, float128_t );

213 
Êﬂt128_t
 
f128_ªm
( float128_t, float128_t );

214 
Êﬂt128_t
 
f128_sqπ
( float128_t );

215 
boﬁ
 
f128_eq
–
Êﬂt128_t
, float128_t );

216 
boﬁ
 
f128_À
–
Êﬂt128_t
, float128_t );

217 
boﬁ
 
f128_…
–
Êﬂt128_t
, float128_t );

218 
boﬁ
 
f128_eq_sig«lög
–
Êﬂt128_t
, float128_t );

219 
boﬁ
 
f128_À_quõt
–
Êﬂt128_t
, float128_t );

220 
boﬁ
 
f128_…_quõt
–
Êﬂt128_t
, float128_t );

221 
boﬁ
 
f128_isSig«lögNaN
–
Êﬂt128_t
 );

223 
	~"•ecülize.h
"

229 
	#isNaNF32UI
–
ui
 ) (0xFF000000<(
uöt32_t
)((
uöt_Á°32_t
)(ui)<<1))

	)

234 
	#isNaNF64UI
–
ui
 ) (
	`UINT64_C
(0xFFE0000000000000)<(
uöt64_t
)((
uöt_Á°64_t
)(ui)<<1))

	)

237 
	gso·Êﬂt_mulAdd_subC
 = 1,

238 
	gso·Êﬂt_mulAdd_subProd
 = 2

241 
Êﬂt32_t


242 
so·Êﬂt_mulAddF32
–, 
uöt_Á°32_t
, uint_fast32_t, uint_fast32_t );

244 
Êﬂt64_t


245 
so·Êﬂt_mulAddF64
–, 
uöt_Á°64_t
, uint_fast64_t, uint_fast64_t );

247 #ifde‡
__˝lu•lus


	@softfloat/softfloat_raiseFlags.c

35 
	~"∂©f‹m.h
"

36 
	~"so·Êﬂt.h
"

45 
	$so·Êﬂt_øi£Fœgs
–
öt_Á°8_t
 
Êags
 )

48 
so·Êﬂt_ex˚±i⁄Fœgs
 |
Êags
;

50 
	}
}

	@softfloat/softfloat_types.h

2 #i‚de‡
so·Êﬂt_ty≥s_h


3 
	#so·Êﬂt_ty≥s_h


	)

7 
	~<°dboﬁ.h
>

8 
	~<°döt.h
>

10 
uöt32_t
 
	tÊﬂt32_t
;

11 
uöt64_t
 
	tÊﬂt64_t
;

12 °ru˘ { 
uöt64_t
 
	mv
; 
uöt16_t
 
	mx
; } 
	tÊﬂtx80_t
;

13 °ru˘ { 
uöt64_t
 
	mv
[ 2 ]; } 
	tÊﬂt128_t
;

15 
	#INLINE
 
ölöe


	)

16 
	#INLINE_LEVEL
 1

	)

	@softfloat/specialize.h

1 #i‚de‡
_so·Êﬂt_•ecülize_h


2 
	#_so·Êﬂt_•ecülize_h


	)

37 
	~"so·Êﬂt_ty≥s.h
"

41 
	#so·Êﬂt_dëe˘Tööess
 
so·Êﬂt_tööess_bef‹eRoundög


	)

46 
	scomm⁄NaN
 {

47 
boﬁ
 
	msign
;

48 
uöt64_t
 
	mv64
, 
	mv0
;

54 
	#deÁu…NaNF32UI
 0xFFFFFFFF

	)

60 #i‡
deföed
 
INLINE_LEVEL
 && ( 1 <= INLINE_LEVEL )

61 
INLINE
 
boﬁ
 
	$so·Êﬂt_isSigNaNF32UI
–
uöt_Á°32_t
 
ui
 )

62 {  ( ( 
ui
>>22 & 0x1FF ) =0x1FE ) && ( uò& 0x003FFFFF ); 
	}
}

64 
boﬁ
 
so·Êﬂt_isSigNaNF32UI
–
uöt_Á°32_t
 );

69 
comm⁄NaN
 
so·Êﬂt_f32UIToComm⁄NaN
–
uöt_Á°32_t
 );

70 #i‡
deföed
 
INLINE_LEVEL
 && ( 1 <= INLINE_LEVEL )

71 
INLINE
 
uöt_Á°32_t
 
	$so·Êﬂt_comm⁄NaNToF32UI
–
comm⁄NaN
 
a
 )

72 {  (
uöt_Á°32_t
Ë
a
.
sign
<<31 | 0x7FFFFFFF; 
	}
}

74 
uöt_Á°32_t
 
so·Êﬂt_comm⁄NaNToF32UI
–
comm⁄NaN
 );

82 
uöt_Á°32_t
 
so·Êﬂt_¥›ag©eNaNF32UI
( uint_fast32_t, uint_fast32_t );

87 
	#deÁu…NaNF64UI
 
	`UINT64_C
(0xFFFFFFFFFFFFFFFF)

	)

91 #i‡
deföed
 
INLINE_LEVEL
 && ( 1 <= INLINE_LEVEL )

92 
INLINE
 
boﬁ
 
	$so·Êﬂt_isSigNaNF64UI
–
uöt_Á°64_t
 
ui
 )

95 ––
ui
>>51 & 0xFFF ) == 0xFFE )

96 && ( 
ui
 & 
	`UINT64_C
( 0x0007FFFFFFFFFFFF ) );

97 
	}
}

99 
boﬁ
 
so·Êﬂt_isSigNaNF64UI
–
uöt_Á°64_t
 );

105 
comm⁄NaN
 
so·Êﬂt_f64UIToComm⁄NaN
–
uöt_Á°64_t
 );

106 
uöt_Á°64_t
 
so·Êﬂt_comm⁄NaNToF64UI
–
comm⁄NaN
 );

113 
uöt_Á°64_t
 
so·Êﬂt_¥›ag©eNaNF64UI
( uint_fast64_t, uint_fast64_t );

115 
	~"Â_emuœti⁄.h
"

	@softfloat/ui32_to_f32.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
Êﬂt32_t
 
	$ui32_to_f32
–
uöt_Á°32_t
 
a
 )

10 
ui32_f32
 
uZ
;

12 i‡–! 
a
 ) {

13 
uZ
.
ui
 = 0;

14  
uZ
.
f
;

16 i‡–
a
 & 0x80000000 ) {

18 
	`so·Êﬂt_roundPackToF32
(

19 0, 0x9D, 
	`so·Êﬂt_sh‹tShi·32Right1Jam
–
a
 ) );

21  
	`so·Êﬂt_n‹mRoundPackToF32
–0, 0x9C, 
a
 );

24 
	}
}

	@softfloat/ui32_to_f64.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
Êﬂt64_t
 
	$ui32_to_f64
–
uöt_Á°32_t
 
a
 )

10 
uöt_Á°64_t
 
uiZ
;

11 
shi·Cou¡
;

12 
ui64_f64
 
uZ
;

14 i‡–! 
a
 ) {

15 
uiZ
 = 0;

17 
shi·Cou¡
 = 
	`so·Êﬂt_cou¡LódögZîos32
–
a
 ) + 21;

18 
uiZ
 =

19 
	`∑ckToF64UI
(

20 0, 0x432 - 
shi·Cou¡
, (
uöt_Á°64_t
Ë
a
<<shiftCount );

22 
uZ
.
ui
 = 
uiZ
;

23  
uZ
.
f
;

25 
	}
}

	@softfloat/ui64_to_f32.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
Êﬂt32_t
 
	$ui64_to_f32
–
uöt_Á°64_t
 
a
 )

10 
shi·Cou¡
;

11 
ui32_f32
 
u
;

12 
uöt_Á°32_t
 
sig
;

14 
shi·Cou¡
 = 
	`so·Êﬂt_cou¡LódögZîos64
–
a
 ) - 40;

15 i‡–0 <
shi·Cou¡
 ) {

16 
u
.
ui
 =

17 
a
 ? 
	`∑ckToF32UI
(

18 0, 0x95 - 
shi·Cou¡
, (
uöt_Á°32_t
Ë
a
<<shiftCount )

20  
u
.
f
;

22 
shi·Cou¡
 += 7;

23 
sig
 =

24 –
shi·Cou¡
 < 0 )

25 ? 
	`so·Êﬂt_sh‹tShi·64RightJam
–
a
, - 
shi·Cou¡
 )

26 : (
uöt_Á°32_t
Ë
a
<<
shi·Cou¡
;

27  
	`so·Êﬂt_roundPackToF32
–0, 0x9C - 
shi·Cou¡
, 
sig
 );

30 
	}
}

	@softfloat/ui64_to_f64.c

2 
	~<°döt.h
>

3 
	~"∂©f‹m.h
"

4 
	~"¥imôives.h
"

5 
	~"öã∫Æs.h
"

6 
	~"so·Êﬂt.h
"

8 
Êﬂt64_t
 
	$ui64_to_f64
–
uöt_Á°64_t
 
a
 )

10 
ui64_f64
 
uZ
;

12 i‡–! 
a
 ) {

13 
uZ
.
ui
 = 0;

14  
uZ
.
f
;

16 i‡–
a
 & 
	`UINT64_C
( 0x8000000000000000 ) ) {

18 
	`so·Êﬂt_roundPackToF64
(

19 0, 0x43D, 
	`so·Êﬂt_sh‹tShi·64RightJam
–
a
, 1 ) );

21  
	`so·Êﬂt_n‹mRoundPackToF64
–0, 0x43C, 
a
 );

24 
	}
}

	@util/snprintf.c

3 
	~<°döt.h
>

4 
	~<°rög.h
>

5 
	~<°d¨g.h
>

6 
	~<°dboﬁ.h
>

8 
	$v¢¥ötf
(* 
out
, 
size_t
 
n
, c⁄° * 
s
, 
va_li°
 
vl
)

10 
boﬁ
 
f‹m©
 = 
Ál£
;

11 
boﬁ
 
l⁄g¨g
 = 
Ál£
;

12 
size_t
 
pos
 = 0;

13  ; *
s
; s++)

15 if(
f‹m©
)

17 *
s
)

20 
l⁄g¨g
 = 
åue
;

23 
l⁄g¨g
 = 
åue
;

24 i‡(++
pos
 < 
n
Ë
out
[pos-1] = '0';

25 i‡(++
pos
 < 
n
Ë
out
[pos-1] = 'x';

28 
num
 = 
l⁄g¨g
 ? 
	`va_¨g
(
vl
, ) : va_arg(vl, );

29 
i
 = 2*(
l⁄g¨g
 ? () : ())-1; i >= 0; i--) {

30 
d
 = (
num
 >> (4*
i
)) & 0xF;

31 i‡(++
pos
 < 
n
Ë
out
[pos-1] = (
d
 < 10 ? '0'+d : 'a'+d-10);

33 
l⁄g¨g
 = 
Ál£
;

34 
f‹m©
 = 
Ál£
;

39 
num
 = 
l⁄g¨g
 ? 
	`va_¨g
(
vl
, ) : va_arg(vl, );

40 i‡(
num
 < 0) {

41 
num
 = -num;

42 i‡(++
pos
 < 
n
Ë
out
[pos-1] = '-';

44 
digôs
 = 1;

45 
¬
 = 
num
;Ç¿/10; 
digôs
++)

47 
i
 = 
digôs
-1; i >= 0; i--) {

48 i‡(
pos
 + 
i
 + 1 < 
n
Ë
out
[po†+ i] = '0' + (
num
 % 10);

49 
num
 /= 10;

51 
pos
 +
digôs
;

52 
l⁄g¨g
 = 
Ál£
;

53 
f‹m©
 = 
Ál£
;

58 c⁄° * 
s2
 = 
	`va_¨g
(
vl
, const *);

59 *
s2
) {

60 i‡(++
pos
 < 
n
)

61 
out
[
pos
-1] = *
s2
;

62 
s2
++;

64 
l⁄g¨g
 = 
Ál£
;

65 
f‹m©
 = 
Ál£
;

70 i‡(++
pos
 < 
n
Ë
out
[pos-1] = ()
	`va_¨g
(
vl
,);

71 
l⁄g¨g
 = 
Ál£
;

72 
f‹m©
 = 
Ál£
;

79 if(*
s
 == '%')

80 
f‹m©
 = 
åue
;

82 i‡(++
pos
 < 
n
Ë
out
[pos-1] = *
s
;

84 i‡(
pos
 < 
n
)

85 
out
[
pos
] = 0;

86 i‡(
n
)

87 
out
[
n
-1] = 0;

88  
pos
;

89 
	}
}

91 
	$¢¥ötf
(* 
out
, 
size_t
 
n
, c⁄° * 
s
, ...)

93 
va_li°
 
vl
;

94 
	`va_°¨t
(
vl
, 
s
);

95 
ªs
 = 
	`v¢¥ötf
(
out
, 
n
, 
s
, 
vl
);

96 
	`va_íd
(
vl
);

97  
ªs
;

98 
	}
}

	@util/string.c

1 
	~<°rög.h
>

2 
	~<°döt.h
>

3 
	~<˘y≥.h
>

4 * 
	$mem˝y
(* 
de°
, c⁄° * 
§c
, 
size_t
 
Àn
)

6 c⁄° * 
s
 = 
§c
;

7 *
d
 = 
de°
;

8 i‡((((
uöçå_t
)
de°
 | (uöçå_t)
§c
) & ((uintptr_t)-1)) == 0) {

9 (*)
d
 < (
de°
 + 
Àn
 - ((
uöçå_t
)-1))) {

10 *(
uöçå_t
*)
d
 = *(c⁄° uöçå_t*)
s
;

11 
d
 +(
uöçå_t
);

12 
s
 +(
uöçå_t
);

15 
d
 < (*)(
de°
 + 
Àn
))

16 *
d
++ = *
s
++;

17  
de°
;

18 
	}
}

19 * 
	$mem£t
(* 
de°
, 
byã
, 
size_t
 
Àn
)

21 i‡((((
uöçå_t
)
de°
 | 
Àn
) & ((uintptr_t)-1)) == 0) {

22 
uöçå_t
 
w‹d
 = 
byã
 & 0xFF;

23 
w‹d
 |= word << 8;

24 
w‹d
 |= word << 16;

25 
w‹d
 |= word << 16 << 16;

26 
uöçå_t
 *
d
 = 
de°
;

27 
d
 < (
uöçå_t
*)(
de°
 + 
Àn
))

28 *
d
++ = 
w‹d
;

30 *
d
 = 
de°
;

31 
d
 < (*)(
de°
 + 
Àn
))

32 *
d
++ = 
byã
;

34  
de°
;

35 
	}
}

36 
size_t
 
	$°æí
(c⁄° *
s
)

38 c⁄° *
p
 = 
s
;

39 *
p
)

40 
p
++;

41  
p
 - 
s
;

42 
	}
}

43 
	$°rcmp
(c⁄° * 
s1
, c⁄° * 
s2
)

45 
c1
, 
c2
;

47 
c1
 = *
s1
++;

48 
c2
 = *
s2
++;

49 } 
c1
 !0 && c1 =
c2
);

50  
c1
 - 
c2
;

51 
	}
}

52 * 
	$°r˝y
(* 
de°
, c⁄° * 
§c
)

54 * 
d
 = 
de°
;

55 (*
d
++ = *
§c
++))

57  
de°
;

58 
	}
}

59 
	$©ﬁ
(c⁄° * 
°r
)

61 
ªs
 = 0;

62 
sign
 = 0;

63 *
°r
 == ' ')

64 
°r
++;

65 i‡(*
°r
 == '-' || *str == '+') {

66 
sign
 = *
°r
 == '-';

67 
°r
++;

69 *
°r
) {

70 
ªs
 *= 10;

71 
ªs
 +*
°r
++ - '0';

73  
sign
 ? -
ªs
 :Ñes;

74 
	}
}

	@
1
.
0
182
4377
Bin2Mem.c
bbl/bbl.c
bbl/bbl.h
bbl/kernel_elf.c
bbl/logo.c
bbl/payload.S
build/_dummy_payload.c
build/config.h
dummy_payload/dummy_payload.c
machine/atomic.h
machine/bits.h
machine/configstring.c
machine/configstring.h
machine/emulation.c
machine/emulation.h
machine/encoding.h
machine/fp_asm.S
machine/fp_emulation.c
machine/fp_emulation.h
machine/fp_ldst.c
machine/htif.h
machine/mcall.h
machine/mentry.S
machine/minit.c
machine/misaligned_ldst.c
machine/mtrap.c
machine/mtrap.h
machine/muldiv_emulation.c
machine/sbi.S
machine/sbi.h
machine/sbi_entry.S
machine/sbi_impl.c
machine/unprivileged_memory.h
machine/vm.h
pk/boot.h
pk/console.c
pk/elf.c
pk/elf.h
pk/entry.S
pk/file.c
pk/file.h
pk/frontend.c
pk/frontend.h
pk/handlers.c
pk/mmap.c
pk/mmap.h
pk/pk.c
pk/pk.h
pk/syscall.c
pk/syscall.h
softfloat/8086/OLD-specialize.c
softfloat/8086/OLD-specialize.h
softfloat/8086/platform.h
softfloat/8086/s_commonNaNToF32UI.c
softfloat/8086/s_commonNaNToF64UI.c
softfloat/8086/s_f32UIToCommonNaN.c
softfloat/8086/s_f64UIToCommonNaN.c
softfloat/8086/s_isSigNaNF32UI.c
softfloat/8086/s_isSigNaNF64UI.c
softfloat/8086/s_propagateNaNF32UI.c
softfloat/8086/s_propagateNaNF64UI.c
softfloat/8086/softfloat_raiseFlags.c
softfloat/8086/softfloat_types.h
softfloat/8086/specialize.h
softfloat/f32_add.c
softfloat/f32_classify.c
softfloat/f32_div.c
softfloat/f32_eq.c
softfloat/f32_eq_signaling.c
softfloat/f32_isSignalingNaN.c
softfloat/f32_le.c
softfloat/f32_le_quiet.c
softfloat/f32_lt.c
softfloat/f32_lt_quiet.c
softfloat/f32_mul.c
softfloat/f32_mulAdd.c
softfloat/f32_rem.c
softfloat/f32_roundToInt.c
softfloat/f32_sqrt.c
softfloat/f32_sub.c
softfloat/f32_to_f64.c
softfloat/f32_to_i32.c
softfloat/f32_to_i32_r_minMag.c
softfloat/f32_to_i64.c
softfloat/f32_to_i64_r_minMag.c
softfloat/f32_to_ui32.c
softfloat/f32_to_ui32_r_minMag.c
softfloat/f32_to_ui64.c
softfloat/f32_to_ui64_r_minMag.c
softfloat/f64_add.c
softfloat/f64_classify.c
softfloat/f64_div.c
softfloat/f64_eq.c
softfloat/f64_eq_signaling.c
softfloat/f64_isSignalingNaN.c
softfloat/f64_le.c
softfloat/f64_le_quiet.c
softfloat/f64_lt.c
softfloat/f64_lt_quiet.c
softfloat/f64_mul.c
softfloat/f64_mulAdd.c
softfloat/f64_rem.c
softfloat/f64_roundToInt.c
softfloat/f64_sqrt.c
softfloat/f64_sub.c
softfloat/f64_to_f32.c
softfloat/f64_to_i32.c
softfloat/f64_to_i32_r_minMag.c
softfloat/f64_to_i64.c
softfloat/f64_to_i64_r_minMag.c
softfloat/f64_to_ui32.c
softfloat/f64_to_ui32_r_minMag.c
softfloat/f64_to_ui64.c
softfloat/f64_to_ui64_r_minMag.c
softfloat/i32_to_f32.c
softfloat/i32_to_f64.c
softfloat/i64_to_f32.c
softfloat/i64_to_f64.c
softfloat/internals.h
softfloat/platform.h
softfloat/primitives.h
softfloat/s_add128.c
softfloat/s_add192.c
softfloat/s_addMagsF32.c
softfloat/s_addMagsF64.c
softfloat/s_commonNaNToF32UI.c
softfloat/s_commonNaNToF64UI.c
softfloat/s_countLeadingZeros32.c
softfloat/s_countLeadingZeros64.c
softfloat/s_countLeadingZeros8.c
softfloat/s_eq128.c
softfloat/s_estimateDiv128To64.c
softfloat/s_estimateSqrt32.c
softfloat/s_f32UIToCommonNaN.c
softfloat/s_f64UIToCommonNaN.c
softfloat/s_isSigNaNF32UI.c
softfloat/s_isSigNaNF64UI.c
softfloat/s_le128.c
softfloat/s_lt128.c
softfloat/s_mul128By64To192.c
softfloat/s_mul128To256.c
softfloat/s_mul64To128.c
softfloat/s_mulAddF32.c
softfloat/s_mulAddF64.c
softfloat/s_normRoundPackToF32.c
softfloat/s_normRoundPackToF64.c
softfloat/s_normSubnormalF32Sig.c
softfloat/s_normSubnormalF64Sig.c
softfloat/s_propagateNaNF32UI.c
softfloat/s_propagateNaNF64UI.c
softfloat/s_roundPackToF32.c
softfloat/s_roundPackToF64.c
softfloat/s_roundPackToI32.c
softfloat/s_roundPackToI64.c
softfloat/s_roundPackToUI32.c
softfloat/s_roundPackToUI64.c
softfloat/s_shift128ExtraRightJam.c
softfloat/s_shift128RightJam.c
softfloat/s_shift32RightJam.c
softfloat/s_shift64ExtraRightJam.c
softfloat/s_shift64RightJam.c
softfloat/s_shortShift128ExtraRightJam.c
softfloat/s_shortShift128Left.c
softfloat/s_shortShift128Right.c
softfloat/s_shortShift192Left.c
softfloat/s_shortShift32Right1Jam.c
softfloat/s_shortShift64ExtraRightJam.c
softfloat/s_shortShift64RightJam.c
softfloat/s_sub128.c
softfloat/s_sub192.c
softfloat/s_subMagsF32.c
softfloat/s_subMagsF64.c
softfloat/softfloat.h
softfloat/softfloat_raiseFlags.c
softfloat/softfloat_types.h
softfloat/specialize.h
softfloat/ui32_to_f32.c
softfloat/ui32_to_f64.c
softfloat/ui64_to_f32.c
softfloat/ui64_to_f64.c
util/snprintf.c
util/string.c
